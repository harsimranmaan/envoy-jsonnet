{
  envoy: {
    config: {
      accesslog: {
        v3: {
          AccessLog: (import 'pkg/envoy.config.accesslog.v3/access-log.libsonnet').definition,
          AccessLogFilter: (import 'pkg/envoy.config.accesslog.v3/access-log-filter.libsonnet').definition,
          AndFilter: (import 'pkg/envoy.config.accesslog.v3/and-filter.libsonnet').definition,
          ComparisonFilter: (import 'pkg/envoy.config.accesslog.v3/comparison-filter.libsonnet').definition,
          DurationFilter: (import 'pkg/envoy.config.accesslog.v3/duration-filter.libsonnet').definition,
          ExtensionFilter: (import 'pkg/envoy.config.accesslog.v3/extension-filter.libsonnet').definition,
          GrpcStatusFilter: (import 'pkg/envoy.config.accesslog.v3/grpc-status-filter.libsonnet').definition,
          HeaderFilter: (import 'pkg/envoy.config.accesslog.v3/header-filter.libsonnet').definition,
          MetadataFilter: (import 'pkg/envoy.config.accesslog.v3/metadata-filter.libsonnet').definition,
          NotHealthCheckFilter: (import 'pkg/envoy.config.accesslog.v3/not-health-check-filter.libsonnet').definition,
          OrFilter: (import 'pkg/envoy.config.accesslog.v3/or-filter.libsonnet').definition,
          ResponseFlagFilter: (import 'pkg/envoy.config.accesslog.v3/response-flag-filter.libsonnet').definition,
          RuntimeFilter: (import 'pkg/envoy.config.accesslog.v3/runtime-filter.libsonnet').definition,
          StatusCodeFilter: (import 'pkg/envoy.config.accesslog.v3/status-code-filter.libsonnet').definition,
          TraceableFilter: (import 'pkg/envoy.config.accesslog.v3/traceable-filter.libsonnet').definition,
        },
      },
      bootstrap: {
        v3: {
          Admin: (import 'pkg/envoy.config.bootstrap.v3/admin.libsonnet').definition,
          Bootstrap: (import 'pkg/envoy.config.bootstrap.v3/bootstrap.libsonnet').definition,
          ClusterManager: (import 'pkg/envoy.config.bootstrap.v3/cluster-manager.libsonnet').definition,
          CustomInlineHeader: (import 'pkg/envoy.config.bootstrap.v3/custom-inline-header.libsonnet').definition,
          FatalAction: (import 'pkg/envoy.config.bootstrap.v3/fatal-action.libsonnet').definition,
          LayeredRuntime: (import 'pkg/envoy.config.bootstrap.v3/layered-runtime.libsonnet').definition,
          Runtime: (import 'pkg/envoy.config.bootstrap.v3/runtime.libsonnet').definition,
          RuntimeLayer: (import 'pkg/envoy.config.bootstrap.v3/runtime-layer.libsonnet').definition,
          Watchdog: (import 'pkg/envoy.config.bootstrap.v3/watchdog.libsonnet').definition,
          Watchdogs: (import 'pkg/envoy.config.bootstrap.v3/watchdogs.libsonnet').definition,
        },
      },
      cluster: {
        v3: {
          CircuitBreakers: (import 'pkg/envoy.config.cluster.v3/circuit-breakers.libsonnet').definition,
          Cluster: (import 'pkg/envoy.config.cluster.v3/cluster.libsonnet').definition,
          ClusterCollection: (import 'pkg/envoy.config.cluster.v3/cluster-collection.libsonnet').definition,
          Filter: (import 'pkg/envoy.config.cluster.v3/filter.libsonnet').definition,
          LoadBalancingPolicy: (import 'pkg/envoy.config.cluster.v3/load-balancing-policy.libsonnet').definition,
          OutlierDetection: (import 'pkg/envoy.config.cluster.v3/outlier-detection.libsonnet').definition,
          TrackClusterStats: (import 'pkg/envoy.config.cluster.v3/track-cluster-stats.libsonnet').definition,
          UpstreamConnectionOptions: (import 'pkg/envoy.config.cluster.v3/upstream-connection-options.libsonnet').definition,
        },
      },
      core: {
        v3: {
          Address: (import 'pkg/envoy.config.core.v3/address.libsonnet').definition,
          AggregatedConfigSource: (import 'pkg/envoy.config.core.v3/aggregated-config-source.libsonnet').definition,
          AlternateProtocolsCacheOptions: (import 'pkg/envoy.config.core.v3/alternate-protocols-cache-options.libsonnet').definition,
          ApiConfigSource: (import 'pkg/envoy.config.core.v3/api-config-source.libsonnet').definition,
          ApiVersion: (import 'pkg/envoy.config.core.v3/api-version.libsonnet').definition,
          AsyncDataSource: (import 'pkg/envoy.config.core.v3/async-data-source.libsonnet').definition,
          BackoffStrategy: (import 'pkg/envoy.config.core.v3/backoff-strategy.libsonnet').definition,
          BindConfig: (import 'pkg/envoy.config.core.v3/bind-config.libsonnet').definition,
          BuildVersion: (import 'pkg/envoy.config.core.v3/build-version.libsonnet').definition,
          CidrRange: (import 'pkg/envoy.config.core.v3/cidr-range.libsonnet').definition,
          ConfigSource: (import 'pkg/envoy.config.core.v3/config-source.libsonnet').definition,
          ControlPlane: (import 'pkg/envoy.config.core.v3/control-plane.libsonnet').definition,
          DataSource: (import 'pkg/envoy.config.core.v3/data-source.libsonnet').definition,
          DnsResolutionConfig: (import 'pkg/envoy.config.core.v3/dns-resolution-config.libsonnet').definition,
          DnsResolverOptions: (import 'pkg/envoy.config.core.v3/dns-resolver-options.libsonnet').definition,
          EnvoyInternalAddress: (import 'pkg/envoy.config.core.v3/envoy-internal-address.libsonnet').definition,
          EventServiceConfig: (import 'pkg/envoy.config.core.v3/event-service-config.libsonnet').definition,
          Extension: (import 'pkg/envoy.config.core.v3/extension.libsonnet').definition,
          ExtensionConfigSource: (import 'pkg/envoy.config.core.v3/extension-config-source.libsonnet').definition,
          ExtraSourceAddress: (import 'pkg/envoy.config.core.v3/extra-source-address.libsonnet').definition,
          GrpcProtocolOptions: (import 'pkg/envoy.config.core.v3/grpc-protocol-options.libsonnet').definition,
          GrpcService: (import 'pkg/envoy.config.core.v3/grpc-service.libsonnet').definition,
          HeaderMap: (import 'pkg/envoy.config.core.v3/header-map.libsonnet').definition,
          HeaderValue: (import 'pkg/envoy.config.core.v3/header-value.libsonnet').definition,
          HeaderValueOption: (import 'pkg/envoy.config.core.v3/header-value-option.libsonnet').definition,
          HealthCheck: (import 'pkg/envoy.config.core.v3/health-check.libsonnet').definition,
          HealthStatus: (import 'pkg/envoy.config.core.v3/health-status.libsonnet').definition,
          HealthStatusSet: (import 'pkg/envoy.config.core.v3/health-status-set.libsonnet').definition,
          Http1ProtocolOptions: (import 'pkg/envoy.config.core.v3/http-1-protocol-options.libsonnet').definition,
          Http2ProtocolOptions: (import 'pkg/envoy.config.core.v3/http-2-protocol-options.libsonnet').definition,
          Http3ProtocolOptions: (import 'pkg/envoy.config.core.v3/http-3-protocol-options.libsonnet').definition,
          HttpProtocolOptions: (import 'pkg/envoy.config.core.v3/http-protocol-options.libsonnet').definition,
          HttpUri: (import 'pkg/envoy.config.core.v3/http-uri.libsonnet').definition,
          KeepaliveSettings: (import 'pkg/envoy.config.core.v3/keepalive-settings.libsonnet').definition,
          Locality: (import 'pkg/envoy.config.core.v3/locality.libsonnet').definition,
          Metadata: (import 'pkg/envoy.config.core.v3/metadata.libsonnet').definition,
          Node: (import 'pkg/envoy.config.core.v3/node.libsonnet').definition,
          PathConfigSource: (import 'pkg/envoy.config.core.v3/path-config-source.libsonnet').definition,
          Pipe: (import 'pkg/envoy.config.core.v3/pipe.libsonnet').definition,
          ProxyProtocolConfig: (import 'pkg/envoy.config.core.v3/proxy-protocol-config.libsonnet').definition,
          QueryParameter: (import 'pkg/envoy.config.core.v3/query-parameter.libsonnet').definition,
          QuicKeepAliveSettings: (import 'pkg/envoy.config.core.v3/quic-keep-alive-settings.libsonnet').definition,
          QuicProtocolOptions: (import 'pkg/envoy.config.core.v3/quic-protocol-options.libsonnet').definition,
          RateLimitSettings: (import 'pkg/envoy.config.core.v3/rate-limit-settings.libsonnet').definition,
          RemoteDataSource: (import 'pkg/envoy.config.core.v3/remote-data-source.libsonnet').definition,
          RequestMethod: (import 'pkg/envoy.config.core.v3/request-method.libsonnet').definition,
          RetryPolicy: (import 'pkg/envoy.config.core.v3/retry-policy.libsonnet').definition,
          RoutingPriority: (import 'pkg/envoy.config.core.v3/routing-priority.libsonnet').definition,
          RuntimeDouble: (import 'pkg/envoy.config.core.v3/runtime-double.libsonnet').definition,
          RuntimeFeatureFlag: (import 'pkg/envoy.config.core.v3/runtime-feature-flag.libsonnet').definition,
          RuntimeFractionalPercent: (import 'pkg/envoy.config.core.v3/runtime-fractional-percent.libsonnet').definition,
          RuntimePercent: (import 'pkg/envoy.config.core.v3/runtime-percent.libsonnet').definition,
          RuntimeUInt32: (import 'pkg/envoy.config.core.v3/runtime-u-int-32.libsonnet').definition,
          SchemeHeaderTransformation: (import 'pkg/envoy.config.core.v3/scheme-header-transformation.libsonnet').definition,
          SelfConfigSource: (import 'pkg/envoy.config.core.v3/self-config-source.libsonnet').definition,
          SocketAddress: (import 'pkg/envoy.config.core.v3/socket-address.libsonnet').definition,
          SocketOption: (import 'pkg/envoy.config.core.v3/socket-option.libsonnet').definition,
          SocketOptionsOverride: (import 'pkg/envoy.config.core.v3/socket-options-override.libsonnet').definition,
          TcpKeepalive: (import 'pkg/envoy.config.core.v3/tcp-keepalive.libsonnet').definition,
          TcpProtocolOptions: (import 'pkg/envoy.config.core.v3/tcp-protocol-options.libsonnet').definition,
          TrafficDirection: (import 'pkg/envoy.config.core.v3/traffic-direction.libsonnet').definition,
          TransportSocket: (import 'pkg/envoy.config.core.v3/transport-socket.libsonnet').definition,
          TypedExtensionConfig: (import 'pkg/envoy.config.core.v3/typed-extension-config.libsonnet').definition,
          UdpSocketConfig: (import 'pkg/envoy.config.core.v3/udp-socket-config.libsonnet').definition,
          UpstreamHttpProtocolOptions: (import 'pkg/envoy.config.core.v3/upstream-http-protocol-options.libsonnet').definition,
          WatchedDirectory: (import 'pkg/envoy.config.core.v3/watched-directory.libsonnet').definition,
        },
      },
      endpoint: {
        v3: {
          ClusterLoadAssignment: (import 'pkg/envoy.config.endpoint.v3/cluster-load-assignment.libsonnet').definition,
          Endpoint: (import 'pkg/envoy.config.endpoint.v3/endpoint.libsonnet').definition,
          LbEndpoint: (import 'pkg/envoy.config.endpoint.v3/lb-endpoint.libsonnet').definition,
          LedsClusterLocalityConfig: (import 'pkg/envoy.config.endpoint.v3/leds-cluster-locality-config.libsonnet').definition,
          LocalityLbEndpoints: (import 'pkg/envoy.config.endpoint.v3/locality-lb-endpoints.libsonnet').definition,
        },
      },
      listener: {
        v3: {
          ActiveRawUdpListenerConfig: (import 'pkg/envoy.config.listener.v3/active-raw-udp-listener-config.libsonnet').definition,
          AdditionalAddress: (import 'pkg/envoy.config.listener.v3/additional-address.libsonnet').definition,
          ApiListener: (import 'pkg/envoy.config.listener.v3/api-listener.libsonnet').definition,
          Filter: (import 'pkg/envoy.config.listener.v3/filter.libsonnet').definition,
          FilterChain: (import 'pkg/envoy.config.listener.v3/filter-chain.libsonnet').definition,
          FilterChainMatch: (import 'pkg/envoy.config.listener.v3/filter-chain-match.libsonnet').definition,
          Listener: (import 'pkg/envoy.config.listener.v3/listener.libsonnet').definition,
          ListenerCollection: (import 'pkg/envoy.config.listener.v3/listener-collection.libsonnet').definition,
          ListenerFilter: (import 'pkg/envoy.config.listener.v3/listener-filter.libsonnet').definition,
          ListenerFilterChainMatchPredicate: (import 'pkg/envoy.config.listener.v3/listener-filter-chain-match-predicate.libsonnet').definition,
          QuicProtocolOptions: (import 'pkg/envoy.config.listener.v3/quic-protocol-options.libsonnet').definition,
          UdpListenerConfig: (import 'pkg/envoy.config.listener.v3/udp-listener-config.libsonnet').definition,
        },
      },
      metrics: {
        v3: {
          DogStatsdSink: (import 'pkg/envoy.config.metrics.v3/dog-statsd-sink.libsonnet').definition,
          HistogramBucketSettings: (import 'pkg/envoy.config.metrics.v3/histogram-bucket-settings.libsonnet').definition,
          HystrixSink: (import 'pkg/envoy.config.metrics.v3/hystrix-sink.libsonnet').definition,
          StatsConfig: (import 'pkg/envoy.config.metrics.v3/stats-config.libsonnet').definition,
          StatsMatcher: (import 'pkg/envoy.config.metrics.v3/stats-matcher.libsonnet').definition,
          StatsSink: (import 'pkg/envoy.config.metrics.v3/stats-sink.libsonnet').definition,
          StatsdSink: (import 'pkg/envoy.config.metrics.v3/statsd-sink.libsonnet').definition,
          TagSpecifier: (import 'pkg/envoy.config.metrics.v3/tag-specifier.libsonnet').definition,
        },
      },
      overload: {
        v3: {
          BufferFactoryConfig: (import 'pkg/envoy.config.overload.v3/buffer-factory-config.libsonnet').definition,
          OverloadAction: (import 'pkg/envoy.config.overload.v3/overload-action.libsonnet').definition,
          OverloadManager: (import 'pkg/envoy.config.overload.v3/overload-manager.libsonnet').definition,
          ResourceMonitor: (import 'pkg/envoy.config.overload.v3/resource-monitor.libsonnet').definition,
          ScaleTimersOverloadActionConfig: (import 'pkg/envoy.config.overload.v3/scale-timers-overload-action-config.libsonnet').definition,
          ScaledTrigger: (import 'pkg/envoy.config.overload.v3/scaled-trigger.libsonnet').definition,
          ThresholdTrigger: (import 'pkg/envoy.config.overload.v3/threshold-trigger.libsonnet').definition,
          Trigger: (import 'pkg/envoy.config.overload.v3/trigger.libsonnet').definition,
        },
      },
      route: {
        v3: {
          ClusterSpecifierPlugin: (import 'pkg/envoy.config.route.v3/cluster-specifier-plugin.libsonnet').definition,
          CorsPolicy: (import 'pkg/envoy.config.route.v3/cors-policy.libsonnet').definition,
          Decorator: (import 'pkg/envoy.config.route.v3/decorator.libsonnet').definition,
          DirectResponseAction: (import 'pkg/envoy.config.route.v3/direct-response-action.libsonnet').definition,
          FilterAction: (import 'pkg/envoy.config.route.v3/filter-action.libsonnet').definition,
          FilterConfig: (import 'pkg/envoy.config.route.v3/filter-config.libsonnet').definition,
          HeaderMatcher: (import 'pkg/envoy.config.route.v3/header-matcher.libsonnet').definition,
          HedgePolicy: (import 'pkg/envoy.config.route.v3/hedge-policy.libsonnet').definition,
          InternalRedirectPolicy: (import 'pkg/envoy.config.route.v3/internal-redirect-policy.libsonnet').definition,
          NonForwardingAction: (import 'pkg/envoy.config.route.v3/non-forwarding-action.libsonnet').definition,
          QueryParameterMatcher: (import 'pkg/envoy.config.route.v3/query-parameter-matcher.libsonnet').definition,
          RateLimit: (import 'pkg/envoy.config.route.v3/rate-limit.libsonnet').definition,
          RedirectAction: (import 'pkg/envoy.config.route.v3/redirect-action.libsonnet').definition,
          RetryPolicy: (import 'pkg/envoy.config.route.v3/retry-policy.libsonnet').definition,
          Route: (import 'pkg/envoy.config.route.v3/route.libsonnet').definition,
          RouteAction: (import 'pkg/envoy.config.route.v3/route-action.libsonnet').definition,
          RouteList: (import 'pkg/envoy.config.route.v3/route-list.libsonnet').definition,
          RouteMatch: (import 'pkg/envoy.config.route.v3/route-match.libsonnet').definition,
          Tracing: (import 'pkg/envoy.config.route.v3/tracing.libsonnet').definition,
          VirtualCluster: (import 'pkg/envoy.config.route.v3/virtual-cluster.libsonnet').definition,
          VirtualHost: (import 'pkg/envoy.config.route.v3/virtual-host.libsonnet').definition,
          WeightedCluster: (import 'pkg/envoy.config.route.v3/weighted-cluster.libsonnet').definition,
        },
      },
      trace: {
        v3: {
          Tracing: (import 'pkg/envoy.config.trace.v3/tracing.libsonnet').definition,
        },
      },
    },
    extensions: {
      transport_sockets: {
        tls: {
          v3: {
            CertificateProviderPluginInstance: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/certificate-provider-plugin-instance.libsonnet').definition,
            CertificateValidationContext: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/certificate-validation-context.libsonnet').definition,
            GenericSecret: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/generic-secret.libsonnet').definition,
            PrivateKeyProvider: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/private-key-provider.libsonnet').definition,
            SdsSecretConfig: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/sds-secret-config.libsonnet').definition,
            Secret: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/secret.libsonnet').definition,
            SubjectAltNameMatcher: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/subject-alt-name-matcher.libsonnet').definition,
            TlsCertificate: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/tls-certificate.libsonnet').definition,
            TlsParameters: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/tls-parameters.libsonnet').definition,
            TlsSessionTicketKeys: (import 'pkg/envoy.extensions.transport_sockets.tls.v3/tls-session-ticket-keys.libsonnet').definition,
          },
        },
      },
    },
    type: {
      matcher: {
        v3: {
          DoubleMatcher: (import 'pkg/envoy.type.matcher.v3/double-matcher.libsonnet').definition,
          ListMatcher: (import 'pkg/envoy.type.matcher.v3/list-matcher.libsonnet').definition,
          ListStringMatcher: (import 'pkg/envoy.type.matcher.v3/list-string-matcher.libsonnet').definition,
          MetadataMatcher: (import 'pkg/envoy.type.matcher.v3/metadata-matcher.libsonnet').definition,
          RegexMatchAndSubstitute: (import 'pkg/envoy.type.matcher.v3/regex-match-and-substitute.libsonnet').definition,
          RegexMatcher: (import 'pkg/envoy.type.matcher.v3/regex-matcher.libsonnet').definition,
          StringMatcher: (import 'pkg/envoy.type.matcher.v3/string-matcher.libsonnet').definition,
          ValueMatcher: (import 'pkg/envoy.type.matcher.v3/value-matcher.libsonnet').definition,
        },
      },
      metadata: {
        v3: {
          MetadataKey: (import 'pkg/envoy.type.metadata.v3/metadata-key.libsonnet').definition,
          MetadataKind: (import 'pkg/envoy.type.metadata.v3/metadata-kind.libsonnet').definition,
        },
      },
      tracing: {
        v3: {
          CustomTag: (import 'pkg/envoy.type.tracing.v3/custom-tag.libsonnet').definition,
        },
      },
      v3: {
        CodecClientType: (import 'pkg/envoy.type.v3/codec-client-type.libsonnet').definition,
        DoubleRange: (import 'pkg/envoy.type.v3/double-range.libsonnet').definition,
        FractionalPercent: (import 'pkg/envoy.type.v3/fractional-percent.libsonnet').definition,
        Int32Range: (import 'pkg/envoy.type.v3/int-32-range.libsonnet').definition,
        Int64Range: (import 'pkg/envoy.type.v3/int-64-range.libsonnet').definition,
        Percent: (import 'pkg/envoy.type.v3/percent.libsonnet').definition,
        SemanticVersion: (import 'pkg/envoy.type.v3/semantic-version.libsonnet').definition,
      },
    },
  },
  google: {
    protobuf: {
      Any: (import 'pkg/google.protobuf/any.libsonnet').definition,
      BoolValue: (import 'pkg/google.protobuf/bool-value.libsonnet').definition,
      BytesValue: (import 'pkg/google.protobuf/bytes-value.libsonnet').definition,
      DescriptorProto: (import 'pkg/google.protobuf/descriptor-proto.libsonnet').definition,
      DoubleValue: (import 'pkg/google.protobuf/double-value.libsonnet').definition,
      Duration: (import 'pkg/google.protobuf/duration.libsonnet').definition,
      Empty: (import 'pkg/google.protobuf/empty.libsonnet').definition,
      EnumDescriptorProto: (import 'pkg/google.protobuf/enum-descriptor-proto.libsonnet').definition,
      EnumOptions: (import 'pkg/google.protobuf/enum-options.libsonnet').definition,
      EnumValueDescriptorProto: (import 'pkg/google.protobuf/enum-value-descriptor-proto.libsonnet').definition,
      EnumValueOptions: (import 'pkg/google.protobuf/enum-value-options.libsonnet').definition,
      ExtensionRangeOptions: (import 'pkg/google.protobuf/extension-range-options.libsonnet').definition,
      FieldDescriptorProto: (import 'pkg/google.protobuf/field-descriptor-proto.libsonnet').definition,
      FieldOptions: (import 'pkg/google.protobuf/field-options.libsonnet').definition,
      FileDescriptorProto: (import 'pkg/google.protobuf/file-descriptor-proto.libsonnet').definition,
      FileDescriptorSet: (import 'pkg/google.protobuf/file-descriptor-set.libsonnet').definition,
      FileOptions: (import 'pkg/google.protobuf/file-options.libsonnet').definition,
      FloatValue: (import 'pkg/google.protobuf/float-value.libsonnet').definition,
      GeneratedCodeInfo: (import 'pkg/google.protobuf/generated-code-info.libsonnet').definition,
      Int32Value: (import 'pkg/google.protobuf/int-32-value.libsonnet').definition,
      Int64Value: (import 'pkg/google.protobuf/int-64-value.libsonnet').definition,
      ListValue: (import 'pkg/google.protobuf/list-value.libsonnet').definition,
      MessageOptions: (import 'pkg/google.protobuf/message-options.libsonnet').definition,
      MethodDescriptorProto: (import 'pkg/google.protobuf/method-descriptor-proto.libsonnet').definition,
      MethodOptions: (import 'pkg/google.protobuf/method-options.libsonnet').definition,
      NullValue: (import 'pkg/google.protobuf/null-value.libsonnet').definition,
      OneofDescriptorProto: (import 'pkg/google.protobuf/oneof-descriptor-proto.libsonnet').definition,
      OneofOptions: (import 'pkg/google.protobuf/oneof-options.libsonnet').definition,
      ServiceDescriptorProto: (import 'pkg/google.protobuf/service-descriptor-proto.libsonnet').definition,
      ServiceOptions: (import 'pkg/google.protobuf/service-options.libsonnet').definition,
      SourceCodeInfo: (import 'pkg/google.protobuf/source-code-info.libsonnet').definition,
      StringValue: (import 'pkg/google.protobuf/string-value.libsonnet').definition,
      Struct: (import 'pkg/google.protobuf/struct.libsonnet').definition,
      Timestamp: (import 'pkg/google.protobuf/timestamp.libsonnet').definition,
      UInt32Value: (import 'pkg/google.protobuf/u-int-32-value.libsonnet').definition,
      UInt64Value: (import 'pkg/google.protobuf/u-int-64-value.libsonnet').definition,
      UninterpretedOption: (import 'pkg/google.protobuf/uninterpreted-option.libsonnet').definition,
      Value: (import 'pkg/google.protobuf/value.libsonnet').definition,
    },
  },
  udpa: {
    annotations: {
      FieldMigrateAnnotation: (import 'pkg/udpa.annotations/field-migrate-annotation.libsonnet').definition,
      FieldSecurityAnnotation: (import 'pkg/udpa.annotations/field-security-annotation.libsonnet').definition,
      FileMigrateAnnotation: (import 'pkg/udpa.annotations/file-migrate-annotation.libsonnet').definition,
      MigrateAnnotation: (import 'pkg/udpa.annotations/migrate-annotation.libsonnet').definition,
      PackageVersionStatus: (import 'pkg/udpa.annotations/package-version-status.libsonnet').definition,
      StatusAnnotation: (import 'pkg/udpa.annotations/status-annotation.libsonnet').definition,
      VersioningAnnotation: (import 'pkg/udpa.annotations/versioning-annotation.libsonnet').definition,
    },
  },
  validate: {
    AnyRules: (import 'pkg/validate/any-rules.libsonnet').definition,
    BoolRules: (import 'pkg/validate/bool-rules.libsonnet').definition,
    BytesRules: (import 'pkg/validate/bytes-rules.libsonnet').definition,
    DoubleRules: (import 'pkg/validate/double-rules.libsonnet').definition,
    DurationRules: (import 'pkg/validate/duration-rules.libsonnet').definition,
    EnumRules: (import 'pkg/validate/enum-rules.libsonnet').definition,
    FieldRules: (import 'pkg/validate/field-rules.libsonnet').definition,
    Fixed32Rules: (import 'pkg/validate/fixed-32-rules.libsonnet').definition,
    Fixed64Rules: (import 'pkg/validate/fixed-64-rules.libsonnet').definition,
    FloatRules: (import 'pkg/validate/float-rules.libsonnet').definition,
    Int32Rules: (import 'pkg/validate/int-32-rules.libsonnet').definition,
    Int64Rules: (import 'pkg/validate/int-64-rules.libsonnet').definition,
    KnownRegex: (import 'pkg/validate/known-regex.libsonnet').definition,
    MapRules: (import 'pkg/validate/map-rules.libsonnet').definition,
    MessageRules: (import 'pkg/validate/message-rules.libsonnet').definition,
    RepeatedRules: (import 'pkg/validate/repeated-rules.libsonnet').definition,
    SFixed32Rules: (import 'pkg/validate/s-fixed-32-rules.libsonnet').definition,
    SFixed64Rules: (import 'pkg/validate/s-fixed-64-rules.libsonnet').definition,
    SInt32Rules: (import 'pkg/validate/s-int-32-rules.libsonnet').definition,
    SInt64Rules: (import 'pkg/validate/s-int-64-rules.libsonnet').definition,
    StringRules: (import 'pkg/validate/string-rules.libsonnet').definition,
    TimestampRules: (import 'pkg/validate/timestamp-rules.libsonnet').definition,
    UInt32Rules: (import 'pkg/validate/u-int-32-rules.libsonnet').definition,
    UInt64Rules: (import 'pkg/validate/u-int-64-rules.libsonnet').definition,
  },
  xds: {
    annotations: {
      v3: {
        FieldStatusAnnotation: (import 'pkg/xds.annotations.v3/field-status-annotation.libsonnet').definition,
        FileStatusAnnotation: (import 'pkg/xds.annotations.v3/file-status-annotation.libsonnet').definition,
        MessageStatusAnnotation: (import 'pkg/xds.annotations.v3/message-status-annotation.libsonnet').definition,
        PackageVersionStatus: (import 'pkg/xds.annotations.v3/package-version-status.libsonnet').definition,
        StatusAnnotation: (import 'pkg/xds.annotations.v3/status-annotation.libsonnet').definition,
      },
    },
    core: {
      v3: {
        Authority: (import 'pkg/xds.core.v3/authority.libsonnet').definition,
        CollectionEntry: (import 'pkg/xds.core.v3/collection-entry.libsonnet').definition,
        ContextParams: (import 'pkg/xds.core.v3/context-params.libsonnet').definition,
        ResourceLocator: (import 'pkg/xds.core.v3/resource-locator.libsonnet').definition,
        TypedExtensionConfig: (import 'pkg/xds.core.v3/typed-extension-config.libsonnet').definition,
      },
    },
    type: {
      matcher: {
        v3: {
          ListStringMatcher: (import 'pkg/xds.type.matcher.v3/list-string-matcher.libsonnet').definition,
          Matcher: (import 'pkg/xds.type.matcher.v3/matcher.libsonnet').definition,
          RegexMatcher: (import 'pkg/xds.type.matcher.v3/regex-matcher.libsonnet').definition,
          StringMatcher: (import 'pkg/xds.type.matcher.v3/string-matcher.libsonnet').definition,
        },
      },
    },
  },
}
