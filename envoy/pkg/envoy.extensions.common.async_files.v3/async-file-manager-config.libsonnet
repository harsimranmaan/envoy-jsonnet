// Message type: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.common.async_files.v3.AsyncFileManagerConfig';
local generator = import '../generator.libsonnet';
local fields = {
  id: {
    type: 'string',
    allowedNames: [
      'id',
    ],
  },
  thread_pool: {
    type: 'envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool',
    allowedNames: [
      'thread_pool',
      'threadPool',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'thread_pool',
    ],
    required: true,
    group: 'manager_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ThreadPool:: (import 'async-file-manager-config-thread-pool.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withId:: function(val) validator.validateField(self + { id: val }, 'id', type + '.withId'),
    withThreadPool:: function(val) validator.validateField(self + { thread_pool: val }, 'thread_pool', type + '.withThreadPool'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
