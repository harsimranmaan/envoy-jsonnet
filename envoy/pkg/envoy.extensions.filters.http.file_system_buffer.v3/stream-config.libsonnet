// Message type: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig';
local generator = import '../generator.libsonnet';
local fields = {
  behavior: {
    type: 'envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior',
    allowedNames: [
      'behavior',
    ],
  },
  memory_buffer_bytes_limit: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'memory_buffer_bytes_limit',
      'memoryBufferBytesLimit',
    ],
    constraints: {
      Uint64: {
        gt: 0,
      },
    },
  },
  storage_buffer_bytes_limit: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'storage_buffer_bytes_limit',
      'storageBufferBytesLimit',
    ],
  },
  storage_buffer_queue_high_watermark_bytes: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'storage_buffer_queue_high_watermark_bytes',
      'storageBufferQueueHighWatermarkBytes',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBehavior:: function(val) validator.validateField(self + { behavior: val }, 'behavior', type + '.withBehavior'),
    withMemoryBufferBytesLimit:: function(val) validator.validateField(self + { memory_buffer_bytes_limit: val }, 'memory_buffer_bytes_limit', type + '.withMemoryBufferBytesLimit'),
    withStorageBufferBytesLimit:: function(val) validator.validateField(self + { storage_buffer_bytes_limit: val }, 'storage_buffer_bytes_limit', type + '.withStorageBufferBytesLimit'),
    withStorageBufferQueueHighWatermarkBytes:: function(val) validator.validateField(self + { storage_buffer_queue_high_watermark_bytes: val }, 'storage_buffer_queue_high_watermark_bytes', type + '.withStorageBufferQueueHighWatermarkBytes'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
