// Message type: envoy.config.core.v3.DnsResolverOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.DnsResolverOptions';
local generator = import '../generator.libsonnet';
local fields = {
  no_default_search_domain: {
    type: 'bool',
    allowedNames: [
      'no_default_search_domain',
      'noDefaultSearchDomain',
    ],
  },
  use_tcp_for_dns_lookups: {
    type: 'bool',
    allowedNames: [
      'use_tcp_for_dns_lookups',
      'useTcpForDnsLookups',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withNoDefaultSearchDomain:: function(val) validator.validateField(self + { no_default_search_domain: val }, 'no_default_search_domain', type + '.withNoDefaultSearchDomain'),
    withUseTcpForDnsLookups:: function(val) validator.validateField(self + { use_tcp_for_dns_lookups: val }, 'use_tcp_for_dns_lookups', type + '.withUseTcpForDnsLookups'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
