// Message type: envoy.config.core.v3.Extension
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.Extension';
local generator = import '../generator.libsonnet';
local fields = {
  category: {
    type: 'string',
    allowedNames: [
      'category',
    ],
  },
  disabled: {
    type: 'bool',
    allowedNames: [
      'disabled',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  type_descriptor: {
    type: 'string',
    allowedNames: [
      'type_descriptor',
      'typeDescriptor',
    ],
  },
  type_urls: {
    type: 'string',
    allowedNames: [
      'type_urls',
      'typeUrls',
    ],
    containerType: 'list',
  },
  version: {
    type: 'envoy.config.core.v3.BuildVersion',
    allowedNames: [
      'version',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCategory:: function(val) validator.validateField(self + { category: val }, 'category', type + '.withCategory'),
    withDisabled:: function(val) validator.validateField(self + { disabled: val }, 'disabled', type + '.withDisabled'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withTypeDescriptor:: function(val) validator.validateField(self + { type_descriptor: val }, 'type_descriptor', type + '.withTypeDescriptor'),
    withTypeUrls:: function(val) validator.validateField(self + { type_urls: val }, 'type_urls', type + '.withTypeUrls'),
    withVersion:: function(val) validator.validateField(self + { version: val }, 'version', type + '.withVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
