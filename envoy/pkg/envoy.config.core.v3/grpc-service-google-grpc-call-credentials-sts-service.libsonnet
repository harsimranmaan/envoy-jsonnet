// Message type: envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.StsService
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.StsService';
local generator = import '../generator.libsonnet';
local fields = {
  actor_token_path: {
    type: 'string',
    allowedNames: [
      'actor_token_path',
      'actorTokenPath',
    ],
  },
  actor_token_type: {
    type: 'string',
    allowedNames: [
      'actor_token_type',
      'actorTokenType',
    ],
  },
  audience: {
    type: 'string',
    allowedNames: [
      'audience',
    ],
  },
  requested_token_type: {
    type: 'string',
    allowedNames: [
      'requested_token_type',
      'requestedTokenType',
    ],
  },
  resource: {
    type: 'string',
    allowedNames: [
      'resource',
    ],
  },
  scope: {
    type: 'string',
    allowedNames: [
      'scope',
    ],
  },
  subject_token_path: {
    type: 'string',
    allowedNames: [
      'subject_token_path',
      'subjectTokenPath',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  subject_token_type: {
    type: 'string',
    allowedNames: [
      'subject_token_type',
      'subjectTokenType',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  token_exchange_service_uri: {
    type: 'string',
    allowedNames: [
      'token_exchange_service_uri',
      'tokenExchangeServiceUri',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withActorTokenPath:: function(val) validator.validateField(self + { actor_token_path: val }, 'actor_token_path', type + '.withActorTokenPath'),
    withActorTokenType:: function(val) validator.validateField(self + { actor_token_type: val }, 'actor_token_type', type + '.withActorTokenType'),
    withAudience:: function(val) validator.validateField(self + { audience: val }, 'audience', type + '.withAudience'),
    withRequestedTokenType:: function(val) validator.validateField(self + { requested_token_type: val }, 'requested_token_type', type + '.withRequestedTokenType'),
    withResource:: function(val) validator.validateField(self + { resource: val }, 'resource', type + '.withResource'),
    withScope:: function(val) validator.validateField(self + { scope: val }, 'scope', type + '.withScope'),
    withSubjectTokenPath:: function(val) validator.validateField(self + { subject_token_path: val }, 'subject_token_path', type + '.withSubjectTokenPath'),
    withSubjectTokenType:: function(val) validator.validateField(self + { subject_token_type: val }, 'subject_token_type', type + '.withSubjectTokenType'),
    withTokenExchangeServiceUri:: function(val) validator.validateField(self + { token_exchange_service_uri: val }, 'token_exchange_service_uri', type + '.withTokenExchangeServiceUri'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
