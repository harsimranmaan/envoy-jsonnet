// Message type: envoy.config.core.v3.DataSource
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.DataSource';
local generator = import '../generator.libsonnet';
local fields = {
  environment_variable: {
    type: 'string',
    allowedNames: [
      'environment_variable',
      'environmentVariable',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  filename: {
    type: 'string',
    allowedNames: [
      'filename',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  inline_bytes: {
    type: 'bytes',
    allowedNames: [
      'inline_bytes',
      'inlineBytes',
    ],
  },
  inline_string: {
    type: 'string',
    allowedNames: [
      'inline_string',
      'inlineString',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'filename',
      'inline_bytes',
      'inline_string',
      'environment_variable',
    ],
    required: true,
    group: 'specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withEnvironmentVariable:: function(val) validator.validateField(self + { environment_variable: val }, 'environment_variable', type + '.withEnvironmentVariable'),
    withFilename:: function(val) validator.validateField(self + { filename: val }, 'filename', type + '.withFilename'),
    withInlineBytes:: function(val) validator.validateField(self + { inline_bytes: val }, 'inline_bytes', type + '.withInlineBytes'),
    withInlineString:: function(val) validator.validateField(self + { inline_string: val }, 'inline_string', type + '.withInlineString'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
