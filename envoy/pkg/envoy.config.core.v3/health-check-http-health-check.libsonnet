// Message type: envoy.config.core.v3.HealthCheck.HttpHealthCheck
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.HealthCheck.HttpHealthCheck';
local generator = import '../generator.libsonnet';
local fields = {
  codec_client_type: {
    type: 'envoy.type.v3.CodecClientType',
    allowedNames: [
      'codec_client_type',
      'codecClientType',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  expected_statuses: {
    type: 'envoy.type.v3.Int64Range',
    allowedNames: [
      'expected_statuses',
      'expectedStatuses',
    ],
    containerType: 'list',
  },
  host: {
    type: 'string',
    allowedNames: [
      'host',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        strict: false,
      },
    },
  },
  method: {
    type: 'envoy.config.core.v3.RequestMethod',
    allowedNames: [
      'method',
    ],
    constraints: {
      Enum: {
        defined_only: true,
        not_in: [
          6,
        ],
      },
    },
  },
  path: {
    type: 'string',
    allowedNames: [
      'path',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        min_len: 1,
        strict: false,
      },
    },
  },
  receive: {
    type: 'envoy.config.core.v3.HealthCheck.Payload',
    allowedNames: [
      'receive',
    ],
    containerType: 'list',
  },
  request_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'request_headers_to_add',
      'requestHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  request_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'request_headers_to_remove',
      'requestHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              strict: false,
            },
          },
        },
      },
    },
  },
  response_buffer_size: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'response_buffer_size',
      'responseBufferSize',
    ],
    constraints: {
      Uint64: {
        gte: 0,
      },
    },
  },
  retriable_statuses: {
    type: 'envoy.type.v3.Int64Range',
    allowedNames: [
      'retriable_statuses',
      'retriableStatuses',
    ],
    containerType: 'list',
  },
  send: {
    type: 'envoy.config.core.v3.HealthCheck.Payload',
    allowedNames: [
      'send',
    ],
  },
  service_name_matcher: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'service_name_matcher',
      'serviceNameMatcher',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCodecClientType:: function(val) validator.validateField(self + { codec_client_type: val }, 'codec_client_type', type + '.withCodecClientType'),
    withExpectedStatuses:: function(val) validator.validateField(self + { expected_statuses: val }, 'expected_statuses', type + '.withExpectedStatuses'),
    withHost:: function(val) validator.validateField(self + { host: val }, 'host', type + '.withHost'),
    withMethod:: function(val) validator.validateField(self + { method: val }, 'method', type + '.withMethod'),
    withPath:: function(val) validator.validateField(self + { path: val }, 'path', type + '.withPath'),
    withReceive:: function(val) validator.validateField(self + { receive: val }, 'receive', type + '.withReceive'),
    withRequestHeadersToAdd:: function(val) validator.validateField(self + { request_headers_to_add: val }, 'request_headers_to_add', type + '.withRequestHeadersToAdd'),
    withRequestHeadersToRemove:: function(val) validator.validateField(self + { request_headers_to_remove: val }, 'request_headers_to_remove', type + '.withRequestHeadersToRemove'),
    withResponseBufferSize:: function(val) validator.validateField(self + { response_buffer_size: val }, 'response_buffer_size', type + '.withResponseBufferSize'),
    withRetriableStatuses:: function(val) validator.validateField(self + { retriable_statuses: val }, 'retriable_statuses', type + '.withRetriableStatuses'),
    withSend:: function(val) validator.validateField(self + { send: val }, 'send', type + '.withSend'),
    withServiceNameMatcher:: function(val) validator.validateField(self + { service_name_matcher: val }, 'service_name_matcher', type + '.withServiceNameMatcher'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
