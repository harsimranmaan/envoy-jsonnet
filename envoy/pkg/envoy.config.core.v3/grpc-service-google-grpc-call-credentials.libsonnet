// Message type: envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials';
local generator = import '../generator.libsonnet';
local fields = {
  access_token: {
    type: 'string',
    allowedNames: [
      'access_token',
      'accessToken',
    ],
  },
  from_plugin: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin',
    allowedNames: [
      'from_plugin',
      'fromPlugin',
    ],
  },
  google_compute_engine: {
    type: 'google.protobuf.Empty',
    allowedNames: [
      'google_compute_engine',
      'googleComputeEngine',
    ],
  },
  google_iam: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials',
    allowedNames: [
      'google_iam',
      'googleIam',
    ],
  },
  google_refresh_token: {
    type: 'string',
    allowedNames: [
      'google_refresh_token',
      'googleRefreshToken',
    ],
  },
  service_account_jwt_access: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials',
    allowedNames: [
      'service_account_jwt_access',
      'serviceAccountJwtAccess',
    ],
  },
  sts_service: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.StsService',
    allowedNames: [
      'sts_service',
      'stsService',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'access_token',
      'google_compute_engine',
      'google_refresh_token',
      'service_account_jwt_access',
      'google_iam',
      'from_plugin',
      'sts_service',
    ],
    required: true,
    group: 'credential_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ServiceAccountJWTAccessCredentials:: (import 'grpc-service-google-grpc-call-credentials-service-account-jwt-access-credentials.libsonnet').definition,
    GoogleIAMCredentials:: (import 'grpc-service-google-grpc-call-credentials-google-iam-credentials.libsonnet').definition,
    MetadataCredentialsFromPlugin:: (import 'grpc-service-google-grpc-call-credentials-metadata-credentials-from-plugin.libsonnet').definition,
    StsService:: (import 'grpc-service-google-grpc-call-credentials-sts-service.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccessToken:: function(val) validator.validateField(self + { access_token: val }, 'access_token', type + '.withAccessToken'),
    withFromPlugin:: function(val) validator.validateField(self + { from_plugin: val }, 'from_plugin', type + '.withFromPlugin'),
    withGoogleComputeEngine:: function(val) validator.validateField(self + { google_compute_engine: val }, 'google_compute_engine', type + '.withGoogleComputeEngine'),
    withGoogleIam:: function(val) validator.validateField(self + { google_iam: val }, 'google_iam', type + '.withGoogleIam'),
    withGoogleRefreshToken:: function(val) validator.validateField(self + { google_refresh_token: val }, 'google_refresh_token', type + '.withGoogleRefreshToken'),
    withServiceAccountJwtAccess:: function(val) validator.validateField(self + { service_account_jwt_access: val }, 'service_account_jwt_access', type + '.withServiceAccountJwtAccess'),
    withStsService:: function(val) validator.validateField(self + { sts_service: val }, 'sts_service', type + '.withStsService'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
