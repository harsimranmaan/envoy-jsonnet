// Message type: envoy.config.core.v3.Http1ProtocolOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.Http1ProtocolOptions';
local generator = import '../generator.libsonnet';
local fields = {
  accept_http_10: {
    type: 'bool',
    allowedNames: [
      'accept_http_10',
      'acceptHttp10',
    ],
  },
  allow_absolute_url: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'allow_absolute_url',
      'allowAbsoluteUrl',
    ],
  },
  allow_chunked_length: {
    type: 'bool',
    allowedNames: [
      'allow_chunked_length',
      'allowChunkedLength',
    ],
  },
  default_host_for_http_10: {
    type: 'string',
    allowedNames: [
      'default_host_for_http_10',
      'defaultHostForHttp10',
    ],
  },
  enable_trailers: {
    type: 'bool',
    allowedNames: [
      'enable_trailers',
      'enableTrailers',
    ],
  },
  header_key_format: {
    type: 'envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat',
    allowedNames: [
      'header_key_format',
      'headerKeyFormat',
    ],
  },
  override_stream_error_on_invalid_http_message: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'override_stream_error_on_invalid_http_message',
      'overrideStreamErrorOnInvalidHttpMessage',
    ],
  },
  send_fully_qualified_url: {
    type: 'bool',
    allowedNames: [
      'send_fully_qualified_url',
      'sendFullyQualifiedUrl',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HeaderKeyFormat:: (import 'http-1-protocol-options-header-key-format.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAcceptHttp10:: function(val) validator.validateField(self + { accept_http_10: val }, 'accept_http_10', type + '.withAcceptHttp10'),
    withAllowAbsoluteUrl:: function(val) validator.validateField(self + { allow_absolute_url: val }, 'allow_absolute_url', type + '.withAllowAbsoluteUrl'),
    withAllowChunkedLength:: function(val) validator.validateField(self + { allow_chunked_length: val }, 'allow_chunked_length', type + '.withAllowChunkedLength'),
    withDefaultHostForHttp10:: function(val) validator.validateField(self + { default_host_for_http_10: val }, 'default_host_for_http_10', type + '.withDefaultHostForHttp10'),
    withEnableTrailers:: function(val) validator.validateField(self + { enable_trailers: val }, 'enable_trailers', type + '.withEnableTrailers'),
    withHeaderKeyFormat:: function(val) validator.validateField(self + { header_key_format: val }, 'header_key_format', type + '.withHeaderKeyFormat'),
    withOverrideStreamErrorOnInvalidHttpMessage:: function(val) validator.validateField(self + { override_stream_error_on_invalid_http_message: val }, 'override_stream_error_on_invalid_http_message', type + '.withOverrideStreamErrorOnInvalidHttpMessage'),
    withSendFullyQualifiedUrl:: function(val) validator.validateField(self + { send_fully_qualified_url: val }, 'send_fully_qualified_url', type + '.withSendFullyQualifiedUrl'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
