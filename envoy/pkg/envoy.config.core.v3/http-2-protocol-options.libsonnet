// Message type: envoy.config.core.v3.Http2ProtocolOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.Http2ProtocolOptions';
local generator = import '../generator.libsonnet';
local fields = {
  allow_connect: {
    type: 'bool',
    allowedNames: [
      'allow_connect',
      'allowConnect',
    ],
  },
  allow_metadata: {
    type: 'bool',
    allowedNames: [
      'allow_metadata',
      'allowMetadata',
    ],
  },
  connection_keepalive: {
    type: 'envoy.config.core.v3.KeepaliveSettings',
    allowedNames: [
      'connection_keepalive',
      'connectionKeepalive',
    ],
  },
  custom_settings_parameters: {
    type: 'envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter',
    allowedNames: [
      'custom_settings_parameters',
      'customSettingsParameters',
    ],
    containerType: 'list',
  },
  hpack_table_size: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'hpack_table_size',
      'hpackTableSize',
    ],
  },
  initial_connection_window_size: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'initial_connection_window_size',
      'initialConnectionWindowSize',
    ],
    constraints: {
      Uint32: {
        gte: 65535,
        lte: 2147483647,
      },
    },
  },
  initial_stream_window_size: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'initial_stream_window_size',
      'initialStreamWindowSize',
    ],
    constraints: {
      Uint32: {
        gte: 65535,
        lte: 2147483647,
      },
    },
  },
  max_concurrent_streams: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_concurrent_streams',
      'maxConcurrentStreams',
    ],
    constraints: {
      Uint32: {
        gte: 1,
        lte: 2147483647,
      },
    },
  },
  max_consecutive_inbound_frames_with_empty_payload: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_consecutive_inbound_frames_with_empty_payload',
      'maxConsecutiveInboundFramesWithEmptyPayload',
    ],
  },
  max_inbound_priority_frames_per_stream: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_inbound_priority_frames_per_stream',
      'maxInboundPriorityFramesPerStream',
    ],
  },
  max_inbound_window_update_frames_per_data_frame_sent: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_inbound_window_update_frames_per_data_frame_sent',
      'maxInboundWindowUpdateFramesPerDataFrameSent',
    ],
    constraints: {
      Uint32: {
        gte: 1,
      },
    },
  },
  max_outbound_control_frames: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_outbound_control_frames',
      'maxOutboundControlFrames',
    ],
    constraints: {
      Uint32: {
        gte: 1,
      },
    },
  },
  max_outbound_frames: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_outbound_frames',
      'maxOutboundFrames',
    ],
    constraints: {
      Uint32: {
        gte: 1,
      },
    },
  },
  override_stream_error_on_invalid_http_message: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'override_stream_error_on_invalid_http_message',
      'overrideStreamErrorOnInvalidHttpMessage',
    ],
  },
  stream_error_on_invalid_http_messaging: {
    type: 'bool',
    allowedNames: [
      'stream_error_on_invalid_http_messaging',
      'streamErrorOnInvalidHttpMessaging',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    SettingsParameter:: (import 'http-2-protocol-options-settings-parameter.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowConnect:: function(val) validator.validateField(self + { allow_connect: val }, 'allow_connect', type + '.withAllowConnect'),
    withAllowMetadata:: function(val) validator.validateField(self + { allow_metadata: val }, 'allow_metadata', type + '.withAllowMetadata'),
    withConnectionKeepalive:: function(val) validator.validateField(self + { connection_keepalive: val }, 'connection_keepalive', type + '.withConnectionKeepalive'),
    withCustomSettingsParameters:: function(val) validator.validateField(self + { custom_settings_parameters: val }, 'custom_settings_parameters', type + '.withCustomSettingsParameters'),
    withHpackTableSize:: function(val) validator.validateField(self + { hpack_table_size: val }, 'hpack_table_size', type + '.withHpackTableSize'),
    withInitialConnectionWindowSize:: function(val) validator.validateField(self + { initial_connection_window_size: val }, 'initial_connection_window_size', type + '.withInitialConnectionWindowSize'),
    withInitialStreamWindowSize:: function(val) validator.validateField(self + { initial_stream_window_size: val }, 'initial_stream_window_size', type + '.withInitialStreamWindowSize'),
    withMaxConcurrentStreams:: function(val) validator.validateField(self + { max_concurrent_streams: val }, 'max_concurrent_streams', type + '.withMaxConcurrentStreams'),
    withMaxConsecutiveInboundFramesWithEmptyPayload:: function(val) validator.validateField(self + { max_consecutive_inbound_frames_with_empty_payload: val }, 'max_consecutive_inbound_frames_with_empty_payload', type + '.withMaxConsecutiveInboundFramesWithEmptyPayload'),
    withMaxInboundPriorityFramesPerStream:: function(val) validator.validateField(self + { max_inbound_priority_frames_per_stream: val }, 'max_inbound_priority_frames_per_stream', type + '.withMaxInboundPriorityFramesPerStream'),
    withMaxInboundWindowUpdateFramesPerDataFrameSent:: function(val) validator.validateField(self + { max_inbound_window_update_frames_per_data_frame_sent: val }, 'max_inbound_window_update_frames_per_data_frame_sent', type + '.withMaxInboundWindowUpdateFramesPerDataFrameSent'),
    withMaxOutboundControlFrames:: function(val) validator.validateField(self + { max_outbound_control_frames: val }, 'max_outbound_control_frames', type + '.withMaxOutboundControlFrames'),
    withMaxOutboundFrames:: function(val) validator.validateField(self + { max_outbound_frames: val }, 'max_outbound_frames', type + '.withMaxOutboundFrames'),
    withOverrideStreamErrorOnInvalidHttpMessage:: function(val) validator.validateField(self + { override_stream_error_on_invalid_http_message: val }, 'override_stream_error_on_invalid_http_message', type + '.withOverrideStreamErrorOnInvalidHttpMessage'),
    withStreamErrorOnInvalidHttpMessaging:: function(val) validator.validateField(self + { stream_error_on_invalid_http_messaging: val }, 'stream_error_on_invalid_http_messaging', type + '.withStreamErrorOnInvalidHttpMessaging'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
