// Message type: envoy.config.core.v3.SubstitutionFormatString
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.SubstitutionFormatString';
local generator = import '../generator.libsonnet';
local fields = {
  content_type: {
    type: 'string',
    allowedNames: [
      'content_type',
      'contentType',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        strict: false,
      },
    },
  },
  formatters: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'formatters',
    ],
    containerType: 'list',
  },
  json_format: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'json_format',
      'jsonFormat',
    ],
  },
  omit_empty_values: {
    type: 'bool',
    allowedNames: [
      'omit_empty_values',
      'omitEmptyValues',
    ],
  },
  text_format: {
    type: 'string',
    allowedNames: [
      'text_format',
      'textFormat',
    ],
  },
  text_format_source: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'text_format_source',
      'textFormatSource',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'text_format',
      'json_format',
      'text_format_source',
    ],
    required: true,
    group: 'format',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withContentType:: function(val) validator.validateField(self + { content_type: val }, 'content_type', type + '.withContentType'),
    withFormatters:: function(val) validator.validateField(self + { formatters: val }, 'formatters', type + '.withFormatters'),
    withJsonFormat:: function(val) validator.validateField(self + { json_format: val }, 'json_format', type + '.withJsonFormat'),
    withOmitEmptyValues:: function(val) validator.validateField(self + { omit_empty_values: val }, 'omit_empty_values', type + '.withOmitEmptyValues'),
    withTextFormat:: function(val) validator.validateField(self + { text_format: val }, 'text_format', type + '.withTextFormat'),
    withTextFormatSource:: function(val) validator.validateField(self + { text_format_source: val }, 'text_format_source', type + '.withTextFormatSource'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
