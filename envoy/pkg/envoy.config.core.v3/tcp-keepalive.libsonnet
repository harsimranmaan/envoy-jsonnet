// Message type: envoy.config.core.v3.TcpKeepalive
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.TcpKeepalive';
local generator = import '../generator.libsonnet';
local fields = {
  keepalive_interval: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'keepalive_interval',
      'keepaliveInterval',
    ],
  },
  keepalive_probes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'keepalive_probes',
      'keepaliveProbes',
    ],
  },
  keepalive_time: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'keepalive_time',
      'keepaliveTime',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withKeepaliveInterval:: function(val) validator.validateField(self + { keepalive_interval: val }, 'keepalive_interval', type + '.withKeepaliveInterval'),
    withKeepaliveProbes:: function(val) validator.validateField(self + { keepalive_probes: val }, 'keepalive_probes', type + '.withKeepaliveProbes'),
    withKeepaliveTime:: function(val) validator.validateField(self + { keepalive_time: val }, 'keepalive_time', type + '.withKeepaliveTime'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
