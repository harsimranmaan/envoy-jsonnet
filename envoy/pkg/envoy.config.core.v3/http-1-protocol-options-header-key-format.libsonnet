// Message type: envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat';
local generator = import '../generator.libsonnet';
local fields = {
  proper_case_words: {
    type: 'envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords',
    allowedNames: [
      'proper_case_words',
      'properCaseWords',
    ],
  },
  stateful_formatter: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'stateful_formatter',
      'statefulFormatter',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'proper_case_words',
      'stateful_formatter',
    ],
    required: true,
    group: 'header_format',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ProperCaseWords:: (import 'http-1-protocol-options-header-key-format-proper-case-words.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withProperCaseWords:: function(val) validator.validateField(self + { proper_case_words: val }, 'proper_case_words', type + '.withProperCaseWords'),
    withStatefulFormatter:: function(val) validator.validateField(self + { stateful_formatter: val }, 'stateful_formatter', type + '.withStatefulFormatter'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
