// Message type: envoy.config.core.v3.Http3ProtocolOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.Http3ProtocolOptions';
local generator = import '../generator.libsonnet';
local fields = {
  allow_extended_connect: {
    type: 'bool',
    allowedNames: [
      'allow_extended_connect',
      'allowExtendedConnect',
    ],
  },
  override_stream_error_on_invalid_http_message: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'override_stream_error_on_invalid_http_message',
      'overrideStreamErrorOnInvalidHttpMessage',
    ],
  },
  quic_protocol_options: {
    type: 'envoy.config.core.v3.QuicProtocolOptions',
    allowedNames: [
      'quic_protocol_options',
      'quicProtocolOptions',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowExtendedConnect:: function(val) validator.validateField(self + { allow_extended_connect: val }, 'allow_extended_connect', type + '.withAllowExtendedConnect'),
    withOverrideStreamErrorOnInvalidHttpMessage:: function(val) validator.validateField(self + { override_stream_error_on_invalid_http_message: val }, 'override_stream_error_on_invalid_http_message', type + '.withOverrideStreamErrorOnInvalidHttpMessage'),
    withQuicProtocolOptions:: function(val) validator.validateField(self + { quic_protocol_options: val }, 'quic_protocol_options', type + '.withQuicProtocolOptions'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
