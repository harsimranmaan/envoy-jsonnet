// Message type: envoy.config.core.v3.UpstreamHttpProtocolOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.UpstreamHttpProtocolOptions';
local generator = import '../generator.libsonnet';
local fields = {
  auto_san_validation: {
    type: 'bool',
    allowedNames: [
      'auto_san_validation',
      'autoSanValidation',
    ],
  },
  auto_sni: {
    type: 'bool',
    allowedNames: [
      'auto_sni',
      'autoSni',
    ],
  },
  override_auto_sni_header: {
    type: 'string',
    allowedNames: [
      'override_auto_sni_header',
      'overrideAutoSniHeader',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        ignore_empty: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAutoSanValidation:: function(val) validator.validateField(self + { auto_san_validation: val }, 'auto_san_validation', type + '.withAutoSanValidation'),
    withAutoSni:: function(val) validator.validateField(self + { auto_sni: val }, 'auto_sni', type + '.withAutoSni'),
    withOverrideAutoSniHeader:: function(val) validator.validateField(self + { override_auto_sni_header: val }, 'override_auto_sni_header', type + '.withOverrideAutoSniHeader'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
