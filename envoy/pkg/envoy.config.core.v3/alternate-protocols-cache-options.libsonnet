// Message type: envoy.config.core.v3.AlternateProtocolsCacheOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.AlternateProtocolsCacheOptions';
local generator = import '../generator.libsonnet';
local fields = {
  canonical_suffixes: {
    type: 'string',
    allowedNames: [
      'canonical_suffixes',
      'canonicalSuffixes',
    ],
    containerType: 'list',
  },
  key_value_store_config: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'key_value_store_config',
      'keyValueStoreConfig',
    ],
  },
  max_entries: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_entries',
      'maxEntries',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  prepopulated_entries: {
    type: 'envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry',
    allowedNames: [
      'prepopulated_entries',
      'prepopulatedEntries',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    AlternateProtocolsCacheEntry:: (import 'alternate-protocols-cache-options-alternate-protocols-cache-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCanonicalSuffixes:: function(val) validator.validateField(self + { canonical_suffixes: val }, 'canonical_suffixes', type + '.withCanonicalSuffixes'),
    withKeyValueStoreConfig:: function(val) validator.validateField(self + { key_value_store_config: val }, 'key_value_store_config', type + '.withKeyValueStoreConfig'),
    withMaxEntries:: function(val) validator.validateField(self + { max_entries: val }, 'max_entries', type + '.withMaxEntries'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withPrepopulatedEntries:: function(val) validator.validateField(self + { prepopulated_entries: val }, 'prepopulated_entries', type + '.withPrepopulatedEntries'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
