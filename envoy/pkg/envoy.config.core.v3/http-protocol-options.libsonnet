// Message type: envoy.config.core.v3.HttpProtocolOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.HttpProtocolOptions';
local generator = import '../generator.libsonnet';
local fields = {
  headers_with_underscores_action: {
    type: 'envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction',
    allowedNames: [
      'headers_with_underscores_action',
      'headersWithUnderscoresAction',
    ],
  },
  idle_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'idle_timeout',
      'idleTimeout',
    ],
  },
  max_connection_duration: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'max_connection_duration',
      'maxConnectionDuration',
    ],
  },
  max_headers_count: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_headers_count',
      'maxHeadersCount',
    ],
    constraints: {
      Uint32: {
        gte: 1,
      },
    },
  },
  max_requests_per_connection: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_requests_per_connection',
      'maxRequestsPerConnection',
    ],
  },
  max_stream_duration: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'max_stream_duration',
      'maxStreamDuration',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HeadersWithUnderscoresAction:: (import 'http-protocol-options-headers-with-underscores-action.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHeadersWithUnderscoresAction:: function(val) validator.validateField(self + { headers_with_underscores_action: val }, 'headers_with_underscores_action', type + '.withHeadersWithUnderscoresAction'),
    withIdleTimeout:: function(val) validator.validateField(self + { idle_timeout: val }, 'idle_timeout', type + '.withIdleTimeout'),
    withMaxConnectionDuration:: function(val) validator.validateField(self + { max_connection_duration: val }, 'max_connection_duration', type + '.withMaxConnectionDuration'),
    withMaxHeadersCount:: function(val) validator.validateField(self + { max_headers_count: val }, 'max_headers_count', type + '.withMaxHeadersCount'),
    withMaxRequestsPerConnection:: function(val) validator.validateField(self + { max_requests_per_connection: val }, 'max_requests_per_connection', type + '.withMaxRequestsPerConnection'),
    withMaxStreamDuration:: function(val) validator.validateField(self + { max_stream_duration: val }, 'max_stream_duration', type + '.withMaxStreamDuration'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
