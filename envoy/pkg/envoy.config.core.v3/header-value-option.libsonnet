// Message type: envoy.config.core.v3.HeaderValueOption
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.HeaderValueOption';
local generator = import '../generator.libsonnet';
local fields = {
  append: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'append',
    ],
  },
  append_action: {
    type: 'envoy.config.core.v3.HeaderValueOption.HeaderAppendAction',
    allowedNames: [
      'append_action',
      'appendAction',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  header: {
    type: 'envoy.config.core.v3.HeaderValue',
    allowedNames: [
      'header',
    ],
    required: true,
  },
  keep_empty_value: {
    type: 'bool',
    allowedNames: [
      'keep_empty_value',
      'keepEmptyValue',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HeaderAppendAction:: (import 'header-value-option-header-append-action.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAppend:: function(val) validator.validateField(self + { append: val }, 'append', type + '.withAppend'),
    withAppendAction:: function(val) validator.validateField(self + { append_action: val }, 'append_action', type + '.withAppendAction'),
    withHeader:: function(val) validator.validateField(self + { header: val }, 'header', type + '.withHeader'),
    withKeepEmptyValue:: function(val) validator.validateField(self + { keep_empty_value: val }, 'keep_empty_value', type + '.withKeepEmptyValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
