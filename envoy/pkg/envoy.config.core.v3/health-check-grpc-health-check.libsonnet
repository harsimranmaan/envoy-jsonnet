// Message type: envoy.config.core.v3.HealthCheck.GrpcHealthCheck
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.HealthCheck.GrpcHealthCheck';
local generator = import '../generator.libsonnet';
local fields = {
  authority: {
    type: 'string',
    allowedNames: [
      'authority',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        strict: false,
      },
    },
  },
  initial_metadata: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'initial_metadata',
      'initialMetadata',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  service_name: {
    type: 'string',
    allowedNames: [
      'service_name',
      'serviceName',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAuthority:: function(val) validator.validateField(self + { authority: val }, 'authority', type + '.withAuthority'),
    withInitialMetadata:: function(val) validator.validateField(self + { initial_metadata: val }, 'initial_metadata', type + '.withInitialMetadata'),
    withServiceName:: function(val) validator.validateField(self + { service_name: val }, 'service_name', type + '.withServiceName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
