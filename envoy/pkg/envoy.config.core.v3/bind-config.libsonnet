// Message type: envoy.config.core.v3.BindConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.BindConfig';
local generator = import '../generator.libsonnet';
local fields = {
  additional_source_addresses: {
    type: 'envoy.config.core.v3.SocketAddress',
    allowedNames: [
      'additional_source_addresses',
      'additionalSourceAddresses',
    ],
    containerType: 'list',
  },
  extra_source_addresses: {
    type: 'envoy.config.core.v3.ExtraSourceAddress',
    allowedNames: [
      'extra_source_addresses',
      'extraSourceAddresses',
    ],
    containerType: 'list',
  },
  freebind: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'freebind',
    ],
  },
  socket_options: {
    type: 'envoy.config.core.v3.SocketOption',
    allowedNames: [
      'socket_options',
      'socketOptions',
    ],
    containerType: 'list',
  },
  source_address: {
    type: 'envoy.config.core.v3.SocketAddress',
    allowedNames: [
      'source_address',
      'sourceAddress',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAdditionalSourceAddresses:: function(val) validator.validateField(self + { additional_source_addresses: val }, 'additional_source_addresses', type + '.withAdditionalSourceAddresses'),
    withExtraSourceAddresses:: function(val) validator.validateField(self + { extra_source_addresses: val }, 'extra_source_addresses', type + '.withExtraSourceAddresses'),
    withFreebind:: function(val) validator.validateField(self + { freebind: val }, 'freebind', type + '.withFreebind'),
    withSocketOptions:: function(val) validator.validateField(self + { socket_options: val }, 'socket_options', type + '.withSocketOptions'),
    withSourceAddress:: function(val) validator.validateField(self + { source_address: val }, 'source_address', type + '.withSourceAddress'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
