// Message type: envoy.config.core.v3.Node
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.Node';
local generator = import '../generator.libsonnet';
local fields = {
  client_features: {
    type: 'string',
    allowedNames: [
      'client_features',
      'clientFeatures',
    ],
    containerType: 'list',
  },
  cluster: {
    type: 'string',
    allowedNames: [
      'cluster',
    ],
  },
  dynamic_parameters: {
    type: 'xds.core.v3.ContextParams',
    allowedNames: [
      'dynamic_parameters',
      'dynamicParameters',
    ],
    containerType: 'map',
  },
  extensions: {
    type: 'envoy.config.core.v3.Extension',
    allowedNames: [
      'extensions',
    ],
    containerType: 'list',
  },
  id: {
    type: 'string',
    allowedNames: [
      'id',
    ],
  },
  listening_addresses: {
    type: 'envoy.config.core.v3.Address',
    allowedNames: [
      'listening_addresses',
      'listeningAddresses',
    ],
    containerType: 'list',
  },
  locality: {
    type: 'envoy.config.core.v3.Locality',
    allowedNames: [
      'locality',
    ],
  },
  metadata: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'metadata',
    ],
  },
  user_agent_build_version: {
    type: 'envoy.config.core.v3.BuildVersion',
    allowedNames: [
      'user_agent_build_version',
      'userAgentBuildVersion',
    ],
  },
  user_agent_name: {
    type: 'string',
    allowedNames: [
      'user_agent_name',
      'userAgentName',
    ],
  },
  user_agent_version: {
    type: 'string',
    allowedNames: [
      'user_agent_version',
      'userAgentVersion',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'user_agent_version',
      'user_agent_build_version',
    ],
    required: false,
    group: 'user_agent_version_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    DynamicParametersEntry:: (import 'node-dynamic-parameters-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClientFeatures:: function(val) validator.validateField(self + { client_features: val }, 'client_features', type + '.withClientFeatures'),
    withCluster:: function(val) validator.validateField(self + { cluster: val }, 'cluster', type + '.withCluster'),
    withDynamicParameters:: function(val) validator.validateField(self + { dynamic_parameters: val }, 'dynamic_parameters', type + '.withDynamicParameters'),
    withExtensions:: function(val) validator.validateField(self + { extensions: val }, 'extensions', type + '.withExtensions'),
    withId:: function(val) validator.validateField(self + { id: val }, 'id', type + '.withId'),
    withListeningAddresses:: function(val) validator.validateField(self + { listening_addresses: val }, 'listening_addresses', type + '.withListeningAddresses'),
    withLocality:: function(val) validator.validateField(self + { locality: val }, 'locality', type + '.withLocality'),
    withMetadata:: function(val) validator.validateField(self + { metadata: val }, 'metadata', type + '.withMetadata'),
    withUserAgentBuildVersion:: function(val) validator.validateField(self + { user_agent_build_version: val }, 'user_agent_build_version', type + '.withUserAgentBuildVersion'),
    withUserAgentName:: function(val) validator.validateField(self + { user_agent_name: val }, 'user_agent_name', type + '.withUserAgentName'),
    withUserAgentVersion:: function(val) validator.validateField(self + { user_agent_version: val }, 'user_agent_version', type + '.withUserAgentVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
