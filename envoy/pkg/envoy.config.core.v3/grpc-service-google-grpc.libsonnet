// Message type: envoy.config.core.v3.GrpcService.GoogleGrpc
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.GrpcService.GoogleGrpc';
local generator = import '../generator.libsonnet';
local fields = {
  call_credentials: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials',
    allowedNames: [
      'call_credentials',
      'callCredentials',
    ],
    containerType: 'list',
  },
  channel_args: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelArgs',
    allowedNames: [
      'channel_args',
      'channelArgs',
    ],
  },
  channel_credentials: {
    type: 'envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelCredentials',
    allowedNames: [
      'channel_credentials',
      'channelCredentials',
    ],
  },
  config: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'config',
    ],
  },
  credentials_factory_name: {
    type: 'string',
    allowedNames: [
      'credentials_factory_name',
      'credentialsFactoryName',
    ],
  },
  per_stream_buffer_limit_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'per_stream_buffer_limit_bytes',
      'perStreamBufferLimitBytes',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  target_uri: {
    type: 'string',
    allowedNames: [
      'target_uri',
      'targetUri',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    SslCredentials:: (import 'grpc-service-google-grpc-ssl-credentials.libsonnet').definition,
    GoogleLocalCredentials:: (import 'grpc-service-google-grpc-google-local-credentials.libsonnet').definition,
    ChannelCredentials:: (import 'grpc-service-google-grpc-channel-credentials.libsonnet').definition,
    CallCredentials:: (import 'grpc-service-google-grpc-call-credentials.libsonnet').definition,
    ChannelArgs:: (import 'grpc-service-google-grpc-channel-args.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCallCredentials:: function(val) validator.validateField(self + { call_credentials: val }, 'call_credentials', type + '.withCallCredentials'),
    withChannelArgs:: function(val) validator.validateField(self + { channel_args: val }, 'channel_args', type + '.withChannelArgs'),
    withChannelCredentials:: function(val) validator.validateField(self + { channel_credentials: val }, 'channel_credentials', type + '.withChannelCredentials'),
    withConfig:: function(val) validator.validateField(self + { config: val }, 'config', type + '.withConfig'),
    withCredentialsFactoryName:: function(val) validator.validateField(self + { credentials_factory_name: val }, 'credentials_factory_name', type + '.withCredentialsFactoryName'),
    withPerStreamBufferLimitBytes:: function(val) validator.validateField(self + { per_stream_buffer_limit_bytes: val }, 'per_stream_buffer_limit_bytes', type + '.withPerStreamBufferLimitBytes'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withTargetUri:: function(val) validator.validateField(self + { target_uri: val }, 'target_uri', type + '.withTargetUri'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
