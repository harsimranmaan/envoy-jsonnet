// Message type: envoy.config.core.v3.SocketOption
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.core.v3.SocketOption';
local generator = import '../generator.libsonnet';
local fields = {
  buf_value: {
    type: 'bytes',
    allowedNames: [
      'buf_value',
      'bufValue',
    ],
  },
  description: {
    type: 'string',
    allowedNames: [
      'description',
    ],
  },
  int_value: {
    type: 'int64',
    allowedNames: [
      'int_value',
      'intValue',
    ],
  },
  level: {
    type: 'int64',
    allowedNames: [
      'level',
    ],
  },
  name: {
    type: 'int64',
    allowedNames: [
      'name',
    ],
  },
  state: {
    type: 'envoy.config.core.v3.SocketOption.SocketState',
    allowedNames: [
      'state',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [
  {
    fields: [
      'int_value',
      'buf_value',
    ],
    required: true,
    group: 'value',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    SocketState:: (import 'socket-option-socket-state.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBufValue:: function(val) validator.validateField(self + { buf_value: val }, 'buf_value', type + '.withBufValue'),
    withDescription:: function(val) validator.validateField(self + { description: val }, 'description', type + '.withDescription'),
    withIntValue:: function(val) validator.validateField(self + { int_value: val }, 'int_value', type + '.withIntValue'),
    withLevel:: function(val) validator.validateField(self + { level: val }, 'level', type + '.withLevel'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withState:: function(val) validator.validateField(self + { state: val }, 'state', type + '.withState'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
