// Message type: envoy.extensions.filters.network.ratelimit.v3.RateLimit
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.ratelimit.v3.RateLimit';
local generator = import '../generator.libsonnet';
local fields = {
  descriptors: {
    type: 'envoy.extensions.common.ratelimit.v3.RateLimitDescriptor',
    allowedNames: [
      'descriptors',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  domain: {
    type: 'string',
    allowedNames: [
      'domain',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  failure_mode_deny: {
    type: 'bool',
    allowedNames: [
      'failure_mode_deny',
      'failureModeDeny',
    ],
  },
  rate_limit_service: {
    type: 'envoy.config.ratelimit.v3.RateLimitServiceConfig',
    allowedNames: [
      'rate_limit_service',
      'rateLimitService',
    ],
    required: true,
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'timeout',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDescriptors:: function(val) validator.validateField(self + { descriptors: val }, 'descriptors', type + '.withDescriptors'),
    withDomain:: function(val) validator.validateField(self + { domain: val }, 'domain', type + '.withDomain'),
    withFailureModeDeny:: function(val) validator.validateField(self + { failure_mode_deny: val }, 'failure_mode_deny', type + '.withFailureModeDeny'),
    withRateLimitService:: function(val) validator.validateField(self + { rate_limit_service: val }, 'rate_limit_service', type + '.withRateLimitService'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withTimeout:: function(val) validator.validateField(self + { timeout: val }, 'timeout', type + '.withTimeout'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
