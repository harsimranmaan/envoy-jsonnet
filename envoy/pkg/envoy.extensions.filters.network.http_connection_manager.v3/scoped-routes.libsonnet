// Message type: envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes';
local generator = import '../generator.libsonnet';
local fields = {
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  rds_config_source: {
    type: 'envoy.config.core.v3.ConfigSource',
    allowedNames: [
      'rds_config_source',
      'rdsConfigSource',
    ],
  },
  scope_key_builder: {
    type: 'envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder',
    allowedNames: [
      'scope_key_builder',
      'scopeKeyBuilder',
    ],
    required: true,
  },
  scoped_rds: {
    type: 'envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds',
    allowedNames: [
      'scoped_rds',
      'scopedRds',
    ],
  },
  scoped_route_configurations_list: {
    type: 'envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList',
    allowedNames: [
      'scoped_route_configurations_list',
      'scopedRouteConfigurationsList',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'scoped_route_configurations_list',
      'scoped_rds',
    ],
    required: true,
    group: 'config_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ScopeKeyBuilder:: (import 'scoped-routes-scope-key-builder.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withRdsConfigSource:: function(val) validator.validateField(self + { rds_config_source: val }, 'rds_config_source', type + '.withRdsConfigSource'),
    withScopeKeyBuilder:: function(val) validator.validateField(self + { scope_key_builder: val }, 'scope_key_builder', type + '.withScopeKeyBuilder'),
    withScopedRds:: function(val) validator.validateField(self + { scoped_rds: val }, 'scoped_rds', type + '.withScopedRds'),
    withScopedRouteConfigurationsList:: function(val) validator.validateField(self + { scoped_route_configurations_list: val }, 'scoped_route_configurations_list', type + '.withScopedRouteConfigurationsList'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
