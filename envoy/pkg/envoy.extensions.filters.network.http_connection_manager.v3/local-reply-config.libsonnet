// Message type: envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig';
local generator = import '../generator.libsonnet';
local fields = {
  body_format: {
    type: 'envoy.config.core.v3.SubstitutionFormatString',
    allowedNames: [
      'body_format',
      'bodyFormat',
    ],
  },
  mappers: {
    type: 'envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper',
    allowedNames: [
      'mappers',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBodyFormat:: function(val) validator.validateField(self + { body_format: val }, 'body_format', type + '.withBodyFormat'),
    withMappers:: function(val) validator.validateField(self + { mappers: val }, 'mappers', type + '.withMappers'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
