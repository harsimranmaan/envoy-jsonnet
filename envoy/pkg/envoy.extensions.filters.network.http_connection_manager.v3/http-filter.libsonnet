// Message type: envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter';
local generator = import '../generator.libsonnet';
local fields = {
  config_discovery: {
    type: 'envoy.config.core.v3.ExtensionConfigSource',
    allowedNames: [
      'config_discovery',
      'configDiscovery',
    ],
  },
  is_optional: {
    type: 'bool',
    allowedNames: [
      'is_optional',
      'isOptional',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  typed_config: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'typed_config',
      'typedConfig',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'typed_config',
      'config_discovery',
    ],
    required: false,
    group: 'config_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConfigDiscovery:: function(val) validator.validateField(self + { config_discovery: val }, 'config_discovery', type + '.withConfigDiscovery'),
    withIsOptional:: function(val) validator.validateField(self + { is_optional: val }, 'is_optional', type + '.withIsOptional'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withTypedConfig:: function(val) validator.validateField(self + { typed_config: val }, 'typed_config', type + '.withTypedConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
