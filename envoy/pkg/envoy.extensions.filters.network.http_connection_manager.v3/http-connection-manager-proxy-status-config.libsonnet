// Message type: envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ProxyStatusConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ProxyStatusConfig';
local generator = import '../generator.libsonnet';
local fields = {
  literal_proxy_name: {
    type: 'string',
    allowedNames: [
      'literal_proxy_name',
      'literalProxyName',
    ],
  },
  remove_connection_termination_details: {
    type: 'bool',
    allowedNames: [
      'remove_connection_termination_details',
      'removeConnectionTerminationDetails',
    ],
  },
  remove_details: {
    type: 'bool',
    allowedNames: [
      'remove_details',
      'removeDetails',
    ],
  },
  remove_response_flags: {
    type: 'bool',
    allowedNames: [
      'remove_response_flags',
      'removeResponseFlags',
    ],
  },
  set_recommended_response_code: {
    type: 'bool',
    allowedNames: [
      'set_recommended_response_code',
      'setRecommendedResponseCode',
    ],
  },
  use_node_id: {
    type: 'bool',
    allowedNames: [
      'use_node_id',
      'useNodeId',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'use_node_id',
      'literal_proxy_name',
    ],
    required: false,
    group: 'proxy_name',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withLiteralProxyName:: function(val) validator.validateField(self + { literal_proxy_name: val }, 'literal_proxy_name', type + '.withLiteralProxyName'),
    withRemoveConnectionTerminationDetails:: function(val) validator.validateField(self + { remove_connection_termination_details: val }, 'remove_connection_termination_details', type + '.withRemoveConnectionTerminationDetails'),
    withRemoveDetails:: function(val) validator.validateField(self + { remove_details: val }, 'remove_details', type + '.withRemoveDetails'),
    withRemoveResponseFlags:: function(val) validator.validateField(self + { remove_response_flags: val }, 'remove_response_flags', type + '.withRemoveResponseFlags'),
    withSetRecommendedResponseCode:: function(val) validator.validateField(self + { set_recommended_response_code: val }, 'set_recommended_response_code', type + '.withSetRecommendedResponseCode'),
    withUseNodeId:: function(val) validator.validateField(self + { use_node_id: val }, 'use_node_id', type + '.withUseNodeId'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
