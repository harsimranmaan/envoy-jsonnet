// Message type: envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails';
local generator = import '../generator.libsonnet';
local fields = {
  cert: {
    type: 'bool',
    allowedNames: [
      'cert',
    ],
  },
  chain: {
    type: 'bool',
    allowedNames: [
      'chain',
    ],
  },
  dns: {
    type: 'bool',
    allowedNames: [
      'dns',
    ],
  },
  subject: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'subject',
    ],
  },
  uri: {
    type: 'bool',
    allowedNames: [
      'uri',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCert:: function(val) validator.validateField(self + { cert: val }, 'cert', type + '.withCert'),
    withChain:: function(val) validator.validateField(self + { chain: val }, 'chain', type + '.withChain'),
    withDns:: function(val) validator.validateField(self + { dns: val }, 'dns', type + '.withDns'),
    withSubject:: function(val) validator.validateField(self + { subject: val }, 'subject', type + '.withSubject'),
    withUri:: function(val) validator.validateField(self + { uri: val }, 'uri', type + '.withUri'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
