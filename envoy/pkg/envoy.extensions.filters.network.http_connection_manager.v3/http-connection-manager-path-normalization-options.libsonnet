// Message type: envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathNormalizationOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathNormalizationOptions';
local generator = import '../generator.libsonnet';
local fields = {
  forwarding_transformation: {
    type: 'envoy.type.http.v3.PathTransformation',
    allowedNames: [
      'forwarding_transformation',
      'forwardingTransformation',
    ],
  },
  http_filter_transformation: {
    type: 'envoy.type.http.v3.PathTransformation',
    allowedNames: [
      'http_filter_transformation',
      'httpFilterTransformation',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withForwardingTransformation:: function(val) validator.validateField(self + { forwarding_transformation: val }, 'forwarding_transformation', type + '.withForwardingTransformation'),
    withHttpFilterTransformation:: function(val) validator.validateField(self + { http_filter_transformation: val }, 'http_filter_transformation', type + '.withHttpFilterTransformation'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
