// Message type: envoy.extensions.filters.http.decompressor.v3.Decompressor
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.decompressor.v3.Decompressor';
local generator = import '../generator.libsonnet';
local fields = {
  decompressor_library: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'decompressor_library',
      'decompressorLibrary',
    ],
    required: true,
  },
  request_direction_config: {
    type: 'envoy.extensions.filters.http.decompressor.v3.Decompressor.RequestDirectionConfig',
    allowedNames: [
      'request_direction_config',
      'requestDirectionConfig',
    ],
  },
  response_direction_config: {
    type: 'envoy.extensions.filters.http.decompressor.v3.Decompressor.ResponseDirectionConfig',
    allowedNames: [
      'response_direction_config',
      'responseDirectionConfig',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    CommonDirectionConfig:: (import 'decompressor-common-direction-config.libsonnet').definition,
    RequestDirectionConfig:: (import 'decompressor-request-direction-config.libsonnet').definition,
    ResponseDirectionConfig:: (import 'decompressor-response-direction-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDecompressorLibrary:: function(val) validator.validateField(self + { decompressor_library: val }, 'decompressor_library', type + '.withDecompressorLibrary'),
    withRequestDirectionConfig:: function(val) validator.validateField(self + { request_direction_config: val }, 'request_direction_config', type + '.withRequestDirectionConfig'),
    withResponseDirectionConfig:: function(val) validator.validateField(self + { response_direction_config: val }, 'response_direction_config', type + '.withResponseDirectionConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
