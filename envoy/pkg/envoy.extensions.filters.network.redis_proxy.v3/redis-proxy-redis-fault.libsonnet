// Message type: envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault';
local generator = import '../generator.libsonnet';
local fields = {
  commands: {
    type: 'string',
    allowedNames: [
      'commands',
    ],
    containerType: 'list',
  },
  delay: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'delay',
    ],
  },
  fault_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'fault_enabled',
      'faultEnabled',
    ],
    required: true,
  },
  fault_type: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType',
    allowedNames: [
      'fault_type',
      'faultType',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    RedisFaultType:: (import 'redis-proxy-redis-fault-redis-fault-type.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCommands:: function(val) validator.validateField(self + { commands: val }, 'commands', type + '.withCommands'),
    withDelay:: function(val) validator.validateField(self + { delay: val }, 'delay', type + '.withDelay'),
    withFaultEnabled:: function(val) validator.validateField(self + { fault_enabled: val }, 'fault_enabled', type + '.withFaultEnabled'),
    withFaultType:: function(val) validator.validateField(self + { fault_type: val }, 'fault_type', type + '.withFaultType'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
