// Message type: envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route';
local generator = import '../generator.libsonnet';
local fields = {
  cluster: {
    type: 'string',
    allowedNames: [
      'cluster',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  prefix: {
    type: 'string',
    allowedNames: [
      'prefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        max_bytes: 1000,
      },
    },
  },
  remove_prefix: {
    type: 'bool',
    allowedNames: [
      'remove_prefix',
      'removePrefix',
    ],
  },
  request_mirror_policy: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy',
    allowedNames: [
      'request_mirror_policy',
      'requestMirrorPolicy',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    RequestMirrorPolicy:: (import 'redis-proxy-prefix-routes-route-request-mirror-policy.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCluster:: function(val) validator.validateField(self + { cluster: val }, 'cluster', type + '.withCluster'),
    withPrefix:: function(val) validator.validateField(self + { prefix: val }, 'prefix', type + '.withPrefix'),
    withRemovePrefix:: function(val) validator.validateField(self + { remove_prefix: val }, 'remove_prefix', type + '.withRemovePrefix'),
    withRequestMirrorPolicy:: function(val) validator.validateField(self + { request_mirror_policy: val }, 'request_mirror_policy', type + '.withRequestMirrorPolicy'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
