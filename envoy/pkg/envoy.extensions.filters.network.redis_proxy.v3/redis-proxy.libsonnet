// Message type: envoy.extensions.filters.network.redis_proxy.v3.RedisProxy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy';
local generator = import '../generator.libsonnet';
local fields = {
  downstream_auth_password: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'downstream_auth_password',
      'downstreamAuthPassword',
    ],
  },
  downstream_auth_passwords: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'downstream_auth_passwords',
      'downstreamAuthPasswords',
    ],
    containerType: 'list',
  },
  downstream_auth_username: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'downstream_auth_username',
      'downstreamAuthUsername',
    ],
  },
  faults: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault',
    allowedNames: [
      'faults',
    ],
    containerType: 'list',
  },
  latency_in_micros: {
    type: 'bool',
    allowedNames: [
      'latency_in_micros',
      'latencyInMicros',
    ],
  },
  prefix_routes: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes',
    allowedNames: [
      'prefix_routes',
      'prefixRoutes',
    ],
  },
  settings: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings',
    allowedNames: [
      'settings',
    ],
    required: true,
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ConnPoolSettings:: (import 'redis-proxy-conn-pool-settings.libsonnet').definition,
    PrefixRoutes:: (import 'redis-proxy-prefix-routes.libsonnet').definition,
    RedisFault:: (import 'redis-proxy-redis-fault.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDownstreamAuthPassword:: function(val) validator.validateField(self + { downstream_auth_password: val }, 'downstream_auth_password', type + '.withDownstreamAuthPassword'),
    withDownstreamAuthPasswords:: function(val) validator.validateField(self + { downstream_auth_passwords: val }, 'downstream_auth_passwords', type + '.withDownstreamAuthPasswords'),
    withDownstreamAuthUsername:: function(val) validator.validateField(self + { downstream_auth_username: val }, 'downstream_auth_username', type + '.withDownstreamAuthUsername'),
    withFaults:: function(val) validator.validateField(self + { faults: val }, 'faults', type + '.withFaults'),
    withLatencyInMicros:: function(val) validator.validateField(self + { latency_in_micros: val }, 'latency_in_micros', type + '.withLatencyInMicros'),
    withPrefixRoutes:: function(val) validator.validateField(self + { prefix_routes: val }, 'prefix_routes', type + '.withPrefixRoutes'),
    withSettings:: function(val) validator.validateField(self + { settings: val }, 'settings', type + '.withSettings'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
