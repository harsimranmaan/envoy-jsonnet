// Message type: envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes';
local generator = import '../generator.libsonnet';
local fields = {
  case_insensitive: {
    type: 'bool',
    allowedNames: [
      'case_insensitive',
      'caseInsensitive',
    ],
  },
  catch_all_route: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route',
    allowedNames: [
      'catch_all_route',
      'catchAllRoute',
    ],
  },
  routes: {
    type: 'envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route',
    allowedNames: [
      'routes',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Route:: (import 'redis-proxy-prefix-routes-route.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCaseInsensitive:: function(val) validator.validateField(self + { case_insensitive: val }, 'case_insensitive', type + '.withCaseInsensitive'),
    withCatchAllRoute:: function(val) validator.validateField(self + { catch_all_route: val }, 'catch_all_route', type + '.withCatchAllRoute'),
    withRoutes:: function(val) validator.validateField(self + { routes: val }, 'routes', type + '.withRoutes'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
