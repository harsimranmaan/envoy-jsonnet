// Message type: envoy.extensions.filters.http.router.v3.Router
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.router.v3.Router';
local generator = import '../generator.libsonnet';
local fields = {
  dynamic_stats: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'dynamic_stats',
      'dynamicStats',
    ],
  },
  respect_expected_rq_timeout: {
    type: 'bool',
    allowedNames: [
      'respect_expected_rq_timeout',
      'respectExpectedRqTimeout',
    ],
  },
  start_child_span: {
    type: 'bool',
    allowedNames: [
      'start_child_span',
      'startChildSpan',
    ],
  },
  strict_check_headers: {
    type: 'string',
    allowedNames: [
      'strict_check_headers',
      'strictCheckHeaders',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: null,
              'in': [
                'x-envoy-upstream-rq-timeout-ms',
                'x-envoy-upstream-rq-per-try-timeout-ms',
                'x-envoy-max-retries',
                'x-envoy-retry-grpc-on',
                'x-envoy-retry-on',
              ],
            },
          },
        },
      },
    },
  },
  suppress_envoy_headers: {
    type: 'bool',
    allowedNames: [
      'suppress_envoy_headers',
      'suppressEnvoyHeaders',
    ],
  },
  suppress_grpc_request_failure_code_stats: {
    type: 'bool',
    allowedNames: [
      'suppress_grpc_request_failure_code_stats',
      'suppressGrpcRequestFailureCodeStats',
    ],
  },
  upstream_http_filters: {
    type: 'envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter',
    allowedNames: [
      'upstream_http_filters',
      'upstreamHttpFilters',
    ],
    containerType: 'list',
  },
  upstream_log: {
    type: 'envoy.config.accesslog.v3.AccessLog',
    allowedNames: [
      'upstream_log',
      'upstreamLog',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDynamicStats:: function(val) validator.validateField(self + { dynamic_stats: val }, 'dynamic_stats', type + '.withDynamicStats'),
    withRespectExpectedRqTimeout:: function(val) validator.validateField(self + { respect_expected_rq_timeout: val }, 'respect_expected_rq_timeout', type + '.withRespectExpectedRqTimeout'),
    withStartChildSpan:: function(val) validator.validateField(self + { start_child_span: val }, 'start_child_span', type + '.withStartChildSpan'),
    withStrictCheckHeaders:: function(val) validator.validateField(self + { strict_check_headers: val }, 'strict_check_headers', type + '.withStrictCheckHeaders'),
    withSuppressEnvoyHeaders:: function(val) validator.validateField(self + { suppress_envoy_headers: val }, 'suppress_envoy_headers', type + '.withSuppressEnvoyHeaders'),
    withSuppressGrpcRequestFailureCodeStats:: function(val) validator.validateField(self + { suppress_grpc_request_failure_code_stats: val }, 'suppress_grpc_request_failure_code_stats', type + '.withSuppressGrpcRequestFailureCodeStats'),
    withUpstreamHttpFilters:: function(val) validator.validateField(self + { upstream_http_filters: val }, 'upstream_http_filters', type + '.withUpstreamHttpFilters'),
    withUpstreamLog:: function(val) validator.validateField(self + { upstream_log: val }, 'upstream_log', type + '.withUpstreamLog'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
