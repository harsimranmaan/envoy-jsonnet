// Message type: envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions';
local generator = import '../generator.libsonnet';
local fields = {
  add_whitespace: {
    type: 'bool',
    allowedNames: [
      'add_whitespace',
      'addWhitespace',
    ],
  },
  always_print_enums_as_ints: {
    type: 'bool',
    allowedNames: [
      'always_print_enums_as_ints',
      'alwaysPrintEnumsAsInts',
    ],
  },
  always_print_primitive_fields: {
    type: 'bool',
    allowedNames: [
      'always_print_primitive_fields',
      'alwaysPrintPrimitiveFields',
    ],
  },
  preserve_proto_field_names: {
    type: 'bool',
    allowedNames: [
      'preserve_proto_field_names',
      'preserveProtoFieldNames',
    ],
  },
  stream_newline_delimited: {
    type: 'bool',
    allowedNames: [
      'stream_newline_delimited',
      'streamNewlineDelimited',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAddWhitespace:: function(val) validator.validateField(self + { add_whitespace: val }, 'add_whitespace', type + '.withAddWhitespace'),
    withAlwaysPrintEnumsAsInts:: function(val) validator.validateField(self + { always_print_enums_as_ints: val }, 'always_print_enums_as_ints', type + '.withAlwaysPrintEnumsAsInts'),
    withAlwaysPrintPrimitiveFields:: function(val) validator.validateField(self + { always_print_primitive_fields: val }, 'always_print_primitive_fields', type + '.withAlwaysPrintPrimitiveFields'),
    withPreserveProtoFieldNames:: function(val) validator.validateField(self + { preserve_proto_field_names: val }, 'preserve_proto_field_names', type + '.withPreserveProtoFieldNames'),
    withStreamNewlineDelimited:: function(val) validator.validateField(self + { stream_newline_delimited: val }, 'stream_newline_delimited', type + '.withStreamNewlineDelimited'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
