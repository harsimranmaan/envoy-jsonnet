// Enum type: envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.
local type = 'envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel';
local map = {
  BEST_COMPRESSION: 'BEST_COMPRESSION',
  BEST_SPEED: 'BEST_SPEED',
  COMPRESSION_LEVEL_1: 'COMPRESSION_LEVEL_1',
  COMPRESSION_LEVEL_2: 'COMPRESSION_LEVEL_2',
  COMPRESSION_LEVEL_3: 'COMPRESSION_LEVEL_3',
  COMPRESSION_LEVEL_4: 'COMPRESSION_LEVEL_4',
  COMPRESSION_LEVEL_5: 'COMPRESSION_LEVEL_5',
  COMPRESSION_LEVEL_6: 'COMPRESSION_LEVEL_6',
  COMPRESSION_LEVEL_7: 'COMPRESSION_LEVEL_7',
  COMPRESSION_LEVEL_8: 'COMPRESSION_LEVEL_8',
  COMPRESSION_LEVEL_9: 'COMPRESSION_LEVEL_9',
  DEFAULT_COMPRESSION: 'DEFAULT_COMPRESSION',
};

local reverseMap = {
  '0': 'DEFAULT_COMPRESSION',
  '1': 'COMPRESSION_LEVEL_1',
  '2': 'COMPRESSION_LEVEL_2',
  '3': 'COMPRESSION_LEVEL_3',
  '4': 'COMPRESSION_LEVEL_4',
  '5': 'COMPRESSION_LEVEL_5',
  '6': 'COMPRESSION_LEVEL_6',
  '7': 'COMPRESSION_LEVEL_7',
  '8': 'COMPRESSION_LEVEL_8',
  '9': 'BEST_COMPRESSION',
};

local validator = function(input, ctx='') (
  local context = if ctx == '' then type else ctx;
  local v = std.toString(input);
  if std.objectHas(map, v) || std.objectHas(reverseMap, v)
  then input
  else error '%s: invalid value %s for enum %s' % [context, v, type]
);

{
  definition: map {
    _new:: function(obj={}) error '%s: the _new method may not be used on enum types' % 'envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel',
    _validate:: validator,
  },
  validator:: validator,
}
