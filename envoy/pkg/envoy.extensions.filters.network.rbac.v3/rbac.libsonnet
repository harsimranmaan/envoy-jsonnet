// Message type: envoy.extensions.filters.network.rbac.v3.RBAC
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.rbac.v3.RBAC';
local generator = import '../generator.libsonnet';
local fields = {
  enforcement_type: {
    type: 'envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType',
    allowedNames: [
      'enforcement_type',
      'enforcementType',
    ],
  },
  matcher: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'matcher',
    ],
  },
  rules: {
    type: 'envoy.config.rbac.v3.RBAC',
    allowedNames: [
      'rules',
    ],
  },
  shadow_matcher: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'shadow_matcher',
      'shadowMatcher',
    ],
  },
  shadow_rules: {
    type: 'envoy.config.rbac.v3.RBAC',
    allowedNames: [
      'shadow_rules',
      'shadowRules',
    ],
  },
  shadow_rules_stat_prefix: {
    type: 'string',
    allowedNames: [
      'shadow_rules_stat_prefix',
      'shadowRulesStatPrefix',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    EnforcementType:: (import 'rbac-enforcement-type.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withEnforcementType:: function(val) validator.validateField(self + { enforcement_type: val }, 'enforcement_type', type + '.withEnforcementType'),
    withMatcher:: function(val) validator.validateField(self + { matcher: val }, 'matcher', type + '.withMatcher'),
    withRules:: function(val) validator.validateField(self + { rules: val }, 'rules', type + '.withRules'),
    withShadowMatcher:: function(val) validator.validateField(self + { shadow_matcher: val }, 'shadow_matcher', type + '.withShadowMatcher'),
    withShadowRules:: function(val) validator.validateField(self + { shadow_rules: val }, 'shadow_rules', type + '.withShadowRules'),
    withShadowRulesStatPrefix:: function(val) validator.validateField(self + { shadow_rules_stat_prefix: val }, 'shadow_rules_stat_prefix', type + '.withShadowRulesStatPrefix'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
