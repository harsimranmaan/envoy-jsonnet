// Message type: envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials';
local generator = import '../generator.libsonnet';
local fields = {
  client_id: {
    type: 'string',
    allowedNames: [
      'client_id',
      'clientId',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  cookie_names: {
    type: 'envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames',
    allowedNames: [
      'cookie_names',
      'cookieNames',
    ],
  },
  hmac_secret: {
    type: 'envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig',
    allowedNames: [
      'hmac_secret',
      'hmacSecret',
    ],
  },
  token_secret: {
    type: 'envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig',
    allowedNames: [
      'token_secret',
      'tokenSecret',
    ],
    required: true,
  },
};
local oneOfs = [
  {
    fields: [
      'hmac_secret',
    ],
    required: true,
    group: 'token_formation',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    CookieNames:: (import 'o-auth-2-credentials-cookie-names.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClientId:: function(val) validator.validateField(self + { client_id: val }, 'client_id', type + '.withClientId'),
    withCookieNames:: function(val) validator.validateField(self + { cookie_names: val }, 'cookie_names', type + '.withCookieNames'),
    withHmacSecret:: function(val) validator.validateField(self + { hmac_secret: val }, 'hmac_secret', type + '.withHmacSecret'),
    withTokenSecret:: function(val) validator.validateField(self + { token_secret: val }, 'token_secret', type + '.withTokenSecret'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
