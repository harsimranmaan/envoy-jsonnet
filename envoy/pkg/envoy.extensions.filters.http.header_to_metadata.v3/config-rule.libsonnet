// Message type: envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule';
local generator = import '../generator.libsonnet';
local fields = {
  cookie: {
    type: 'string',
    allowedNames: [
      'cookie',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        strict: false,
      },
    },
  },
  header: {
    type: 'string',
    allowedNames: [
      'header',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        strict: false,
      },
    },
  },
  on_header_missing: {
    type: 'envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair',
    allowedNames: [
      'on_header_missing',
      'onHeaderMissing',
    ],
  },
  on_header_present: {
    type: 'envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair',
    allowedNames: [
      'on_header_present',
      'onHeaderPresent',
    ],
  },
  remove: {
    type: 'bool',
    allowedNames: [
      'remove',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCookie:: function(val) validator.validateField(self + { cookie: val }, 'cookie', type + '.withCookie'),
    withHeader:: function(val) validator.validateField(self + { header: val }, 'header', type + '.withHeader'),
    withOnHeaderMissing:: function(val) validator.validateField(self + { on_header_missing: val }, 'on_header_missing', type + '.withOnHeaderMissing'),
    withOnHeaderPresent:: function(val) validator.validateField(self + { on_header_present: val }, 'on_header_present', type + '.withOnHeaderPresent'),
    withRemove:: function(val) validator.validateField(self + { remove: val }, 'remove', type + '.withRemove'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
