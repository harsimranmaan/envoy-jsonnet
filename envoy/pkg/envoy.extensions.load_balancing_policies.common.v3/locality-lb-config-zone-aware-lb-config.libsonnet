// Message type: envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.ZoneAwareLbConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.ZoneAwareLbConfig';
local generator = import '../generator.libsonnet';
local fields = {
  fail_traffic_on_panic: {
    type: 'bool',
    allowedNames: [
      'fail_traffic_on_panic',
      'failTrafficOnPanic',
    ],
  },
  min_cluster_size: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'min_cluster_size',
      'minClusterSize',
    ],
  },
  routing_enabled: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'routing_enabled',
      'routingEnabled',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFailTrafficOnPanic:: function(val) validator.validateField(self + { fail_traffic_on_panic: val }, 'fail_traffic_on_panic', type + '.withFailTrafficOnPanic'),
    withMinClusterSize:: function(val) validator.validateField(self + { min_cluster_size: val }, 'min_cluster_size', type + '.withMinClusterSize'),
    withRoutingEnabled:: function(val) validator.validateField(self + { routing_enabled: val }, 'routing_enabled', type + '.withRoutingEnabled'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
