// Message type: envoy.extensions.filters.http.kill_request.v3.KillRequest
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.kill_request.v3.KillRequest';
local generator = import '../generator.libsonnet';
local fields = {
  direction: {
    type: 'envoy.extensions.filters.http.kill_request.v3.KillRequest.Direction',
    allowedNames: [
      'direction',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  kill_request_header: {
    type: 'string',
    allowedNames: [
      'kill_request_header',
      'killRequestHeader',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        strict: false,
      },
    },
  },
  probability: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'probability',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Direction:: (import 'kill-request-direction.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDirection:: function(val) validator.validateField(self + { direction: val }, 'direction', type + '.withDirection'),
    withKillRequestHeader:: function(val) validator.validateField(self + { kill_request_header: val }, 'kill_request_header', type + '.withKillRequestHeader'),
    withProbability:: function(val) validator.validateField(self + { probability: val }, 'probability', type + '.withProbability'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
