// Message type: envoy.config.route.v3.RouteAction.MaxStreamDuration
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.RouteAction.MaxStreamDuration';
local generator = import '../generator.libsonnet';
local fields = {
  grpc_timeout_header_max: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'grpc_timeout_header_max',
      'grpcTimeoutHeaderMax',
    ],
  },
  grpc_timeout_header_offset: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'grpc_timeout_header_offset',
      'grpcTimeoutHeaderOffset',
    ],
  },
  max_stream_duration: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'max_stream_duration',
      'maxStreamDuration',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withGrpcTimeoutHeaderMax:: function(val) validator.validateField(self + { grpc_timeout_header_max: val }, 'grpc_timeout_header_max', type + '.withGrpcTimeoutHeaderMax'),
    withGrpcTimeoutHeaderOffset:: function(val) validator.validateField(self + { grpc_timeout_header_offset: val }, 'grpc_timeout_header_offset', type + '.withGrpcTimeoutHeaderOffset'),
    withMaxStreamDuration:: function(val) validator.validateField(self + { max_stream_duration: val }, 'max_stream_duration', type + '.withMaxStreamDuration'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
