// Message type: envoy.config.route.v3.WeightedCluster
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.WeightedCluster';
local generator = import '../generator.libsonnet';
local fields = {
  clusters: {
    type: 'envoy.config.route.v3.WeightedCluster.ClusterWeight',
    allowedNames: [
      'clusters',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  header_name: {
    type: 'string',
    allowedNames: [
      'header_name',
      'headerName',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        strict: false,
      },
    },
  },
  runtime_key_prefix: {
    type: 'string',
    allowedNames: [
      'runtime_key_prefix',
      'runtimeKeyPrefix',
    ],
  },
  total_weight: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'total_weight',
      'totalWeight',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'header_name',
    ],
    required: false,
    group: 'random_value_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ClusterWeight:: (import 'weighted-cluster-cluster-weight.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClusters:: function(val) validator.validateField(self + { clusters: val }, 'clusters', type + '.withClusters'),
    withHeaderName:: function(val) validator.validateField(self + { header_name: val }, 'header_name', type + '.withHeaderName'),
    withRuntimeKeyPrefix:: function(val) validator.validateField(self + { runtime_key_prefix: val }, 'runtime_key_prefix', type + '.withRuntimeKeyPrefix'),
    withTotalWeight:: function(val) validator.validateField(self + { total_weight: val }, 'total_weight', type + '.withTotalWeight'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
