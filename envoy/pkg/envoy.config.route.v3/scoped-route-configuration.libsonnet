// Message type: envoy.config.route.v3.ScopedRouteConfiguration
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.ScopedRouteConfiguration';
local generator = import '../generator.libsonnet';
local fields = {
  key: {
    type: 'envoy.config.route.v3.ScopedRouteConfiguration.Key',
    allowedNames: [
      'key',
    ],
    required: true,
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  on_demand: {
    type: 'bool',
    allowedNames: [
      'on_demand',
      'onDemand',
    ],
  },
  route_configuration: {
    type: 'envoy.config.route.v3.RouteConfiguration',
    allowedNames: [
      'route_configuration',
      'routeConfiguration',
    ],
  },
  route_configuration_name: {
    type: 'string',
    allowedNames: [
      'route_configuration_name',
      'routeConfigurationName',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Key:: (import 'scoped-route-configuration-key.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withKey:: function(val) validator.validateField(self + { key: val }, 'key', type + '.withKey'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withOnDemand:: function(val) validator.validateField(self + { on_demand: val }, 'on_demand', type + '.withOnDemand'),
    withRouteConfiguration:: function(val) validator.validateField(self + { route_configuration: val }, 'route_configuration', type + '.withRouteConfiguration'),
    withRouteConfigurationName:: function(val) validator.validateField(self + { route_configuration_name: val }, 'route_configuration_name', type + '.withRouteConfigurationName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
