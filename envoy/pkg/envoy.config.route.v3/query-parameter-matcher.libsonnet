// Message type: envoy.config.route.v3.QueryParameterMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.QueryParameterMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        max_bytes: 1024,
        min_len: 1,
      },
    },
  },
  present_match: {
    type: 'bool',
    allowedNames: [
      'present_match',
      'presentMatch',
    ],
  },
  string_match: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'string_match',
      'stringMatch',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'string_match',
      'present_match',
    ],
    required: false,
    group: 'query_parameter_match_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withPresentMatch:: function(val) validator.validateField(self + { present_match: val }, 'present_match', type + '.withPresentMatch'),
    withStringMatch:: function(val) validator.validateField(self + { string_match: val }, 'string_match', type + '.withStringMatch'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
