// Message type: envoy.config.route.v3.CorsPolicy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.CorsPolicy';
local generator = import '../generator.libsonnet';
local fields = {
  allow_credentials: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'allow_credentials',
      'allowCredentials',
    ],
  },
  allow_headers: {
    type: 'string',
    allowedNames: [
      'allow_headers',
      'allowHeaders',
    ],
  },
  allow_methods: {
    type: 'string',
    allowedNames: [
      'allow_methods',
      'allowMethods',
    ],
  },
  allow_origin_string_match: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'allow_origin_string_match',
      'allowOriginStringMatch',
    ],
    containerType: 'list',
  },
  allow_private_network_access: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'allow_private_network_access',
      'allowPrivateNetworkAccess',
    ],
  },
  expose_headers: {
    type: 'string',
    allowedNames: [
      'expose_headers',
      'exposeHeaders',
    ],
  },
  filter_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'filter_enabled',
      'filterEnabled',
    ],
  },
  max_age: {
    type: 'string',
    allowedNames: [
      'max_age',
      'maxAge',
    ],
  },
  shadow_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'shadow_enabled',
      'shadowEnabled',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'filter_enabled',
    ],
    required: false,
    group: 'enabled_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowCredentials:: function(val) validator.validateField(self + { allow_credentials: val }, 'allow_credentials', type + '.withAllowCredentials'),
    withAllowHeaders:: function(val) validator.validateField(self + { allow_headers: val }, 'allow_headers', type + '.withAllowHeaders'),
    withAllowMethods:: function(val) validator.validateField(self + { allow_methods: val }, 'allow_methods', type + '.withAllowMethods'),
    withAllowOriginStringMatch:: function(val) validator.validateField(self + { allow_origin_string_match: val }, 'allow_origin_string_match', type + '.withAllowOriginStringMatch'),
    withAllowPrivateNetworkAccess:: function(val) validator.validateField(self + { allow_private_network_access: val }, 'allow_private_network_access', type + '.withAllowPrivateNetworkAccess'),
    withExposeHeaders:: function(val) validator.validateField(self + { expose_headers: val }, 'expose_headers', type + '.withExposeHeaders'),
    withFilterEnabled:: function(val) validator.validateField(self + { filter_enabled: val }, 'filter_enabled', type + '.withFilterEnabled'),
    withMaxAge:: function(val) validator.validateField(self + { max_age: val }, 'max_age', type + '.withMaxAge'),
    withShadowEnabled:: function(val) validator.validateField(self + { shadow_enabled: val }, 'shadow_enabled', type + '.withShadowEnabled'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
