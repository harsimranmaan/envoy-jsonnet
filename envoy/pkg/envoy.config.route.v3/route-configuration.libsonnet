// Message type: envoy.config.route.v3.RouteConfiguration
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.RouteConfiguration';
local generator = import '../generator.libsonnet';
local fields = {
  cluster_specifier_plugins: {
    type: 'envoy.config.route.v3.ClusterSpecifierPlugin',
    allowedNames: [
      'cluster_specifier_plugins',
      'clusterSpecifierPlugins',
    ],
    containerType: 'list',
  },
  ignore_path_parameters_in_path_matching: {
    type: 'bool',
    allowedNames: [
      'ignore_path_parameters_in_path_matching',
      'ignorePathParametersInPathMatching',
    ],
  },
  ignore_port_in_host_matching: {
    type: 'bool',
    allowedNames: [
      'ignore_port_in_host_matching',
      'ignorePortInHostMatching',
    ],
  },
  internal_only_headers: {
    type: 'string',
    allowedNames: [
      'internal_only_headers',
      'internalOnlyHeaders',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              strict: false,
            },
          },
        },
      },
    },
  },
  max_direct_response_body_size_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_direct_response_body_size_bytes',
      'maxDirectResponseBodySizeBytes',
    ],
  },
  most_specific_header_mutations_wins: {
    type: 'bool',
    allowedNames: [
      'most_specific_header_mutations_wins',
      'mostSpecificHeaderMutationsWins',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  request_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'request_headers_to_add',
      'requestHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  request_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'request_headers_to_remove',
      'requestHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              strict: false,
            },
          },
        },
      },
    },
  },
  request_mirror_policies: {
    type: 'envoy.config.route.v3.RouteAction.RequestMirrorPolicy',
    allowedNames: [
      'request_mirror_policies',
      'requestMirrorPolicies',
    ],
    containerType: 'list',
  },
  response_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'response_headers_to_add',
      'responseHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  response_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'response_headers_to_remove',
      'responseHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              strict: false,
            },
          },
        },
      },
    },
  },
  typed_per_filter_config: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'typed_per_filter_config',
      'typedPerFilterConfig',
    ],
    containerType: 'map',
  },
  validate_clusters: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'validate_clusters',
      'validateClusters',
    ],
  },
  vhds: {
    type: 'envoy.config.route.v3.Vhds',
    allowedNames: [
      'vhds',
    ],
  },
  virtual_hosts: {
    type: 'envoy.config.route.v3.VirtualHost',
    allowedNames: [
      'virtual_hosts',
      'virtualHosts',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    TypedPerFilterConfigEntry:: (import 'route-configuration-typed-per-filter-config-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClusterSpecifierPlugins:: function(val) validator.validateField(self + { cluster_specifier_plugins: val }, 'cluster_specifier_plugins', type + '.withClusterSpecifierPlugins'),
    withIgnorePathParametersInPathMatching:: function(val) validator.validateField(self + { ignore_path_parameters_in_path_matching: val }, 'ignore_path_parameters_in_path_matching', type + '.withIgnorePathParametersInPathMatching'),
    withIgnorePortInHostMatching:: function(val) validator.validateField(self + { ignore_port_in_host_matching: val }, 'ignore_port_in_host_matching', type + '.withIgnorePortInHostMatching'),
    withInternalOnlyHeaders:: function(val) validator.validateField(self + { internal_only_headers: val }, 'internal_only_headers', type + '.withInternalOnlyHeaders'),
    withMaxDirectResponseBodySizeBytes:: function(val) validator.validateField(self + { max_direct_response_body_size_bytes: val }, 'max_direct_response_body_size_bytes', type + '.withMaxDirectResponseBodySizeBytes'),
    withMostSpecificHeaderMutationsWins:: function(val) validator.validateField(self + { most_specific_header_mutations_wins: val }, 'most_specific_header_mutations_wins', type + '.withMostSpecificHeaderMutationsWins'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withRequestHeadersToAdd:: function(val) validator.validateField(self + { request_headers_to_add: val }, 'request_headers_to_add', type + '.withRequestHeadersToAdd'),
    withRequestHeadersToRemove:: function(val) validator.validateField(self + { request_headers_to_remove: val }, 'request_headers_to_remove', type + '.withRequestHeadersToRemove'),
    withRequestMirrorPolicies:: function(val) validator.validateField(self + { request_mirror_policies: val }, 'request_mirror_policies', type + '.withRequestMirrorPolicies'),
    withResponseHeadersToAdd:: function(val) validator.validateField(self + { response_headers_to_add: val }, 'response_headers_to_add', type + '.withResponseHeadersToAdd'),
    withResponseHeadersToRemove:: function(val) validator.validateField(self + { response_headers_to_remove: val }, 'response_headers_to_remove', type + '.withResponseHeadersToRemove'),
    withTypedPerFilterConfig:: function(val) validator.validateField(self + { typed_per_filter_config: val }, 'typed_per_filter_config', type + '.withTypedPerFilterConfig'),
    withValidateClusters:: function(val) validator.validateField(self + { validate_clusters: val }, 'validate_clusters', type + '.withValidateClusters'),
    withVhds:: function(val) validator.validateField(self + { vhds: val }, 'vhds', type + '.withVhds'),
    withVirtualHosts:: function(val) validator.validateField(self + { virtual_hosts: val }, 'virtual_hosts', type + '.withVirtualHosts'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
