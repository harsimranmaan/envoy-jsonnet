// Message type: envoy.config.route.v3.WeightedCluster.ClusterWeight
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.WeightedCluster.ClusterWeight';
local generator = import '../generator.libsonnet';
local fields = {
  cluster_header: {
    type: 'string',
    allowedNames: [
      'cluster_header',
      'clusterHeader',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        strict: false,
      },
    },
  },
  host_rewrite_literal: {
    type: 'string',
    allowedNames: [
      'host_rewrite_literal',
      'hostRewriteLiteral',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        strict: false,
      },
    },
  },
  metadata_match: {
    type: 'envoy.config.core.v3.Metadata',
    allowedNames: [
      'metadata_match',
      'metadataMatch',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  request_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'request_headers_to_add',
      'requestHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  request_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'request_headers_to_remove',
      'requestHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              strict: false,
            },
          },
        },
      },
    },
  },
  response_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'response_headers_to_add',
      'responseHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  response_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'response_headers_to_remove',
      'responseHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              strict: false,
            },
          },
        },
      },
    },
  },
  typed_per_filter_config: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'typed_per_filter_config',
      'typedPerFilterConfig',
    ],
    containerType: 'map',
  },
  weight: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'weight',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'host_rewrite_literal',
    ],
    required: false,
    group: 'host_rewrite_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    TypedPerFilterConfigEntry:: (import 'weighted-cluster-cluster-weight-typed-per-filter-config-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClusterHeader:: function(val) validator.validateField(self + { cluster_header: val }, 'cluster_header', type + '.withClusterHeader'),
    withHostRewriteLiteral:: function(val) validator.validateField(self + { host_rewrite_literal: val }, 'host_rewrite_literal', type + '.withHostRewriteLiteral'),
    withMetadataMatch:: function(val) validator.validateField(self + { metadata_match: val }, 'metadata_match', type + '.withMetadataMatch'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withRequestHeadersToAdd:: function(val) validator.validateField(self + { request_headers_to_add: val }, 'request_headers_to_add', type + '.withRequestHeadersToAdd'),
    withRequestHeadersToRemove:: function(val) validator.validateField(self + { request_headers_to_remove: val }, 'request_headers_to_remove', type + '.withRequestHeadersToRemove'),
    withResponseHeadersToAdd:: function(val) validator.validateField(self + { response_headers_to_add: val }, 'response_headers_to_add', type + '.withResponseHeadersToAdd'),
    withResponseHeadersToRemove:: function(val) validator.validateField(self + { response_headers_to_remove: val }, 'response_headers_to_remove', type + '.withResponseHeadersToRemove'),
    withTypedPerFilterConfig:: function(val) validator.validateField(self + { typed_per_filter_config: val }, 'typed_per_filter_config', type + '.withTypedPerFilterConfig'),
    withWeight:: function(val) validator.validateField(self + { weight: val }, 'weight', type + '.withWeight'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
