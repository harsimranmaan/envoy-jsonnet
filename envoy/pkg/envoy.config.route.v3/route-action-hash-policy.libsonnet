// Message type: envoy.config.route.v3.RouteAction.HashPolicy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.RouteAction.HashPolicy';
local generator = import '../generator.libsonnet';
local fields = {
  connection_properties: {
    type: 'envoy.config.route.v3.RouteAction.HashPolicy.ConnectionProperties',
    allowedNames: [
      'connection_properties',
      'connectionProperties',
    ],
  },
  cookie: {
    type: 'envoy.config.route.v3.RouteAction.HashPolicy.Cookie',
    allowedNames: [
      'cookie',
    ],
  },
  filter_state: {
    type: 'envoy.config.route.v3.RouteAction.HashPolicy.FilterState',
    allowedNames: [
      'filter_state',
      'filterState',
    ],
  },
  header: {
    type: 'envoy.config.route.v3.RouteAction.HashPolicy.Header',
    allowedNames: [
      'header',
    ],
  },
  query_parameter: {
    type: 'envoy.config.route.v3.RouteAction.HashPolicy.QueryParameter',
    allowedNames: [
      'query_parameter',
      'queryParameter',
    ],
  },
  terminal: {
    type: 'bool',
    allowedNames: [
      'terminal',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'header',
      'cookie',
      'connection_properties',
      'query_parameter',
      'filter_state',
    ],
    required: true,
    group: 'policy_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Header:: (import 'route-action-hash-policy-header.libsonnet').definition,
    Cookie:: (import 'route-action-hash-policy-cookie.libsonnet').definition,
    ConnectionProperties:: (import 'route-action-hash-policy-connection-properties.libsonnet').definition,
    QueryParameter:: (import 'route-action-hash-policy-query-parameter.libsonnet').definition,
    FilterState:: (import 'route-action-hash-policy-filter-state.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConnectionProperties:: function(val) validator.validateField(self + { connection_properties: val }, 'connection_properties', type + '.withConnectionProperties'),
    withCookie:: function(val) validator.validateField(self + { cookie: val }, 'cookie', type + '.withCookie'),
    withFilterState:: function(val) validator.validateField(self + { filter_state: val }, 'filter_state', type + '.withFilterState'),
    withHeader:: function(val) validator.validateField(self + { header: val }, 'header', type + '.withHeader'),
    withQueryParameter:: function(val) validator.validateField(self + { query_parameter: val }, 'query_parameter', type + '.withQueryParameter'),
    withTerminal:: function(val) validator.validateField(self + { terminal: val }, 'terminal', type + '.withTerminal'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
