// Message type: envoy.config.route.v3.HedgePolicy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.HedgePolicy';
local generator = import '../generator.libsonnet';
local fields = {
  additional_request_chance: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'additional_request_chance',
      'additionalRequestChance',
    ],
  },
  hedge_on_per_try_timeout: {
    type: 'bool',
    allowedNames: [
      'hedge_on_per_try_timeout',
      'hedgeOnPerTryTimeout',
    ],
  },
  initial_requests: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'initial_requests',
      'initialRequests',
    ],
    constraints: {
      Uint32: {
        gte: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAdditionalRequestChance:: function(val) validator.validateField(self + { additional_request_chance: val }, 'additional_request_chance', type + '.withAdditionalRequestChance'),
    withHedgeOnPerTryTimeout:: function(val) validator.validateField(self + { hedge_on_per_try_timeout: val }, 'hedge_on_per_try_timeout', type + '.withHedgeOnPerTryTimeout'),
    withInitialRequests:: function(val) validator.validateField(self + { initial_requests: val }, 'initial_requests', type + '.withInitialRequests'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
