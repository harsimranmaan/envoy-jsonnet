// Message type: envoy.config.route.v3.RouteMatch
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.RouteMatch';
local generator = import '../generator.libsonnet';
local fields = {
  case_sensitive: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'case_sensitive',
      'caseSensitive',
    ],
  },
  connect_matcher: {
    type: 'envoy.config.route.v3.RouteMatch.ConnectMatcher',
    allowedNames: [
      'connect_matcher',
      'connectMatcher',
    ],
  },
  dynamic_metadata: {
    type: 'envoy.type.matcher.v3.MetadataMatcher',
    allowedNames: [
      'dynamic_metadata',
      'dynamicMetadata',
    ],
    containerType: 'list',
  },
  grpc: {
    type: 'envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions',
    allowedNames: [
      'grpc',
    ],
  },
  headers: {
    type: 'envoy.config.route.v3.HeaderMatcher',
    allowedNames: [
      'headers',
    ],
    containerType: 'list',
  },
  path: {
    type: 'string',
    allowedNames: [
      'path',
    ],
  },
  path_match_policy: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'path_match_policy',
      'pathMatchPolicy',
    ],
  },
  path_separated_prefix: {
    type: 'string',
    allowedNames: [
      'path_separated_prefix',
      'pathSeparatedPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        pattern: '^[^?#]+[^?#/]$',
      },
    },
  },
  prefix: {
    type: 'string',
    allowedNames: [
      'prefix',
    ],
  },
  query_parameters: {
    type: 'envoy.config.route.v3.QueryParameterMatcher',
    allowedNames: [
      'query_parameters',
      'queryParameters',
    ],
    containerType: 'list',
  },
  runtime_fraction: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'runtime_fraction',
      'runtimeFraction',
    ],
  },
  safe_regex: {
    type: 'envoy.type.matcher.v3.RegexMatcher',
    allowedNames: [
      'safe_regex',
      'safeRegex',
    ],
  },
  tls_context: {
    type: 'envoy.config.route.v3.RouteMatch.TlsContextMatchOptions',
    allowedNames: [
      'tls_context',
      'tlsContext',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'prefix',
      'path',
      'safe_regex',
      'connect_matcher',
      'path_separated_prefix',
      'path_match_policy',
    ],
    required: true,
    group: 'path_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    GrpcRouteMatchOptions:: (import 'route-match-grpc-route-match-options.libsonnet').definition,
    TlsContextMatchOptions:: (import 'route-match-tls-context-match-options.libsonnet').definition,
    ConnectMatcher:: (import 'route-match-connect-matcher.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCaseSensitive:: function(val) validator.validateField(self + { case_sensitive: val }, 'case_sensitive', type + '.withCaseSensitive'),
    withConnectMatcher:: function(val) validator.validateField(self + { connect_matcher: val }, 'connect_matcher', type + '.withConnectMatcher'),
    withDynamicMetadata:: function(val) validator.validateField(self + { dynamic_metadata: val }, 'dynamic_metadata', type + '.withDynamicMetadata'),
    withGrpc:: function(val) validator.validateField(self + { grpc: val }, 'grpc', type + '.withGrpc'),
    withHeaders:: function(val) validator.validateField(self + { headers: val }, 'headers', type + '.withHeaders'),
    withPath:: function(val) validator.validateField(self + { path: val }, 'path', type + '.withPath'),
    withPathMatchPolicy:: function(val) validator.validateField(self + { path_match_policy: val }, 'path_match_policy', type + '.withPathMatchPolicy'),
    withPathSeparatedPrefix:: function(val) validator.validateField(self + { path_separated_prefix: val }, 'path_separated_prefix', type + '.withPathSeparatedPrefix'),
    withPrefix:: function(val) validator.validateField(self + { prefix: val }, 'prefix', type + '.withPrefix'),
    withQueryParameters:: function(val) validator.validateField(self + { query_parameters: val }, 'query_parameters', type + '.withQueryParameters'),
    withRuntimeFraction:: function(val) validator.validateField(self + { runtime_fraction: val }, 'runtime_fraction', type + '.withRuntimeFraction'),
    withSafeRegex:: function(val) validator.validateField(self + { safe_regex: val }, 'safe_regex', type + '.withSafeRegex'),
    withTlsContext:: function(val) validator.validateField(self + { tls_context: val }, 'tls_context', type + '.withTlsContext'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
