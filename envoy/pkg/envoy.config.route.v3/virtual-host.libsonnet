// Message type: envoy.config.route.v3.VirtualHost
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.VirtualHost';
local generator = import '../generator.libsonnet';
local fields = {
  cors: {
    type: 'envoy.config.route.v3.CorsPolicy',
    allowedNames: [
      'cors',
    ],
  },
  domains: {
    type: 'string',
    allowedNames: [
      'domains',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 2,
              },
              strict: false,
            },
          },
        },
        min_items: 1,
      },
    },
  },
  hedge_policy: {
    type: 'envoy.config.route.v3.HedgePolicy',
    allowedNames: [
      'hedge_policy',
      'hedgePolicy',
    ],
  },
  include_attempt_count_in_response: {
    type: 'bool',
    allowedNames: [
      'include_attempt_count_in_response',
      'includeAttemptCountInResponse',
    ],
  },
  include_is_timeout_retry_header: {
    type: 'bool',
    allowedNames: [
      'include_is_timeout_retry_header',
      'includeIsTimeoutRetryHeader',
    ],
  },
  include_request_attempt_count: {
    type: 'bool',
    allowedNames: [
      'include_request_attempt_count',
      'includeRequestAttemptCount',
    ],
  },
  matcher: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'matcher',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  per_request_buffer_limit_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'per_request_buffer_limit_bytes',
      'perRequestBufferLimitBytes',
    ],
  },
  rate_limits: {
    type: 'envoy.config.route.v3.RateLimit',
    allowedNames: [
      'rate_limits',
      'rateLimits',
    ],
    containerType: 'list',
  },
  request_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'request_headers_to_add',
      'requestHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  request_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'request_headers_to_remove',
      'requestHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              min_len: 1,
              strict: false,
            },
          },
        },
      },
    },
  },
  request_mirror_policies: {
    type: 'envoy.config.route.v3.RouteAction.RequestMirrorPolicy',
    allowedNames: [
      'request_mirror_policies',
      'requestMirrorPolicies',
    ],
    containerType: 'list',
  },
  require_tls: {
    type: 'envoy.config.route.v3.VirtualHost.TlsRequirementType',
    allowedNames: [
      'require_tls',
      'requireTls',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  response_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'response_headers_to_add',
      'responseHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  response_headers_to_remove: {
    type: 'string',
    allowedNames: [
      'response_headers_to_remove',
      'responseHeadersToRemove',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        items: {
          Type: {
            String_: {
              WellKnown: {
                WellKnownRegex: 1,
              },
              min_len: 1,
              strict: false,
            },
          },
        },
      },
    },
  },
  retry_policy: {
    type: 'envoy.config.route.v3.RetryPolicy',
    allowedNames: [
      'retry_policy',
      'retryPolicy',
    ],
  },
  retry_policy_typed_config: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'retry_policy_typed_config',
      'retryPolicyTypedConfig',
    ],
  },
  routes: {
    type: 'envoy.config.route.v3.Route',
    allowedNames: [
      'routes',
    ],
    containerType: 'list',
  },
  typed_per_filter_config: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'typed_per_filter_config',
      'typedPerFilterConfig',
    ],
    containerType: 'map',
  },
  virtual_clusters: {
    type: 'envoy.config.route.v3.VirtualCluster',
    allowedNames: [
      'virtual_clusters',
      'virtualClusters',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    TlsRequirementType:: (import 'virtual-host-tls-requirement-type.libsonnet').definition,
    TypedPerFilterConfigEntry:: (import 'virtual-host-typed-per-filter-config-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCors:: function(val) validator.validateField(self + { cors: val }, 'cors', type + '.withCors'),
    withDomains:: function(val) validator.validateField(self + { domains: val }, 'domains', type + '.withDomains'),
    withHedgePolicy:: function(val) validator.validateField(self + { hedge_policy: val }, 'hedge_policy', type + '.withHedgePolicy'),
    withIncludeAttemptCountInResponse:: function(val) validator.validateField(self + { include_attempt_count_in_response: val }, 'include_attempt_count_in_response', type + '.withIncludeAttemptCountInResponse'),
    withIncludeIsTimeoutRetryHeader:: function(val) validator.validateField(self + { include_is_timeout_retry_header: val }, 'include_is_timeout_retry_header', type + '.withIncludeIsTimeoutRetryHeader'),
    withIncludeRequestAttemptCount:: function(val) validator.validateField(self + { include_request_attempt_count: val }, 'include_request_attempt_count', type + '.withIncludeRequestAttemptCount'),
    withMatcher:: function(val) validator.validateField(self + { matcher: val }, 'matcher', type + '.withMatcher'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withPerRequestBufferLimitBytes:: function(val) validator.validateField(self + { per_request_buffer_limit_bytes: val }, 'per_request_buffer_limit_bytes', type + '.withPerRequestBufferLimitBytes'),
    withRateLimits:: function(val) validator.validateField(self + { rate_limits: val }, 'rate_limits', type + '.withRateLimits'),
    withRequestHeadersToAdd:: function(val) validator.validateField(self + { request_headers_to_add: val }, 'request_headers_to_add', type + '.withRequestHeadersToAdd'),
    withRequestHeadersToRemove:: function(val) validator.validateField(self + { request_headers_to_remove: val }, 'request_headers_to_remove', type + '.withRequestHeadersToRemove'),
    withRequestMirrorPolicies:: function(val) validator.validateField(self + { request_mirror_policies: val }, 'request_mirror_policies', type + '.withRequestMirrorPolicies'),
    withRequireTls:: function(val) validator.validateField(self + { require_tls: val }, 'require_tls', type + '.withRequireTls'),
    withResponseHeadersToAdd:: function(val) validator.validateField(self + { response_headers_to_add: val }, 'response_headers_to_add', type + '.withResponseHeadersToAdd'),
    withResponseHeadersToRemove:: function(val) validator.validateField(self + { response_headers_to_remove: val }, 'response_headers_to_remove', type + '.withResponseHeadersToRemove'),
    withRetryPolicy:: function(val) validator.validateField(self + { retry_policy: val }, 'retry_policy', type + '.withRetryPolicy'),
    withRetryPolicyTypedConfig:: function(val) validator.validateField(self + { retry_policy_typed_config: val }, 'retry_policy_typed_config', type + '.withRetryPolicyTypedConfig'),
    withRoutes:: function(val) validator.validateField(self + { routes: val }, 'routes', type + '.withRoutes'),
    withTypedPerFilterConfig:: function(val) validator.validateField(self + { typed_per_filter_config: val }, 'typed_per_filter_config', type + '.withTypedPerFilterConfig'),
    withVirtualClusters:: function(val) validator.validateField(self + { virtual_clusters: val }, 'virtual_clusters', type + '.withVirtualClusters'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
