// Message type: envoy.config.route.v3.RouteAction.UpgradeConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.RouteAction.UpgradeConfig';
local generator = import '../generator.libsonnet';
local fields = {
  connect_config: {
    type: 'envoy.config.route.v3.RouteAction.UpgradeConfig.ConnectConfig',
    allowedNames: [
      'connect_config',
      'connectConfig',
    ],
  },
  enabled: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'enabled',
    ],
  },
  upgrade_type: {
    type: 'string',
    allowedNames: [
      'upgrade_type',
      'upgradeType',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        min_len: 1,
        strict: false,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ConnectConfig:: (import 'route-action-upgrade-config-connect-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConnectConfig:: function(val) validator.validateField(self + { connect_config: val }, 'connect_config', type + '.withConnectConfig'),
    withEnabled:: function(val) validator.validateField(self + { enabled: val }, 'enabled', type + '.withEnabled'),
    withUpgradeType:: function(val) validator.validateField(self + { upgrade_type: val }, 'upgrade_type', type + '.withUpgradeType'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
