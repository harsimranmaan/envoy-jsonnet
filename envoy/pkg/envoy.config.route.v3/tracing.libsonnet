// Message type: envoy.config.route.v3.Tracing
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.Tracing';
local generator = import '../generator.libsonnet';
local fields = {
  client_sampling: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'client_sampling',
      'clientSampling',
    ],
  },
  custom_tags: {
    type: 'envoy.type.tracing.v3.CustomTag',
    allowedNames: [
      'custom_tags',
      'customTags',
    ],
    containerType: 'list',
  },
  overall_sampling: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'overall_sampling',
      'overallSampling',
    ],
  },
  random_sampling: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'random_sampling',
      'randomSampling',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClientSampling:: function(val) validator.validateField(self + { client_sampling: val }, 'client_sampling', type + '.withClientSampling'),
    withCustomTags:: function(val) validator.validateField(self + { custom_tags: val }, 'custom_tags', type + '.withCustomTags'),
    withOverallSampling:: function(val) validator.validateField(self + { overall_sampling: val }, 'overall_sampling', type + '.withOverallSampling'),
    withRandomSampling:: function(val) validator.validateField(self + { random_sampling: val }, 'random_sampling', type + '.withRandomSampling'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
