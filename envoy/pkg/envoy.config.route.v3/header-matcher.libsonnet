// Message type: envoy.config.route.v3.HeaderMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.route.v3.HeaderMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  contains_match: {
    type: 'string',
    allowedNames: [
      'contains_match',
      'containsMatch',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  exact_match: {
    type: 'string',
    allowedNames: [
      'exact_match',
      'exactMatch',
    ],
  },
  invert_match: {
    type: 'bool',
    allowedNames: [
      'invert_match',
      'invertMatch',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        min_len: 1,
        strict: false,
      },
    },
  },
  prefix_match: {
    type: 'string',
    allowedNames: [
      'prefix_match',
      'prefixMatch',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  present_match: {
    type: 'bool',
    allowedNames: [
      'present_match',
      'presentMatch',
    ],
  },
  range_match: {
    type: 'envoy.type.v3.Int64Range',
    allowedNames: [
      'range_match',
      'rangeMatch',
    ],
  },
  safe_regex_match: {
    type: 'envoy.type.matcher.v3.RegexMatcher',
    allowedNames: [
      'safe_regex_match',
      'safeRegexMatch',
    ],
  },
  string_match: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'string_match',
      'stringMatch',
    ],
  },
  suffix_match: {
    type: 'string',
    allowedNames: [
      'suffix_match',
      'suffixMatch',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  treat_missing_header_as_empty: {
    type: 'bool',
    allowedNames: [
      'treat_missing_header_as_empty',
      'treatMissingHeaderAsEmpty',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'exact_match',
      'safe_regex_match',
      'range_match',
      'present_match',
      'prefix_match',
      'suffix_match',
      'contains_match',
      'string_match',
    ],
    required: false,
    group: 'header_match_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withContainsMatch:: function(val) validator.validateField(self + { contains_match: val }, 'contains_match', type + '.withContainsMatch'),
    withExactMatch:: function(val) validator.validateField(self + { exact_match: val }, 'exact_match', type + '.withExactMatch'),
    withInvertMatch:: function(val) validator.validateField(self + { invert_match: val }, 'invert_match', type + '.withInvertMatch'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withPrefixMatch:: function(val) validator.validateField(self + { prefix_match: val }, 'prefix_match', type + '.withPrefixMatch'),
    withPresentMatch:: function(val) validator.validateField(self + { present_match: val }, 'present_match', type + '.withPresentMatch'),
    withRangeMatch:: function(val) validator.validateField(self + { range_match: val }, 'range_match', type + '.withRangeMatch'),
    withSafeRegexMatch:: function(val) validator.validateField(self + { safe_regex_match: val }, 'safe_regex_match', type + '.withSafeRegexMatch'),
    withStringMatch:: function(val) validator.validateField(self + { string_match: val }, 'string_match', type + '.withStringMatch'),
    withSuffixMatch:: function(val) validator.validateField(self + { suffix_match: val }, 'suffix_match', type + '.withSuffixMatch'),
    withTreatMissingHeaderAsEmpty:: function(val) validator.validateField(self + { treat_missing_header_as_empty: val }, 'treat_missing_header_as_empty', type + '.withTreatMissingHeaderAsEmpty'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
