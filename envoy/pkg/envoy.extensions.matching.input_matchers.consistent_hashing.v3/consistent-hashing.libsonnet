// Message type: envoy.extensions.matching.input_matchers.consistent_hashing.v3.ConsistentHashing
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.matching.input_matchers.consistent_hashing.v3.ConsistentHashing';
local generator = import '../generator.libsonnet';
local fields = {
  modulo: {
    type: 'uint32',
    allowedNames: [
      'modulo',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
  seed: {
    type: 'uint64',
    allowedNames: [
      'seed',
    ],
  },
  threshold: {
    type: 'uint32',
    allowedNames: [
      'threshold',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withModulo:: function(val) validator.validateField(self + { modulo: val }, 'modulo', type + '.withModulo'),
    withSeed:: function(val) validator.validateField(self + { seed: val }, 'seed', type + '.withSeed'),
    withThreshold:: function(val) validator.validateField(self + { threshold: val }, 'threshold', type + '.withThreshold'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
