// Message type: envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig';
local generator = import '../generator.libsonnet';
local fields = {
  cdn_id: {
    type: 'string',
    allowedNames: [
      'cdn_id',
      'cdnId',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  max_allowed_occurrences: {
    type: 'uint32',
    allowedNames: [
      'max_allowed_occurrences',
      'maxAllowedOccurrences',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCdnId:: function(val) validator.validateField(self + { cdn_id: val }, 'cdn_id', type + '.withCdnId'),
    withMaxAllowedOccurrences:: function(val) validator.validateField(self + { max_allowed_occurrences: val }, 'max_allowed_occurrences', type + '.withMaxAllowedOccurrences'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
