// Message type: envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  content_type: {
    type: 'string',
    allowedNames: [
      'content_type',
      'contentType',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  response_size_header: {
    type: 'string',
    allowedNames: [
      'response_size_header',
      'responseSizeHeader',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        strict: false,
      },
    },
  },
  withhold_grpc_frames: {
    type: 'bool',
    allowedNames: [
      'withhold_grpc_frames',
      'withholdGrpcFrames',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withContentType:: function(val) validator.validateField(self + { content_type: val }, 'content_type', type + '.withContentType'),
    withResponseSizeHeader:: function(val) validator.validateField(self + { response_size_header: val }, 'response_size_header', type + '.withResponseSizeHeader'),
    withWithholdGrpcFrames:: function(val) validator.validateField(self + { withhold_grpc_frames: val }, 'withhold_grpc_frames', type + '.withWithholdGrpcFrames'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
