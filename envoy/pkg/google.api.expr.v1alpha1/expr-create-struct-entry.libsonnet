// Message type: google.api.expr.v1alpha1.Expr.CreateStruct.Entry
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.Expr.CreateStruct.Entry';
local generator = import '../generator.libsonnet';
local fields = {
  field_key: {
    type: 'string',
    allowedNames: [
      'field_key',
      'fieldKey',
    ],
  },
  id: {
    type: 'int64',
    allowedNames: [
      'id',
    ],
  },
  map_key: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'map_key',
      'mapKey',
    ],
  },
  optional_entry: {
    type: 'bool',
    allowedNames: [
      'optional_entry',
      'optionalEntry',
    ],
  },
  value: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'value',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'field_key',
      'map_key',
    ],
    required: false,
    group: 'key_kind',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFieldKey:: function(val) validator.validateField(self + { field_key: val }, 'field_key', type + '.withFieldKey'),
    withId:: function(val) validator.validateField(self + { id: val }, 'id', type + '.withId'),
    withMapKey:: function(val) validator.validateField(self + { map_key: val }, 'map_key', type + '.withMapKey'),
    withOptionalEntry:: function(val) validator.validateField(self + { optional_entry: val }, 'optional_entry', type + '.withOptionalEntry'),
    withValue:: function(val) validator.validateField(self + { value: val }, 'value', type + '.withValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
