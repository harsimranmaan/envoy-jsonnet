// Message type: google.api.expr.v1alpha1.SourceInfo
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.SourceInfo';
local generator = import '../generator.libsonnet';
local fields = {
  line_offsets: {
    type: 'int32',
    allowedNames: [
      'line_offsets',
      'lineOffsets',
    ],
    containerType: 'list',
  },
  location: {
    type: 'string',
    allowedNames: [
      'location',
    ],
  },
  macro_calls: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'macro_calls',
      'macroCalls',
    ],
    containerType: 'map',
  },
  positions: {
    type: 'int32',
    allowedNames: [
      'positions',
    ],
    containerType: 'map',
  },
  syntax_version: {
    type: 'string',
    allowedNames: [
      'syntax_version',
      'syntaxVersion',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    PositionsEntry:: (import 'source-info-positions-entry.libsonnet').definition,
    MacroCallsEntry:: (import 'source-info-macro-calls-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withLineOffsets:: function(val) validator.validateField(self + { line_offsets: val }, 'line_offsets', type + '.withLineOffsets'),
    withLocation:: function(val) validator.validateField(self + { location: val }, 'location', type + '.withLocation'),
    withMacroCalls:: function(val) validator.validateField(self + { macro_calls: val }, 'macro_calls', type + '.withMacroCalls'),
    withPositions:: function(val) validator.validateField(self + { positions: val }, 'positions', type + '.withPositions'),
    withSyntaxVersion:: function(val) validator.validateField(self + { syntax_version: val }, 'syntax_version', type + '.withSyntaxVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
