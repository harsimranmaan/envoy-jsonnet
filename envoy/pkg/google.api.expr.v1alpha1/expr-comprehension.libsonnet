// Message type: google.api.expr.v1alpha1.Expr.Comprehension
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.Expr.Comprehension';
local generator = import '../generator.libsonnet';
local fields = {
  accu_init: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'accu_init',
      'accuInit',
    ],
  },
  accu_var: {
    type: 'string',
    allowedNames: [
      'accu_var',
      'accuVar',
    ],
  },
  iter_range: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'iter_range',
      'iterRange',
    ],
  },
  iter_var: {
    type: 'string',
    allowedNames: [
      'iter_var',
      'iterVar',
    ],
  },
  loop_condition: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'loop_condition',
      'loopCondition',
    ],
  },
  loop_step: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'loop_step',
      'loopStep',
    ],
  },
  result: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'result',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccuInit:: function(val) validator.validateField(self + { accu_init: val }, 'accu_init', type + '.withAccuInit'),
    withAccuVar:: function(val) validator.validateField(self + { accu_var: val }, 'accu_var', type + '.withAccuVar'),
    withIterRange:: function(val) validator.validateField(self + { iter_range: val }, 'iter_range', type + '.withIterRange'),
    withIterVar:: function(val) validator.validateField(self + { iter_var: val }, 'iter_var', type + '.withIterVar'),
    withLoopCondition:: function(val) validator.validateField(self + { loop_condition: val }, 'loop_condition', type + '.withLoopCondition'),
    withLoopStep:: function(val) validator.validateField(self + { loop_step: val }, 'loop_step', type + '.withLoopStep'),
    withResult:: function(val) validator.validateField(self + { result: val }, 'result', type + '.withResult'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
