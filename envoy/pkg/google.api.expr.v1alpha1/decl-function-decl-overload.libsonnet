// Message type: google.api.expr.v1alpha1.Decl.FunctionDecl.Overload
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.Decl.FunctionDecl.Overload';
local generator = import '../generator.libsonnet';
local fields = {
  doc: {
    type: 'string',
    allowedNames: [
      'doc',
    ],
  },
  is_instance_function: {
    type: 'bool',
    allowedNames: [
      'is_instance_function',
      'isInstanceFunction',
    ],
  },
  overload_id: {
    type: 'string',
    allowedNames: [
      'overload_id',
      'overloadId',
    ],
  },
  params: {
    type: 'google.api.expr.v1alpha1.Type',
    allowedNames: [
      'params',
    ],
    containerType: 'list',
  },
  result_type: {
    type: 'google.api.expr.v1alpha1.Type',
    allowedNames: [
      'result_type',
      'resultType',
    ],
  },
  type_params: {
    type: 'string',
    allowedNames: [
      'type_params',
      'typeParams',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDoc:: function(val) validator.validateField(self + { doc: val }, 'doc', type + '.withDoc'),
    withIsInstanceFunction:: function(val) validator.validateField(self + { is_instance_function: val }, 'is_instance_function', type + '.withIsInstanceFunction'),
    withOverloadId:: function(val) validator.validateField(self + { overload_id: val }, 'overload_id', type + '.withOverloadId'),
    withParams:: function(val) validator.validateField(self + { params: val }, 'params', type + '.withParams'),
    withResultType:: function(val) validator.validateField(self + { result_type: val }, 'result_type', type + '.withResultType'),
    withTypeParams:: function(val) validator.validateField(self + { type_params: val }, 'type_params', type + '.withTypeParams'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
