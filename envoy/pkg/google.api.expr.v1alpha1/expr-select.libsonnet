// Message type: google.api.expr.v1alpha1.Expr.Select
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.Expr.Select';
local generator = import '../generator.libsonnet';
local fields = {
  field: {
    type: 'string',
    allowedNames: [
      'field',
    ],
  },
  operand: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'operand',
    ],
  },
  test_only: {
    type: 'bool',
    allowedNames: [
      'test_only',
      'testOnly',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withField:: function(val) validator.validateField(self + { field: val }, 'field', type + '.withField'),
    withOperand:: function(val) validator.validateField(self + { operand: val }, 'operand', type + '.withOperand'),
    withTestOnly:: function(val) validator.validateField(self + { test_only: val }, 'test_only', type + '.withTestOnly'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
