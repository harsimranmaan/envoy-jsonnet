// Message type: google.api.expr.v1alpha1.CheckedExpr
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.CheckedExpr';
local generator = import '../generator.libsonnet';
local fields = {
  expr: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'expr',
    ],
  },
  expr_version: {
    type: 'string',
    allowedNames: [
      'expr_version',
      'exprVersion',
    ],
  },
  reference_map: {
    type: 'google.api.expr.v1alpha1.Reference',
    allowedNames: [
      'reference_map',
      'referenceMap',
    ],
    containerType: 'map',
  },
  source_info: {
    type: 'google.api.expr.v1alpha1.SourceInfo',
    allowedNames: [
      'source_info',
      'sourceInfo',
    ],
  },
  type_map: {
    type: 'google.api.expr.v1alpha1.Type',
    allowedNames: [
      'type_map',
      'typeMap',
    ],
    containerType: 'map',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ReferenceMapEntry:: (import 'checked-expr-reference-map-entry.libsonnet').definition,
    TypeMapEntry:: (import 'checked-expr-type-map-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExpr:: function(val) validator.validateField(self + { expr: val }, 'expr', type + '.withExpr'),
    withExprVersion:: function(val) validator.validateField(self + { expr_version: val }, 'expr_version', type + '.withExprVersion'),
    withReferenceMap:: function(val) validator.validateField(self + { reference_map: val }, 'reference_map', type + '.withReferenceMap'),
    withSourceInfo:: function(val) validator.validateField(self + { source_info: val }, 'source_info', type + '.withSourceInfo'),
    withTypeMap:: function(val) validator.validateField(self + { type_map: val }, 'type_map', type + '.withTypeMap'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
