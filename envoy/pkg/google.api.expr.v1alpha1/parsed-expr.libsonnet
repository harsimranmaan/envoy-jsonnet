// Message type: google.api.expr.v1alpha1.ParsedExpr
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.api.expr.v1alpha1.ParsedExpr';
local generator = import '../generator.libsonnet';
local fields = {
  expr: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'expr',
    ],
  },
  source_info: {
    type: 'google.api.expr.v1alpha1.SourceInfo',
    allowedNames: [
      'source_info',
      'sourceInfo',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExpr:: function(val) validator.validateField(self + { expr: val }, 'expr', type + '.withExpr'),
    withSourceInfo:: function(val) validator.validateField(self + { source_info: val }, 'source_info', type + '.withSourceInfo'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
