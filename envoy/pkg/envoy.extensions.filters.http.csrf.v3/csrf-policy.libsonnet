// Message type: envoy.extensions.filters.http.csrf.v3.CsrfPolicy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.csrf.v3.CsrfPolicy';
local generator = import '../generator.libsonnet';
local fields = {
  additional_origins: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'additional_origins',
      'additionalOrigins',
    ],
    containerType: 'list',
  },
  filter_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'filter_enabled',
      'filterEnabled',
    ],
    required: true,
  },
  shadow_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'shadow_enabled',
      'shadowEnabled',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAdditionalOrigins:: function(val) validator.validateField(self + { additional_origins: val }, 'additional_origins', type + '.withAdditionalOrigins'),
    withFilterEnabled:: function(val) validator.validateField(self + { filter_enabled: val }, 'filter_enabled', type + '.withFilterEnabled'),
    withShadowEnabled:: function(val) validator.validateField(self + { shadow_enabled: val }, 'shadow_enabled', type + '.withShadowEnabled'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
