// Message type: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.common.ratelimit.v3.RateLimitDescriptor';
local generator = import '../generator.libsonnet';
local fields = {
  entries: {
    type: 'envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry',
    allowedNames: [
      'entries',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  limit: {
    type: 'envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride',
    allowedNames: [
      'limit',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Entry:: (import 'rate-limit-descriptor-entry.libsonnet').definition,
    RateLimitOverride:: (import 'rate-limit-descriptor-rate-limit-override.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withEntries:: function(val) validator.validateField(self + { entries: val }, 'entries', type + '.withEntries'),
    withLimit:: function(val) validator.validateField(self + { limit: val }, 'limit', type + '.withLimit'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
