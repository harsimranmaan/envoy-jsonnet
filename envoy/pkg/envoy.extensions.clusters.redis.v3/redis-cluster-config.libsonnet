// Message type: envoy.extensions.clusters.redis.v3.RedisClusterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.clusters.redis.v3.RedisClusterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  cluster_refresh_rate: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'cluster_refresh_rate',
      'clusterRefreshRate',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  cluster_refresh_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'cluster_refresh_timeout',
      'clusterRefreshTimeout',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  failure_refresh_threshold: {
    type: 'uint32',
    allowedNames: [
      'failure_refresh_threshold',
      'failureRefreshThreshold',
    ],
  },
  host_degraded_refresh_threshold: {
    type: 'uint32',
    allowedNames: [
      'host_degraded_refresh_threshold',
      'hostDegradedRefreshThreshold',
    ],
  },
  redirect_refresh_interval: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'redirect_refresh_interval',
      'redirectRefreshInterval',
    ],
  },
  redirect_refresh_threshold: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'redirect_refresh_threshold',
      'redirectRefreshThreshold',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClusterRefreshRate:: function(val) validator.validateField(self + { cluster_refresh_rate: val }, 'cluster_refresh_rate', type + '.withClusterRefreshRate'),
    withClusterRefreshTimeout:: function(val) validator.validateField(self + { cluster_refresh_timeout: val }, 'cluster_refresh_timeout', type + '.withClusterRefreshTimeout'),
    withFailureRefreshThreshold:: function(val) validator.validateField(self + { failure_refresh_threshold: val }, 'failure_refresh_threshold', type + '.withFailureRefreshThreshold'),
    withHostDegradedRefreshThreshold:: function(val) validator.validateField(self + { host_degraded_refresh_threshold: val }, 'host_degraded_refresh_threshold', type + '.withHostDegradedRefreshThreshold'),
    withRedirectRefreshInterval:: function(val) validator.validateField(self + { redirect_refresh_interval: val }, 'redirect_refresh_interval', type + '.withRedirectRefreshInterval'),
    withRedirectRefreshThreshold:: function(val) validator.validateField(self + { redirect_refresh_threshold: val }, 'redirect_refresh_threshold', type + '.withRedirectRefreshThreshold'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
