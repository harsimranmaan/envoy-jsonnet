// Message type: envoy.extensions.filters.http.ext_proc.v3.ExtProcOverrides
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ext_proc.v3.ExtProcOverrides';
local generator = import '../generator.libsonnet';
local fields = {
  async_mode: {
    type: 'bool',
    allowedNames: [
      'async_mode',
      'asyncMode',
    ],
  },
  grpc_service: {
    type: 'envoy.config.core.v3.GrpcService',
    allowedNames: [
      'grpc_service',
      'grpcService',
    ],
  },
  processing_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode',
    allowedNames: [
      'processing_mode',
      'processingMode',
    ],
  },
  request_attributes: {
    type: 'string',
    allowedNames: [
      'request_attributes',
      'requestAttributes',
    ],
    containerType: 'list',
  },
  response_attributes: {
    type: 'string',
    allowedNames: [
      'response_attributes',
      'responseAttributes',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAsyncMode:: function(val) validator.validateField(self + { async_mode: val }, 'async_mode', type + '.withAsyncMode'),
    withGrpcService:: function(val) validator.validateField(self + { grpc_service: val }, 'grpc_service', type + '.withGrpcService'),
    withProcessingMode:: function(val) validator.validateField(self + { processing_mode: val }, 'processing_mode', type + '.withProcessingMode'),
    withRequestAttributes:: function(val) validator.validateField(self + { request_attributes: val }, 'request_attributes', type + '.withRequestAttributes'),
    withResponseAttributes:: function(val) validator.validateField(self + { response_attributes: val }, 'response_attributes', type + '.withResponseAttributes'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
