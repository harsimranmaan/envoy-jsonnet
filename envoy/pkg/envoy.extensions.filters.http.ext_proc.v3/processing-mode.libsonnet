// Message type: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode';
local generator = import '../generator.libsonnet';
local fields = {
  request_body_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode',
    allowedNames: [
      'request_body_mode',
      'requestBodyMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  request_header_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode',
    allowedNames: [
      'request_header_mode',
      'requestHeaderMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  request_trailer_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode',
    allowedNames: [
      'request_trailer_mode',
      'requestTrailerMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  response_body_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode',
    allowedNames: [
      'response_body_mode',
      'responseBodyMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  response_header_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode',
    allowedNames: [
      'response_header_mode',
      'responseHeaderMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  response_trailer_mode: {
    type: 'envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode',
    allowedNames: [
      'response_trailer_mode',
      'responseTrailerMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HeaderSendMode:: (import 'processing-mode-header-send-mode.libsonnet').definition,
    BodySendMode:: (import 'processing-mode-body-send-mode.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withRequestBodyMode:: function(val) validator.validateField(self + { request_body_mode: val }, 'request_body_mode', type + '.withRequestBodyMode'),
    withRequestHeaderMode:: function(val) validator.validateField(self + { request_header_mode: val }, 'request_header_mode', type + '.withRequestHeaderMode'),
    withRequestTrailerMode:: function(val) validator.validateField(self + { request_trailer_mode: val }, 'request_trailer_mode', type + '.withRequestTrailerMode'),
    withResponseBodyMode:: function(val) validator.validateField(self + { response_body_mode: val }, 'response_body_mode', type + '.withResponseBodyMode'),
    withResponseHeaderMode:: function(val) validator.validateField(self + { response_header_mode: val }, 'response_header_mode', type + '.withResponseHeaderMode'),
    withResponseTrailerMode:: function(val) validator.validateField(self + { response_trailer_mode: val }, 'response_trailer_mode', type + '.withResponseTrailerMode'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
