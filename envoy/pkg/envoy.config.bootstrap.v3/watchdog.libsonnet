// Message type: envoy.config.bootstrap.v3.Watchdog
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.bootstrap.v3.Watchdog';
local generator = import '../generator.libsonnet';
local fields = {
  actions: {
    type: 'envoy.config.bootstrap.v3.Watchdog.WatchdogAction',
    allowedNames: [
      'actions',
    ],
    containerType: 'list',
  },
  kill_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'kill_timeout',
      'killTimeout',
    ],
  },
  max_kill_timeout_jitter: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'max_kill_timeout_jitter',
      'maxKillTimeoutJitter',
    ],
    constraints: {
      Duration: {
        gte: {},
      },
    },
  },
  megamiss_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'megamiss_timeout',
      'megamissTimeout',
    ],
  },
  miss_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'miss_timeout',
      'missTimeout',
    ],
  },
  multikill_threshold: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'multikill_threshold',
      'multikillThreshold',
    ],
  },
  multikill_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'multikill_timeout',
      'multikillTimeout',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    WatchdogAction:: (import 'watchdog-watchdog-action.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withActions:: function(val) validator.validateField(self + { actions: val }, 'actions', type + '.withActions'),
    withKillTimeout:: function(val) validator.validateField(self + { kill_timeout: val }, 'kill_timeout', type + '.withKillTimeout'),
    withMaxKillTimeoutJitter:: function(val) validator.validateField(self + { max_kill_timeout_jitter: val }, 'max_kill_timeout_jitter', type + '.withMaxKillTimeoutJitter'),
    withMegamissTimeout:: function(val) validator.validateField(self + { megamiss_timeout: val }, 'megamiss_timeout', type + '.withMegamissTimeout'),
    withMissTimeout:: function(val) validator.validateField(self + { miss_timeout: val }, 'miss_timeout', type + '.withMissTimeout'),
    withMultikillThreshold:: function(val) validator.validateField(self + { multikill_threshold: val }, 'multikill_threshold', type + '.withMultikillThreshold'),
    withMultikillTimeout:: function(val) validator.validateField(self + { multikill_timeout: val }, 'multikill_timeout', type + '.withMultikillTimeout'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
