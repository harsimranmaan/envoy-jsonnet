// Message type: envoy.config.bootstrap.v3.Runtime
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.bootstrap.v3.Runtime';
local generator = import '../generator.libsonnet';
local fields = {
  base: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'base',
    ],
  },
  override_subdirectory: {
    type: 'string',
    allowedNames: [
      'override_subdirectory',
      'overrideSubdirectory',
    ],
  },
  subdirectory: {
    type: 'string',
    allowedNames: [
      'subdirectory',
    ],
  },
  symlink_root: {
    type: 'string',
    allowedNames: [
      'symlink_root',
      'symlinkRoot',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBase:: function(val) validator.validateField(self + { base: val }, 'base', type + '.withBase'),
    withOverrideSubdirectory:: function(val) validator.validateField(self + { override_subdirectory: val }, 'override_subdirectory', type + '.withOverrideSubdirectory'),
    withSubdirectory:: function(val) validator.validateField(self + { subdirectory: val }, 'subdirectory', type + '.withSubdirectory'),
    withSymlinkRoot:: function(val) validator.validateField(self + { symlink_root: val }, 'symlink_root', type + '.withSymlinkRoot'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
