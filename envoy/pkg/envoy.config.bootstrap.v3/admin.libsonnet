// Message type: envoy.config.bootstrap.v3.Admin
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.bootstrap.v3.Admin';
local generator = import '../generator.libsonnet';
local fields = {
  access_log: {
    type: 'envoy.config.accesslog.v3.AccessLog',
    allowedNames: [
      'access_log',
      'accessLog',
    ],
    containerType: 'list',
  },
  access_log_path: {
    type: 'string',
    allowedNames: [
      'access_log_path',
      'accessLogPath',
    ],
  },
  address: {
    type: 'envoy.config.core.v3.Address',
    allowedNames: [
      'address',
    ],
  },
  ignore_global_conn_limit: {
    type: 'bool',
    allowedNames: [
      'ignore_global_conn_limit',
      'ignoreGlobalConnLimit',
    ],
  },
  profile_path: {
    type: 'string',
    allowedNames: [
      'profile_path',
      'profilePath',
    ],
  },
  socket_options: {
    type: 'envoy.config.core.v3.SocketOption',
    allowedNames: [
      'socket_options',
      'socketOptions',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccessLog:: function(val) validator.validateField(self + { access_log: val }, 'access_log', type + '.withAccessLog'),
    withAccessLogPath:: function(val) validator.validateField(self + { access_log_path: val }, 'access_log_path', type + '.withAccessLogPath'),
    withAddress:: function(val) validator.validateField(self + { address: val }, 'address', type + '.withAddress'),
    withIgnoreGlobalConnLimit:: function(val) validator.validateField(self + { ignore_global_conn_limit: val }, 'ignore_global_conn_limit', type + '.withIgnoreGlobalConnLimit'),
    withProfilePath:: function(val) validator.validateField(self + { profile_path: val }, 'profile_path', type + '.withProfilePath'),
    withSocketOptions:: function(val) validator.validateField(self + { socket_options: val }, 'socket_options', type + '.withSocketOptions'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
