// Message type: envoy.config.bootstrap.v3.Watchdog.WatchdogAction
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.bootstrap.v3.Watchdog.WatchdogAction';
local generator = import '../generator.libsonnet';
local fields = {
  config: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'config',
    ],
  },
  event: {
    type: 'envoy.config.bootstrap.v3.Watchdog.WatchdogAction.WatchdogEvent',
    allowedNames: [
      'event',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    WatchdogEvent:: (import 'watchdog-watchdog-action-watchdog-event.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConfig:: function(val) validator.validateField(self + { config: val }, 'config', type + '.withConfig'),
    withEvent:: function(val) validator.validateField(self + { event: val }, 'event', type + '.withEvent'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
