// Message type: envoy.config.bootstrap.v3.Bootstrap.StaticResources
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.bootstrap.v3.Bootstrap.StaticResources';
local generator = import '../generator.libsonnet';
local fields = {
  clusters: {
    type: 'envoy.config.cluster.v3.Cluster',
    allowedNames: [
      'clusters',
    ],
    containerType: 'list',
  },
  listeners: {
    type: 'envoy.config.listener.v3.Listener',
    allowedNames: [
      'listeners',
    ],
    containerType: 'list',
  },
  secrets: {
    type: 'envoy.extensions.transport_sockets.tls.v3.Secret',
    allowedNames: [
      'secrets',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClusters:: function(val) validator.validateField(self + { clusters: val }, 'clusters', type + '.withClusters'),
    withListeners:: function(val) validator.validateField(self + { listeners: val }, 'listeners', type + '.withListeners'),
    withSecrets:: function(val) validator.validateField(self + { secrets: val }, 'secrets', type + '.withSecrets'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
