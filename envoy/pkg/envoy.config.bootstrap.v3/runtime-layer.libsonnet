// Message type: envoy.config.bootstrap.v3.RuntimeLayer
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.bootstrap.v3.RuntimeLayer';
local generator = import '../generator.libsonnet';
local fields = {
  admin_layer: {
    type: 'envoy.config.bootstrap.v3.RuntimeLayer.AdminLayer',
    allowedNames: [
      'admin_layer',
      'adminLayer',
    ],
  },
  disk_layer: {
    type: 'envoy.config.bootstrap.v3.RuntimeLayer.DiskLayer',
    allowedNames: [
      'disk_layer',
      'diskLayer',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  rtds_layer: {
    type: 'envoy.config.bootstrap.v3.RuntimeLayer.RtdsLayer',
    allowedNames: [
      'rtds_layer',
      'rtdsLayer',
    ],
  },
  static_layer: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'static_layer',
      'staticLayer',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'static_layer',
      'disk_layer',
      'admin_layer',
      'rtds_layer',
    ],
    required: true,
    group: 'layer_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    DiskLayer:: (import 'runtime-layer-disk-layer.libsonnet').definition,
    AdminLayer:: (import 'runtime-layer-admin-layer.libsonnet').definition,
    RtdsLayer:: (import 'runtime-layer-rtds-layer.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAdminLayer:: function(val) validator.validateField(self + { admin_layer: val }, 'admin_layer', type + '.withAdminLayer'),
    withDiskLayer:: function(val) validator.validateField(self + { disk_layer: val }, 'disk_layer', type + '.withDiskLayer'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withRtdsLayer:: function(val) validator.validateField(self + { rtds_layer: val }, 'rtds_layer', type + '.withRtdsLayer'),
    withStaticLayer:: function(val) validator.validateField(self + { static_layer: val }, 'static_layer', type + '.withStaticLayer'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
