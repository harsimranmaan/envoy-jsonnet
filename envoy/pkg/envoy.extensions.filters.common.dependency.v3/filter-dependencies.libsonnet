// Message type: envoy.extensions.filters.common.dependency.v3.FilterDependencies
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.common.dependency.v3.FilterDependencies';
local generator = import '../generator.libsonnet';
local fields = {
  decode_provided: {
    type: 'envoy.extensions.filters.common.dependency.v3.Dependency',
    allowedNames: [
      'decode_provided',
      'decodeProvided',
    ],
    containerType: 'list',
  },
  decode_required: {
    type: 'envoy.extensions.filters.common.dependency.v3.Dependency',
    allowedNames: [
      'decode_required',
      'decodeRequired',
    ],
    containerType: 'list',
  },
  encode_provided: {
    type: 'envoy.extensions.filters.common.dependency.v3.Dependency',
    allowedNames: [
      'encode_provided',
      'encodeProvided',
    ],
    containerType: 'list',
  },
  encode_required: {
    type: 'envoy.extensions.filters.common.dependency.v3.Dependency',
    allowedNames: [
      'encode_required',
      'encodeRequired',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDecodeProvided:: function(val) validator.validateField(self + { decode_provided: val }, 'decode_provided', type + '.withDecodeProvided'),
    withDecodeRequired:: function(val) validator.validateField(self + { decode_required: val }, 'decode_required', type + '.withDecodeRequired'),
    withEncodeProvided:: function(val) validator.validateField(self + { encode_provided: val }, 'encode_provided', type + '.withEncodeProvided'),
    withEncodeRequired:: function(val) validator.validateField(self + { encode_required: val }, 'encode_required', type + '.withEncodeRequired'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
