// Message type: envoy.extensions.common.matching.v3.ExtensionWithMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.common.matching.v3.ExtensionWithMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  extension_config: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'extension_config',
      'extensionConfig',
    ],
    required: true,
  },
  matcher: {
    type: 'envoy.config.common.matcher.v3.Matcher',
    allowedNames: [
      'matcher',
    ],
  },
  xds_matcher: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'xds_matcher',
      'xdsMatcher',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExtensionConfig:: function(val) validator.validateField(self + { extension_config: val }, 'extension_config', type + '.withExtensionConfig'),
    withMatcher:: function(val) validator.validateField(self + { matcher: val }, 'matcher', type + '.withMatcher'),
    withXdsMatcher:: function(val) validator.validateField(self + { xds_matcher: val }, 'xds_matcher', type + '.withXdsMatcher'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
