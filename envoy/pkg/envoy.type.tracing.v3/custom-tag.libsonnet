// Message type: envoy.type.tracing.v3.CustomTag
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.type.tracing.v3.CustomTag';
local generator = import '../generator.libsonnet';
local fields = {
  environment: {
    type: 'envoy.type.tracing.v3.CustomTag.Environment',
    allowedNames: [
      'environment',
    ],
  },
  literal: {
    type: 'envoy.type.tracing.v3.CustomTag.Literal',
    allowedNames: [
      'literal',
    ],
  },
  metadata: {
    type: 'envoy.type.tracing.v3.CustomTag.Metadata',
    allowedNames: [
      'metadata',
    ],
  },
  request_header: {
    type: 'envoy.type.tracing.v3.CustomTag.Header',
    allowedNames: [
      'request_header',
      'requestHeader',
    ],
  },
  tag: {
    type: 'string',
    allowedNames: [
      'tag',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [
  {
    fields: [
      'literal',
      'environment',
      'request_header',
      'metadata',
    ],
    required: true,
    group: 'type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Literal:: (import 'custom-tag-literal.libsonnet').definition,
    Environment:: (import 'custom-tag-environment.libsonnet').definition,
    Header:: (import 'custom-tag-header.libsonnet').definition,
    Metadata:: (import 'custom-tag-metadata.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withEnvironment:: function(val) validator.validateField(self + { environment: val }, 'environment', type + '.withEnvironment'),
    withLiteral:: function(val) validator.validateField(self + { literal: val }, 'literal', type + '.withLiteral'),
    withMetadata:: function(val) validator.validateField(self + { metadata: val }, 'metadata', type + '.withMetadata'),
    withRequestHeader:: function(val) validator.validateField(self + { request_header: val }, 'request_header', type + '.withRequestHeader'),
    withTag:: function(val) validator.validateField(self + { tag: val }, 'tag', type + '.withTag'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
