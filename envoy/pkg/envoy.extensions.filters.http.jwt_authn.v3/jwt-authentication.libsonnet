// Message type: envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication';
local generator = import '../generator.libsonnet';
local fields = {
  bypass_cors_preflight: {
    type: 'bool',
    allowedNames: [
      'bypass_cors_preflight',
      'bypassCorsPreflight',
    ],
  },
  filter_state_rules: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.FilterStateRule',
    allowedNames: [
      'filter_state_rules',
      'filterStateRules',
    ],
  },
  providers: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.JwtProvider',
    allowedNames: [
      'providers',
    ],
    containerType: 'map',
  },
  requirement_map: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement',
    allowedNames: [
      'requirement_map',
      'requirementMap',
    ],
    containerType: 'map',
  },
  rules: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.RequirementRule',
    allowedNames: [
      'rules',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ProvidersEntry:: (import 'jwt-authentication-providers-entry.libsonnet').definition,
    RequirementMapEntry:: (import 'jwt-authentication-requirement-map-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBypassCorsPreflight:: function(val) validator.validateField(self + { bypass_cors_preflight: val }, 'bypass_cors_preflight', type + '.withBypassCorsPreflight'),
    withFilterStateRules:: function(val) validator.validateField(self + { filter_state_rules: val }, 'filter_state_rules', type + '.withFilterStateRules'),
    withProviders:: function(val) validator.validateField(self + { providers: val }, 'providers', type + '.withProviders'),
    withRequirementMap:: function(val) validator.validateField(self + { requirement_map: val }, 'requirement_map', type + '.withRequirementMap'),
    withRules:: function(val) validator.validateField(self + { rules: val }, 'rules', type + '.withRules'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
