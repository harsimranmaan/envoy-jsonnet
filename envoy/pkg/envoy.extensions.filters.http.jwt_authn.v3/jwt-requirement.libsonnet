// Message type: envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement';
local generator = import '../generator.libsonnet';
local fields = {
  allow_missing: {
    type: 'google.protobuf.Empty',
    allowedNames: [
      'allow_missing',
      'allowMissing',
    ],
  },
  allow_missing_or_failed: {
    type: 'google.protobuf.Empty',
    allowedNames: [
      'allow_missing_or_failed',
      'allowMissingOrFailed',
    ],
  },
  provider_and_audiences: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.ProviderWithAudiences',
    allowedNames: [
      'provider_and_audiences',
      'providerAndAudiences',
    ],
  },
  provider_name: {
    type: 'string',
    allowedNames: [
      'provider_name',
      'providerName',
    ],
  },
  requires_all: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.JwtRequirementAndList',
    allowedNames: [
      'requires_all',
      'requiresAll',
    ],
  },
  requires_any: {
    type: 'envoy.extensions.filters.http.jwt_authn.v3.JwtRequirementOrList',
    allowedNames: [
      'requires_any',
      'requiresAny',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'provider_name',
      'provider_and_audiences',
      'requires_any',
      'requires_all',
      'allow_missing_or_failed',
      'allow_missing',
    ],
    required: false,
    group: 'requires_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowMissing:: function(val) validator.validateField(self + { allow_missing: val }, 'allow_missing', type + '.withAllowMissing'),
    withAllowMissingOrFailed:: function(val) validator.validateField(self + { allow_missing_or_failed: val }, 'allow_missing_or_failed', type + '.withAllowMissingOrFailed'),
    withProviderAndAudiences:: function(val) validator.validateField(self + { provider_and_audiences: val }, 'provider_and_audiences', type + '.withProviderAndAudiences'),
    withProviderName:: function(val) validator.validateField(self + { provider_name: val }, 'provider_name', type + '.withProviderName'),
    withRequiresAll:: function(val) validator.validateField(self + { requires_all: val }, 'requires_all', type + '.withRequiresAll'),
    withRequiresAny:: function(val) validator.validateField(self + { requires_any: val }, 'requires_any', type + '.withRequiresAny'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
