// Message type: envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ext_authz.v3.ExtAuthz';
local generator = import '../generator.libsonnet';
local fields = {
  allowed_headers: {
    type: 'envoy.type.matcher.v3.ListStringMatcher',
    allowedNames: [
      'allowed_headers',
      'allowedHeaders',
    ],
  },
  bootstrap_metadata_labels_key: {
    type: 'string',
    allowedNames: [
      'bootstrap_metadata_labels_key',
      'bootstrapMetadataLabelsKey',
    ],
  },
  clear_route_cache: {
    type: 'bool',
    allowedNames: [
      'clear_route_cache',
      'clearRouteCache',
    ],
  },
  deny_at_disable: {
    type: 'envoy.config.core.v3.RuntimeFeatureFlag',
    allowedNames: [
      'deny_at_disable',
      'denyAtDisable',
    ],
  },
  failure_mode_allow: {
    type: 'bool',
    allowedNames: [
      'failure_mode_allow',
      'failureModeAllow',
    ],
  },
  filter_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'filter_enabled',
      'filterEnabled',
    ],
  },
  filter_enabled_metadata: {
    type: 'envoy.type.matcher.v3.MetadataMatcher',
    allowedNames: [
      'filter_enabled_metadata',
      'filterEnabledMetadata',
    ],
  },
  grpc_service: {
    type: 'envoy.config.core.v3.GrpcService',
    allowedNames: [
      'grpc_service',
      'grpcService',
    ],
  },
  http_service: {
    type: 'envoy.extensions.filters.http.ext_authz.v3.HttpService',
    allowedNames: [
      'http_service',
      'httpService',
    ],
  },
  include_peer_certificate: {
    type: 'bool',
    allowedNames: [
      'include_peer_certificate',
      'includePeerCertificate',
    ],
  },
  metadata_context_namespaces: {
    type: 'string',
    allowedNames: [
      'metadata_context_namespaces',
      'metadataContextNamespaces',
    ],
    containerType: 'list',
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
  },
  status_on_error: {
    type: 'envoy.type.v3.HttpStatus',
    allowedNames: [
      'status_on_error',
      'statusOnError',
    ],
  },
  transport_api_version: {
    type: 'envoy.config.core.v3.ApiVersion',
    allowedNames: [
      'transport_api_version',
      'transportApiVersion',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  typed_metadata_context_namespaces: {
    type: 'string',
    allowedNames: [
      'typed_metadata_context_namespaces',
      'typedMetadataContextNamespaces',
    ],
    containerType: 'list',
  },
  with_request_body: {
    type: 'envoy.extensions.filters.http.ext_authz.v3.BufferSettings',
    allowedNames: [
      'with_request_body',
      'withRequestBody',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'grpc_service',
      'http_service',
    ],
    required: false,
    group: 'services',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowedHeaders:: function(val) validator.validateField(self + { allowed_headers: val }, 'allowed_headers', type + '.withAllowedHeaders'),
    withBootstrapMetadataLabelsKey:: function(val) validator.validateField(self + { bootstrap_metadata_labels_key: val }, 'bootstrap_metadata_labels_key', type + '.withBootstrapMetadataLabelsKey'),
    withClearRouteCache:: function(val) validator.validateField(self + { clear_route_cache: val }, 'clear_route_cache', type + '.withClearRouteCache'),
    withDenyAtDisable:: function(val) validator.validateField(self + { deny_at_disable: val }, 'deny_at_disable', type + '.withDenyAtDisable'),
    withFailureModeAllow:: function(val) validator.validateField(self + { failure_mode_allow: val }, 'failure_mode_allow', type + '.withFailureModeAllow'),
    withFilterEnabled:: function(val) validator.validateField(self + { filter_enabled: val }, 'filter_enabled', type + '.withFilterEnabled'),
    withFilterEnabledMetadata:: function(val) validator.validateField(self + { filter_enabled_metadata: val }, 'filter_enabled_metadata', type + '.withFilterEnabledMetadata'),
    withGrpcService:: function(val) validator.validateField(self + { grpc_service: val }, 'grpc_service', type + '.withGrpcService'),
    withHttpService:: function(val) validator.validateField(self + { http_service: val }, 'http_service', type + '.withHttpService'),
    withIncludePeerCertificate:: function(val) validator.validateField(self + { include_peer_certificate: val }, 'include_peer_certificate', type + '.withIncludePeerCertificate'),
    withMetadataContextNamespaces:: function(val) validator.validateField(self + { metadata_context_namespaces: val }, 'metadata_context_namespaces', type + '.withMetadataContextNamespaces'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withStatusOnError:: function(val) validator.validateField(self + { status_on_error: val }, 'status_on_error', type + '.withStatusOnError'),
    withTransportApiVersion:: function(val) validator.validateField(self + { transport_api_version: val }, 'transport_api_version', type + '.withTransportApiVersion'),
    withTypedMetadataContextNamespaces:: function(val) validator.validateField(self + { typed_metadata_context_namespaces: val }, 'typed_metadata_context_namespaces', type + '.withTypedMetadataContextNamespaces'),
    withWithRequestBody:: function(val) validator.validateField(self + { with_request_body: val }, 'with_request_body', type + '.withWithRequestBody'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
