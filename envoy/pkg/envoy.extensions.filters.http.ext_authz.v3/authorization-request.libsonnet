// Message type: envoy.extensions.filters.http.ext_authz.v3.AuthorizationRequest
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ext_authz.v3.AuthorizationRequest';
local generator = import '../generator.libsonnet';
local fields = {
  allowed_headers: {
    type: 'envoy.type.matcher.v3.ListStringMatcher',
    allowedNames: [
      'allowed_headers',
      'allowedHeaders',
    ],
  },
  headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValue',
    allowedNames: [
      'headers_to_add',
      'headersToAdd',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowedHeaders:: function(val) validator.validateField(self + { allowed_headers: val }, 'allowed_headers', type + '.withAllowedHeaders'),
    withHeadersToAdd:: function(val) validator.validateField(self + { headers_to_add: val }, 'headers_to_add', type + '.withHeadersToAdd'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
