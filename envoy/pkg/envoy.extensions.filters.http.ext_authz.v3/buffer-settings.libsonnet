// Message type: envoy.extensions.filters.http.ext_authz.v3.BufferSettings
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ext_authz.v3.BufferSettings';
local generator = import '../generator.libsonnet';
local fields = {
  allow_partial_message: {
    type: 'bool',
    allowedNames: [
      'allow_partial_message',
      'allowPartialMessage',
    ],
  },
  max_request_bytes: {
    type: 'uint32',
    allowedNames: [
      'max_request_bytes',
      'maxRequestBytes',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
  pack_as_bytes: {
    type: 'bool',
    allowedNames: [
      'pack_as_bytes',
      'packAsBytes',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowPartialMessage:: function(val) validator.validateField(self + { allow_partial_message: val }, 'allow_partial_message', type + '.withAllowPartialMessage'),
    withMaxRequestBytes:: function(val) validator.validateField(self + { max_request_bytes: val }, 'max_request_bytes', type + '.withMaxRequestBytes'),
    withPackAsBytes:: function(val) validator.validateField(self + { pack_as_bytes: val }, 'pack_as_bytes', type + '.withPackAsBytes'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
