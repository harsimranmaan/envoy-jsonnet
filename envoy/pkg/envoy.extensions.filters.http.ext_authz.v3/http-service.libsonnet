// Message type: envoy.extensions.filters.http.ext_authz.v3.HttpService
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ext_authz.v3.HttpService';
local generator = import '../generator.libsonnet';
local fields = {
  authorization_request: {
    type: 'envoy.extensions.filters.http.ext_authz.v3.AuthorizationRequest',
    allowedNames: [
      'authorization_request',
      'authorizationRequest',
    ],
  },
  authorization_response: {
    type: 'envoy.extensions.filters.http.ext_authz.v3.AuthorizationResponse',
    allowedNames: [
      'authorization_response',
      'authorizationResponse',
    ],
  },
  path_prefix: {
    type: 'string',
    allowedNames: [
      'path_prefix',
      'pathPrefix',
    ],
  },
  server_uri: {
    type: 'envoy.config.core.v3.HttpUri',
    allowedNames: [
      'server_uri',
      'serverUri',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAuthorizationRequest:: function(val) validator.validateField(self + { authorization_request: val }, 'authorization_request', type + '.withAuthorizationRequest'),
    withAuthorizationResponse:: function(val) validator.validateField(self + { authorization_response: val }, 'authorization_response', type + '.withAuthorizationResponse'),
    withPathPrefix:: function(val) validator.validateField(self + { path_prefix: val }, 'path_prefix', type + '.withPathPrefix'),
    withServerUri:: function(val) validator.validateField(self + { server_uri: val }, 'server_uri', type + '.withServerUri'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
