// Message type: envoy.extensions.filters.network.dubbo_proxy.v3.RouteConfiguration
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.dubbo_proxy.v3.RouteConfiguration';
local generator = import '../generator.libsonnet';
local fields = {
  group: {
    type: 'string',
    allowedNames: [
      'group',
    ],
  },
  interface: {
    type: 'string',
    allowedNames: [
      'interface',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  routes: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.Route',
    allowedNames: [
      'routes',
    ],
    containerType: 'list',
  },
  version: {
    type: 'string',
    allowedNames: [
      'version',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withGroup:: function(val) validator.validateField(self + { group: val }, 'group', type + '.withGroup'),
    withInterface:: function(val) validator.validateField(self + { interface: val }, 'interface', type + '.withInterface'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withRoutes:: function(val) validator.validateField(self + { routes: val }, 'routes', type + '.withRoutes'),
    withVersion:: function(val) validator.validateField(self + { version: val }, 'version', type + '.withVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
