// Message type: envoy.extensions.filters.network.dubbo_proxy.v3.MethodMatch
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.dubbo_proxy.v3.MethodMatch';
local generator = import '../generator.libsonnet';
local fields = {
  name: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'name',
    ],
  },
  params_match: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.MethodMatch.ParameterMatchSpecifier',
    allowedNames: [
      'params_match',
      'paramsMatch',
    ],
    containerType: 'map',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ParameterMatchSpecifier:: (import 'method-match-parameter-match-specifier.libsonnet').definition,
    ParamsMatchEntry:: (import 'method-match-params-match-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withParamsMatch:: function(val) validator.validateField(self + { params_match: val }, 'params_match', type + '.withParamsMatch'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
