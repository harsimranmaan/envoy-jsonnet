// Message type: envoy.extensions.filters.network.dubbo_proxy.v3.RouteAction
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.dubbo_proxy.v3.RouteAction';
local generator = import '../generator.libsonnet';
local fields = {
  cluster: {
    type: 'string',
    allowedNames: [
      'cluster',
    ],
  },
  metadata_match: {
    type: 'envoy.config.core.v3.Metadata',
    allowedNames: [
      'metadata_match',
      'metadataMatch',
    ],
  },
  weighted_clusters: {
    type: 'envoy.config.route.v3.WeightedCluster',
    allowedNames: [
      'weighted_clusters',
      'weightedClusters',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'cluster',
      'weighted_clusters',
    ],
    required: true,
    group: 'cluster_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCluster:: function(val) validator.validateField(self + { cluster: val }, 'cluster', type + '.withCluster'),
    withMetadataMatch:: function(val) validator.validateField(self + { metadata_match: val }, 'metadata_match', type + '.withMetadataMatch'),
    withWeightedClusters:: function(val) validator.validateField(self + { weighted_clusters: val }, 'weighted_clusters', type + '.withWeightedClusters'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
