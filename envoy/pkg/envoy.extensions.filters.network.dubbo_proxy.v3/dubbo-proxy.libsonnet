// Message type: envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy';
local generator = import '../generator.libsonnet';
local fields = {
  drds: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.Drds',
    allowedNames: [
      'drds',
    ],
  },
  dubbo_filters: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter',
    allowedNames: [
      'dubbo_filters',
      'dubboFilters',
    ],
    containerType: 'list',
  },
  multiple_route_config: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.MultipleRouteConfiguration',
    allowedNames: [
      'multiple_route_config',
      'multipleRouteConfig',
    ],
  },
  protocol_type: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.ProtocolType',
    allowedNames: [
      'protocol_type',
      'protocolType',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  route_config: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.RouteConfiguration',
    allowedNames: [
      'route_config',
      'routeConfig',
    ],
    containerType: 'list',
  },
  serialization_type: {
    type: 'envoy.extensions.filters.network.dubbo_proxy.v3.SerializationType',
    allowedNames: [
      'serialization_type',
      'serializationType',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [
  {
    fields: [
      'drds',
      'multiple_route_config',
    ],
    required: false,
    group: 'route_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDrds:: function(val) validator.validateField(self + { drds: val }, 'drds', type + '.withDrds'),
    withDubboFilters:: function(val) validator.validateField(self + { dubbo_filters: val }, 'dubbo_filters', type + '.withDubboFilters'),
    withMultipleRouteConfig:: function(val) validator.validateField(self + { multiple_route_config: val }, 'multiple_route_config', type + '.withMultipleRouteConfig'),
    withProtocolType:: function(val) validator.validateField(self + { protocol_type: val }, 'protocol_type', type + '.withProtocolType'),
    withRouteConfig:: function(val) validator.validateField(self + { route_config: val }, 'route_config', type + '.withRouteConfig'),
    withSerializationType:: function(val) validator.validateField(self + { serialization_type: val }, 'serialization_type', type + '.withSerializationType'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
