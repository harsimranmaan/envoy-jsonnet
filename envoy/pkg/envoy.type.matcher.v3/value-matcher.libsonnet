// Message type: envoy.type.matcher.v3.ValueMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.type.matcher.v3.ValueMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  bool_match: {
    type: 'bool',
    allowedNames: [
      'bool_match',
      'boolMatch',
    ],
  },
  double_match: {
    type: 'envoy.type.matcher.v3.DoubleMatcher',
    allowedNames: [
      'double_match',
      'doubleMatch',
    ],
  },
  list_match: {
    type: 'envoy.type.matcher.v3.ListMatcher',
    allowedNames: [
      'list_match',
      'listMatch',
    ],
  },
  null_match: {
    type: 'envoy.type.matcher.v3.ValueMatcher.NullMatch',
    allowedNames: [
      'null_match',
      'nullMatch',
    ],
  },
  present_match: {
    type: 'bool',
    allowedNames: [
      'present_match',
      'presentMatch',
    ],
  },
  string_match: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'string_match',
      'stringMatch',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'null_match',
      'double_match',
      'string_match',
      'bool_match',
      'present_match',
      'list_match',
    ],
    required: true,
    group: 'match_pattern',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    NullMatch:: (import 'value-matcher-null-match.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBoolMatch:: function(val) validator.validateField(self + { bool_match: val }, 'bool_match', type + '.withBoolMatch'),
    withDoubleMatch:: function(val) validator.validateField(self + { double_match: val }, 'double_match', type + '.withDoubleMatch'),
    withListMatch:: function(val) validator.validateField(self + { list_match: val }, 'list_match', type + '.withListMatch'),
    withNullMatch:: function(val) validator.validateField(self + { null_match: val }, 'null_match', type + '.withNullMatch'),
    withPresentMatch:: function(val) validator.validateField(self + { present_match: val }, 'present_match', type + '.withPresentMatch'),
    withStringMatch:: function(val) validator.validateField(self + { string_match: val }, 'string_match', type + '.withStringMatch'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
