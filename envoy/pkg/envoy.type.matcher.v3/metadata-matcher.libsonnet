// Message type: envoy.type.matcher.v3.MetadataMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.type.matcher.v3.MetadataMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  filter: {
    type: 'string',
    allowedNames: [
      'filter',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  invert: {
    type: 'bool',
    allowedNames: [
      'invert',
    ],
  },
  path: {
    type: 'envoy.type.matcher.v3.MetadataMatcher.PathSegment',
    allowedNames: [
      'path',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  value: {
    type: 'envoy.type.matcher.v3.ValueMatcher',
    allowedNames: [
      'value',
    ],
    required: true,
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    PathSegment:: (import 'metadata-matcher-path-segment.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFilter:: function(val) validator.validateField(self + { filter: val }, 'filter', type + '.withFilter'),
    withInvert:: function(val) validator.validateField(self + { invert: val }, 'invert', type + '.withInvert'),
    withPath:: function(val) validator.validateField(self + { path: val }, 'path', type + '.withPath'),
    withValue:: function(val) validator.validateField(self + { value: val }, 'value', type + '.withValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
