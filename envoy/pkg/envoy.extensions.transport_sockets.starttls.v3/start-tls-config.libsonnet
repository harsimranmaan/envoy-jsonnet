// Message type: envoy.extensions.transport_sockets.starttls.v3.StartTlsConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.transport_sockets.starttls.v3.StartTlsConfig';
local generator = import '../generator.libsonnet';
local fields = {
  cleartext_socket_config: {
    type: 'envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer',
    allowedNames: [
      'cleartext_socket_config',
      'cleartextSocketConfig',
    ],
  },
  tls_socket_config: {
    type: 'envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext',
    allowedNames: [
      'tls_socket_config',
      'tlsSocketConfig',
    ],
    required: true,
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCleartextSocketConfig:: function(val) validator.validateField(self + { cleartext_socket_config: val }, 'cleartext_socket_config', type + '.withCleartextSocketConfig'),
    withTlsSocketConfig:: function(val) validator.validateField(self + { tls_socket_config: val }, 'tls_socket_config', type + '.withTlsSocketConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
