// Message type: envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig';
local generator = import '../generator.libsonnet';
local fields = {
  headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'headers_to_add',
      'headersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  hostname: {
    type: 'string',
    allowedNames: [
      'hostname',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  post_path: {
    type: 'string',
    allowedNames: [
      'post_path',
      'postPath',
    ],
  },
  propagate_response_headers: {
    type: 'bool',
    allowedNames: [
      'propagate_response_headers',
      'propagateResponseHeaders',
    ],
  },
  use_post: {
    type: 'bool',
    allowedNames: [
      'use_post',
      'usePost',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHeadersToAdd:: function(val) validator.validateField(self + { headers_to_add: val }, 'headers_to_add', type + '.withHeadersToAdd'),
    withHostname:: function(val) validator.validateField(self + { hostname: val }, 'hostname', type + '.withHostname'),
    withPostPath:: function(val) validator.validateField(self + { post_path: val }, 'post_path', type + '.withPostPath'),
    withPropagateResponseHeaders:: function(val) validator.validateField(self + { propagate_response_headers: val }, 'propagate_response_headers', type + '.withPropagateResponseHeaders'),
    withUsePost:: function(val) validator.validateField(self + { use_post: val }, 'use_post', type + '.withUsePost'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
