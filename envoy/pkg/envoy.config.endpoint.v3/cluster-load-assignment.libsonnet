// Message type: envoy.config.endpoint.v3.ClusterLoadAssignment
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.endpoint.v3.ClusterLoadAssignment';
local generator = import '../generator.libsonnet';
local fields = {
  cluster_name: {
    type: 'string',
    allowedNames: [
      'cluster_name',
      'clusterName',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  endpoints: {
    type: 'envoy.config.endpoint.v3.LocalityLbEndpoints',
    allowedNames: [
      'endpoints',
    ],
    containerType: 'list',
  },
  named_endpoints: {
    type: 'envoy.config.endpoint.v3.Endpoint',
    allowedNames: [
      'named_endpoints',
      'namedEndpoints',
    ],
    containerType: 'map',
  },
  policy: {
    type: 'envoy.config.endpoint.v3.ClusterLoadAssignment.Policy',
    allowedNames: [
      'policy',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Policy:: (import 'cluster-load-assignment-policy.libsonnet').definition,
    NamedEndpointsEntry:: (import 'cluster-load-assignment-named-endpoints-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClusterName:: function(val) validator.validateField(self + { cluster_name: val }, 'cluster_name', type + '.withClusterName'),
    withEndpoints:: function(val) validator.validateField(self + { endpoints: val }, 'endpoints', type + '.withEndpoints'),
    withNamedEndpoints:: function(val) validator.validateField(self + { named_endpoints: val }, 'named_endpoints', type + '.withNamedEndpoints'),
    withPolicy:: function(val) validator.validateField(self + { policy: val }, 'policy', type + '.withPolicy'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
