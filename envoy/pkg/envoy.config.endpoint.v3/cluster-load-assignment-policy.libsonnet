// Message type: envoy.config.endpoint.v3.ClusterLoadAssignment.Policy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.endpoint.v3.ClusterLoadAssignment.Policy';
local generator = import '../generator.libsonnet';
local fields = {
  drop_overloads: {
    type: 'envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload',
    allowedNames: [
      'drop_overloads',
      'dropOverloads',
    ],
    containerType: 'list',
  },
  endpoint_stale_after: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'endpoint_stale_after',
      'endpointStaleAfter',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  overprovisioning_factor: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'overprovisioning_factor',
      'overprovisioningFactor',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    DropOverload:: (import 'cluster-load-assignment-policy-drop-overload.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDropOverloads:: function(val) validator.validateField(self + { drop_overloads: val }, 'drop_overloads', type + '.withDropOverloads'),
    withEndpointStaleAfter:: function(val) validator.validateField(self + { endpoint_stale_after: val }, 'endpoint_stale_after', type + '.withEndpointStaleAfter'),
    withOverprovisioningFactor:: function(val) validator.validateField(self + { overprovisioning_factor: val }, 'overprovisioning_factor', type + '.withOverprovisioningFactor'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
