// Message type: envoy.config.endpoint.v3.Endpoint
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.endpoint.v3.Endpoint';
local generator = import '../generator.libsonnet';
local fields = {
  address: {
    type: 'envoy.config.core.v3.Address',
    allowedNames: [
      'address',
    ],
  },
  health_check_config: {
    type: 'envoy.config.endpoint.v3.Endpoint.HealthCheckConfig',
    allowedNames: [
      'health_check_config',
      'healthCheckConfig',
    ],
  },
  hostname: {
    type: 'string',
    allowedNames: [
      'hostname',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HealthCheckConfig:: (import 'endpoint-health-check-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAddress:: function(val) validator.validateField(self + { address: val }, 'address', type + '.withAddress'),
    withHealthCheckConfig:: function(val) validator.validateField(self + { health_check_config: val }, 'health_check_config', type + '.withHealthCheckConfig'),
    withHostname:: function(val) validator.validateField(self + { hostname: val }, 'hostname', type + '.withHostname'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
