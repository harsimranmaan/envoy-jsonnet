// Message type: envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol';
local generator = import '../generator.libsonnet';
local fields = {
  allow_requests_without_proxy_protocol: {
    type: 'bool',
    allowedNames: [
      'allow_requests_without_proxy_protocol',
      'allowRequestsWithoutProxyProtocol',
    ],
  },
  rules: {
    type: 'envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule',
    allowedNames: [
      'rules',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    KeyValuePair:: (import 'proxy-protocol-key-value-pair.libsonnet').definition,
    Rule:: (import 'proxy-protocol-rule.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowRequestsWithoutProxyProtocol:: function(val) validator.validateField(self + { allow_requests_without_proxy_protocol: val }, 'allow_requests_without_proxy_protocol', type + '.withAllowRequestsWithoutProxyProtocol'),
    withRules:: function(val) validator.validateField(self + { rules: val }, 'rules', type + '.withRules'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
