// Message type: envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule';
local generator = import '../generator.libsonnet';
local fields = {
  on_tlv_present: {
    type: 'envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair',
    allowedNames: [
      'on_tlv_present',
      'onTlvPresent',
    ],
  },
  tlv_type: {
    type: 'uint32',
    allowedNames: [
      'tlv_type',
      'tlvType',
    ],
    constraints: {
      Uint32: {
        lt: 256,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withOnTlvPresent:: function(val) validator.validateField(self + { on_tlv_present: val }, 'on_tlv_present', type + '.withOnTlvPresent'),
    withTlvType:: function(val) validator.validateField(self + { tlv_type: val }, 'tlv_type', type + '.withTlvType'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
