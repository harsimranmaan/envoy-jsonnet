// Message type: envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit';
local generator = import '../generator.libsonnet';
local fields = {
  enable_mode: {
    type: 'envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit.EnableMode',
    allowedNames: [
      'enable_mode',
      'enableMode',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  enable_response_trailers: {
    type: 'bool',
    allowedNames: [
      'enable_response_trailers',
      'enableResponseTrailers',
    ],
  },
  fill_interval: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'fill_interval',
      'fillInterval',
    ],
    constraints: {
      Duration: {
        gte: {
          nanos: 20000000,
        },
        lte: {
          seconds: 1,
        },
      },
    },
  },
  limit_kbps: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'limit_kbps',
      'limitKbps',
    ],
    constraints: {
      Uint64: {
        gte: 1,
      },
    },
  },
  response_trailer_prefix: {
    type: 'string',
    allowedNames: [
      'response_trailer_prefix',
      'responseTrailerPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        strict: false,
      },
    },
  },
  runtime_enabled: {
    type: 'envoy.config.core.v3.RuntimeFeatureFlag',
    allowedNames: [
      'runtime_enabled',
      'runtimeEnabled',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    EnableMode:: (import 'bandwidth-limit-enable-mode.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withEnableMode:: function(val) validator.validateField(self + { enable_mode: val }, 'enable_mode', type + '.withEnableMode'),
    withEnableResponseTrailers:: function(val) validator.validateField(self + { enable_response_trailers: val }, 'enable_response_trailers', type + '.withEnableResponseTrailers'),
    withFillInterval:: function(val) validator.validateField(self + { fill_interval: val }, 'fill_interval', type + '.withFillInterval'),
    withLimitKbps:: function(val) validator.validateField(self + { limit_kbps: val }, 'limit_kbps', type + '.withLimitKbps'),
    withResponseTrailerPrefix:: function(val) validator.validateField(self + { response_trailer_prefix: val }, 'response_trailer_prefix', type + '.withResponseTrailerPrefix'),
    withRuntimeEnabled:: function(val) validator.validateField(self + { runtime_enabled: val }, 'runtime_enabled', type + '.withRuntimeEnabled'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
