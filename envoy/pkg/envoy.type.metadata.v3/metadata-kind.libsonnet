// Message type: envoy.type.metadata.v3.MetadataKind
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.type.metadata.v3.MetadataKind';
local generator = import '../generator.libsonnet';
local fields = {
  cluster: {
    type: 'envoy.type.metadata.v3.MetadataKind.Cluster',
    allowedNames: [
      'cluster',
    ],
  },
  host: {
    type: 'envoy.type.metadata.v3.MetadataKind.Host',
    allowedNames: [
      'host',
    ],
  },
  request: {
    type: 'envoy.type.metadata.v3.MetadataKind.Request',
    allowedNames: [
      'request',
    ],
  },
  route: {
    type: 'envoy.type.metadata.v3.MetadataKind.Route',
    allowedNames: [
      'route',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'request',
      'route',
      'cluster',
      'host',
    ],
    required: true,
    group: 'kind',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Request:: (import 'metadata-kind-request.libsonnet').definition,
    Route:: (import 'metadata-kind-route.libsonnet').definition,
    Cluster:: (import 'metadata-kind-cluster.libsonnet').definition,
    Host:: (import 'metadata-kind-host.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCluster:: function(val) validator.validateField(self + { cluster: val }, 'cluster', type + '.withCluster'),
    withHost:: function(val) validator.validateField(self + { host: val }, 'host', type + '.withHost'),
    withRequest:: function(val) validator.validateField(self + { request: val }, 'request', type + '.withRequest'),
    withRoute:: function(val) validator.validateField(self + { route: val }, 'route', type + '.withRoute'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
