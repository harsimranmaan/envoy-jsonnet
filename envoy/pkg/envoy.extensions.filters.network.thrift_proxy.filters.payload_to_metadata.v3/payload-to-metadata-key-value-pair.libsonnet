// Message type: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair';
local generator = import '../generator.libsonnet';
local fields = {
  key: {
    type: 'string',
    allowedNames: [
      'key',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  metadata_namespace: {
    type: 'string',
    allowedNames: [
      'metadata_namespace',
      'metadataNamespace',
    ],
  },
  regex_value_rewrite: {
    type: 'envoy.type.matcher.v3.RegexMatchAndSubstitute',
    allowedNames: [
      'regex_value_rewrite',
      'regexValueRewrite',
    ],
  },
  type: {
    type: 'envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType',
    allowedNames: [
      'type',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  value: {
    type: 'string',
    allowedNames: [
      'value',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'value',
      'regex_value_rewrite',
    ],
    required: false,
    group: 'value_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withKey:: function(val) validator.validateField(self + { key: val }, 'key', type + '.withKey'),
    withMetadataNamespace:: function(val) validator.validateField(self + { metadata_namespace: val }, 'metadata_namespace', type + '.withMetadataNamespace'),
    withRegexValueRewrite:: function(val) validator.validateField(self + { regex_value_rewrite: val }, 'regex_value_rewrite', type + '.withRegexValueRewrite'),
    withType:: function(val) validator.validateField(self + { type: val }, 'type', type + '.withType'),
    withValue:: function(val) validator.validateField(self + { value: val }, 'value', type + '.withValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
