// Message type: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule';
local generator = import '../generator.libsonnet';
local fields = {
  field_selector: {
    type: 'envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector',
    allowedNames: [
      'field_selector',
      'fieldSelector',
    ],
    required: true,
  },
  method_name: {
    type: 'string',
    allowedNames: [
      'method_name',
      'methodName',
    ],
  },
  on_missing: {
    type: 'envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair',
    allowedNames: [
      'on_missing',
      'onMissing',
    ],
  },
  on_present: {
    type: 'envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair',
    allowedNames: [
      'on_present',
      'onPresent',
    ],
  },
  service_name: {
    type: 'string',
    allowedNames: [
      'service_name',
      'serviceName',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'method_name',
      'service_name',
    ],
    required: true,
    group: 'match_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFieldSelector:: function(val) validator.validateField(self + { field_selector: val }, 'field_selector', type + '.withFieldSelector'),
    withMethodName:: function(val) validator.validateField(self + { method_name: val }, 'method_name', type + '.withMethodName'),
    withOnMissing:: function(val) validator.validateField(self + { on_missing: val }, 'on_missing', type + '.withOnMissing'),
    withOnPresent:: function(val) validator.validateField(self + { on_present: val }, 'on_present', type + '.withOnPresent'),
    withServiceName:: function(val) validator.validateField(self + { service_name: val }, 'service_name', type + '.withServiceName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
