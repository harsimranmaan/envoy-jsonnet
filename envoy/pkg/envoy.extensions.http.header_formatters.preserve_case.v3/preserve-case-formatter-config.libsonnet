// Message type: envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  formatter_type_on_envoy_headers: {
    type: 'envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig.FormatterTypeOnEnvoyHeaders',
    allowedNames: [
      'formatter_type_on_envoy_headers',
      'formatterTypeOnEnvoyHeaders',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  forward_reason_phrase: {
    type: 'bool',
    allowedNames: [
      'forward_reason_phrase',
      'forwardReasonPhrase',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    FormatterTypeOnEnvoyHeaders:: (import 'preserve-case-formatter-config-formatter-type-on-envoy-headers.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFormatterTypeOnEnvoyHeaders:: function(val) validator.validateField(self + { formatter_type_on_envoy_headers: val }, 'formatter_type_on_envoy_headers', type + '.withFormatterTypeOnEnvoyHeaders'),
    withForwardReasonPhrase:: function(val) validator.validateField(self + { forward_reason_phrase: val }, 'forward_reason_phrase', type + '.withForwardReasonPhrase'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
