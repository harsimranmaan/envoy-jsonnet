// Message type: envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig';
local generator = import '../generator.libsonnet';
local fields = {
  host_rewrite_header: {
    type: 'string',
    allowedNames: [
      'host_rewrite_header',
      'hostRewriteHeader',
    ],
  },
  host_rewrite_literal: {
    type: 'string',
    allowedNames: [
      'host_rewrite_literal',
      'hostRewriteLiteral',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'host_rewrite_literal',
      'host_rewrite_header',
    ],
    required: false,
    group: 'host_rewrite_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHostRewriteHeader:: function(val) validator.validateField(self + { host_rewrite_header: val }, 'host_rewrite_header', type + '.withHostRewriteHeader'),
    withHostRewriteLiteral:: function(val) validator.validateField(self + { host_rewrite_literal: val }, 'host_rewrite_literal', type + '.withHostRewriteLiteral'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
