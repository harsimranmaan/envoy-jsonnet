// Message type: envoy.data.dns.v3.DnsTable
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.data.dns.v3.DnsTable';
local generator = import '../generator.libsonnet';
local fields = {
  external_retry_count: {
    type: 'uint32',
    allowedNames: [
      'external_retry_count',
      'externalRetryCount',
    ],
    constraints: {
      Uint32: {
        lte: 3,
      },
    },
  },
  known_suffixes: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'known_suffixes',
      'knownSuffixes',
    ],
    containerType: 'list',
  },
  virtual_domains: {
    type: 'envoy.data.dns.v3.DnsTable.DnsVirtualDomain',
    allowedNames: [
      'virtual_domains',
      'virtualDomains',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    AddressList:: (import 'dns-table-address-list.libsonnet').definition,
    DnsServiceProtocol:: (import 'dns-table-dns-service-protocol.libsonnet').definition,
    DnsServiceTarget:: (import 'dns-table-dns-service-target.libsonnet').definition,
    DnsService:: (import 'dns-table-dns-service.libsonnet').definition,
    DnsServiceList:: (import 'dns-table-dns-service-list.libsonnet').definition,
    DnsEndpoint:: (import 'dns-table-dns-endpoint.libsonnet').definition,
    DnsVirtualDomain:: (import 'dns-table-dns-virtual-domain.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExternalRetryCount:: function(val) validator.validateField(self + { external_retry_count: val }, 'external_retry_count', type + '.withExternalRetryCount'),
    withKnownSuffixes:: function(val) validator.validateField(self + { known_suffixes: val }, 'known_suffixes', type + '.withKnownSuffixes'),
    withVirtualDomains:: function(val) validator.validateField(self + { virtual_domains: val }, 'virtual_domains', type + '.withVirtualDomains'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
