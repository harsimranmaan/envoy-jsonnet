// Message type: envoy.data.dns.v3.DnsTable.DnsService
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.data.dns.v3.DnsTable.DnsService';
local generator = import '../generator.libsonnet';
local fields = {
  protocol: {
    type: 'envoy.data.dns.v3.DnsTable.DnsServiceProtocol',
    allowedNames: [
      'protocol',
    ],
  },
  service_name: {
    type: 'string',
    allowedNames: [
      'service_name',
      'serviceName',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        min_len: 1,
      },
    },
  },
  targets: {
    type: 'envoy.data.dns.v3.DnsTable.DnsServiceTarget',
    allowedNames: [
      'targets',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  ttl: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'ttl',
    ],
    constraints: {
      Duration: {
        gte: {
          seconds: 1,
        },
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withProtocol:: function(val) validator.validateField(self + { protocol: val }, 'protocol', type + '.withProtocol'),
    withServiceName:: function(val) validator.validateField(self + { service_name: val }, 'service_name', type + '.withServiceName'),
    withTargets:: function(val) validator.validateField(self + { targets: val }, 'targets', type + '.withTargets'),
    withTtl:: function(val) validator.validateField(self + { ttl: val }, 'ttl', type + '.withTtl'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
