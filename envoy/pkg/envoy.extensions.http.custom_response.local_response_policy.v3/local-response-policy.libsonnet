// Message type: envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy';
local generator = import '../generator.libsonnet';
local fields = {
  body: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'body',
    ],
  },
  body_format: {
    type: 'envoy.config.core.v3.SubstitutionFormatString',
    allowedNames: [
      'body_format',
      'bodyFormat',
    ],
  },
  response_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'response_headers_to_add',
      'responseHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1000,
      },
    },
  },
  status_code: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'status_code',
      'statusCode',
    ],
    constraints: {
      Uint32: {
        gte: 200,
        lt: 600,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBody:: function(val) validator.validateField(self + { body: val }, 'body', type + '.withBody'),
    withBodyFormat:: function(val) validator.validateField(self + { body_format: val }, 'body_format', type + '.withBodyFormat'),
    withResponseHeadersToAdd:: function(val) validator.validateField(self + { response_headers_to_add: val }, 'response_headers_to_add', type + '.withResponseHeadersToAdd'),
    withStatusCode:: function(val) validator.validateField(self + { status_code: val }, 'status_code', type + '.withStatusCode'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
