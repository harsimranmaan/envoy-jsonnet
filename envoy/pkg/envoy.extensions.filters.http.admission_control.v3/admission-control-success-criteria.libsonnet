// Message type: envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria';
local generator = import '../generator.libsonnet';
local fields = {
  grpc_criteria: {
    type: 'envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria.GrpcCriteria',
    allowedNames: [
      'grpc_criteria',
      'grpcCriteria',
    ],
  },
  http_criteria: {
    type: 'envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria.HttpCriteria',
    allowedNames: [
      'http_criteria',
      'httpCriteria',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HttpCriteria:: (import 'admission-control-success-criteria-http-criteria.libsonnet').definition,
    GrpcCriteria:: (import 'admission-control-success-criteria-grpc-criteria.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withGrpcCriteria:: function(val) validator.validateField(self + { grpc_criteria: val }, 'grpc_criteria', type + '.withGrpcCriteria'),
    withHttpCriteria:: function(val) validator.validateField(self + { http_criteria: val }, 'http_criteria', type + '.withHttpCriteria'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
