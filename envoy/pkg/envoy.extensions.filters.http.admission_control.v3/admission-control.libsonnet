// Message type: envoy.extensions.filters.http.admission_control.v3.AdmissionControl
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.admission_control.v3.AdmissionControl';
local generator = import '../generator.libsonnet';
local fields = {
  aggression: {
    type: 'envoy.config.core.v3.RuntimeDouble',
    allowedNames: [
      'aggression',
    ],
  },
  enabled: {
    type: 'envoy.config.core.v3.RuntimeFeatureFlag',
    allowedNames: [
      'enabled',
    ],
  },
  max_rejection_probability: {
    type: 'envoy.config.core.v3.RuntimePercent',
    allowedNames: [
      'max_rejection_probability',
      'maxRejectionProbability',
    ],
  },
  rps_threshold: {
    type: 'envoy.config.core.v3.RuntimeUInt32',
    allowedNames: [
      'rps_threshold',
      'rpsThreshold',
    ],
  },
  sampling_window: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'sampling_window',
      'samplingWindow',
    ],
  },
  sr_threshold: {
    type: 'envoy.config.core.v3.RuntimePercent',
    allowedNames: [
      'sr_threshold',
      'srThreshold',
    ],
  },
  success_criteria: {
    type: 'envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria',
    allowedNames: [
      'success_criteria',
      'successCriteria',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'success_criteria',
    ],
    required: true,
    group: 'evaluation_criteria',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    SuccessCriteria:: (import 'admission-control-success-criteria.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAggression:: function(val) validator.validateField(self + { aggression: val }, 'aggression', type + '.withAggression'),
    withEnabled:: function(val) validator.validateField(self + { enabled: val }, 'enabled', type + '.withEnabled'),
    withMaxRejectionProbability:: function(val) validator.validateField(self + { max_rejection_probability: val }, 'max_rejection_probability', type + '.withMaxRejectionProbability'),
    withRpsThreshold:: function(val) validator.validateField(self + { rps_threshold: val }, 'rps_threshold', type + '.withRpsThreshold'),
    withSamplingWindow:: function(val) validator.validateField(self + { sampling_window: val }, 'sampling_window', type + '.withSamplingWindow'),
    withSrThreshold:: function(val) validator.validateField(self + { sr_threshold: val }, 'sr_threshold', type + '.withSrThreshold'),
    withSuccessCriteria:: function(val) validator.validateField(self + { success_criteria: val }, 'success_criteria', type + '.withSuccessCriteria'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
