// Message type: envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  allow_coalesced_connections: {
    type: 'bool',
    allowedNames: [
      'allow_coalesced_connections',
      'allowCoalescedConnections',
    ],
  },
  allow_insecure_cluster_options: {
    type: 'bool',
    allowedNames: [
      'allow_insecure_cluster_options',
      'allowInsecureClusterOptions',
    ],
  },
  dns_cache_config: {
    type: 'envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig',
    allowedNames: [
      'dns_cache_config',
      'dnsCacheConfig',
    ],
    required: true,
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowCoalescedConnections:: function(val) validator.validateField(self + { allow_coalesced_connections: val }, 'allow_coalesced_connections', type + '.withAllowCoalescedConnections'),
    withAllowInsecureClusterOptions:: function(val) validator.validateField(self + { allow_insecure_cluster_options: val }, 'allow_insecure_cluster_options', type + '.withAllowInsecureClusterOptions'),
    withDnsCacheConfig:: function(val) validator.validateField(self + { dns_cache_config: val }, 'dns_cache_config', type + '.withDnsCacheConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
