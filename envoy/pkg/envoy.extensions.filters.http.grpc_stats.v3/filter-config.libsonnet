// Message type: envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.grpc_stats.v3.FilterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  emit_filter_state: {
    type: 'bool',
    allowedNames: [
      'emit_filter_state',
      'emitFilterState',
    ],
  },
  enable_upstream_stats: {
    type: 'bool',
    allowedNames: [
      'enable_upstream_stats',
      'enableUpstreamStats',
    ],
  },
  individual_method_stats_allowlist: {
    type: 'envoy.config.core.v3.GrpcMethodList',
    allowedNames: [
      'individual_method_stats_allowlist',
      'individualMethodStatsAllowlist',
    ],
  },
  replace_dots_in_grpc_service_name: {
    type: 'bool',
    allowedNames: [
      'replace_dots_in_grpc_service_name',
      'replaceDotsInGrpcServiceName',
    ],
  },
  stats_for_all_methods: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'stats_for_all_methods',
      'statsForAllMethods',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'individual_method_stats_allowlist',
      'stats_for_all_methods',
    ],
    required: false,
    group: 'per_method_stat_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withEmitFilterState:: function(val) validator.validateField(self + { emit_filter_state: val }, 'emit_filter_state', type + '.withEmitFilterState'),
    withEnableUpstreamStats:: function(val) validator.validateField(self + { enable_upstream_stats: val }, 'enable_upstream_stats', type + '.withEnableUpstreamStats'),
    withIndividualMethodStatsAllowlist:: function(val) validator.validateField(self + { individual_method_stats_allowlist: val }, 'individual_method_stats_allowlist', type + '.withIndividualMethodStatsAllowlist'),
    withReplaceDotsInGrpcServiceName:: function(val) validator.validateField(self + { replace_dots_in_grpc_service_name: val }, 'replace_dots_in_grpc_service_name', type + '.withReplaceDotsInGrpcServiceName'),
    withStatsForAllMethods:: function(val) validator.validateField(self + { stats_for_all_methods: val }, 'stats_for_all_methods', type + '.withStatsForAllMethods'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
