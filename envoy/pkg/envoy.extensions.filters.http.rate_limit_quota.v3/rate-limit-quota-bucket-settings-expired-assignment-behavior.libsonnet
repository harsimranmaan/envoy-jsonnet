// Message type: envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior';
local generator = import '../generator.libsonnet';
local fields = {
  expired_assignment_behavior_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'expired_assignment_behavior_timeout',
      'expiredAssignmentBehaviorTimeout',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  fallback_rate_limit: {
    type: 'envoy.type.v3.RateLimitStrategy',
    allowedNames: [
      'fallback_rate_limit',
      'fallbackRateLimit',
    ],
  },
  reuse_last_assignment: {
    type: 'envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior.ReuseLastAssignment',
    allowedNames: [
      'reuse_last_assignment',
      'reuseLastAssignment',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'fallback_rate_limit',
      'reuse_last_assignment',
    ],
    required: true,
    group: 'expired_assignment_behavior',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ReuseLastAssignment:: (import 'rate-limit-quota-bucket-settings-expired-assignment-behavior-reuse-last-assignment.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExpiredAssignmentBehaviorTimeout:: function(val) validator.validateField(self + { expired_assignment_behavior_timeout: val }, 'expired_assignment_behavior_timeout', type + '.withExpiredAssignmentBehaviorTimeout'),
    withFallbackRateLimit:: function(val) validator.validateField(self + { fallback_rate_limit: val }, 'fallback_rate_limit', type + '.withFallbackRateLimit'),
    withReuseLastAssignment:: function(val) validator.validateField(self + { reuse_last_assignment: val }, 'reuse_last_assignment', type + '.withReuseLastAssignment'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
