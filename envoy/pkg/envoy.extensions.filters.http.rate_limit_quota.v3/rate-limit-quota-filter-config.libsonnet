// Message type: envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  bucket_matchers: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'bucket_matchers',
      'bucketMatchers',
    ],
    required: true,
  },
  domain: {
    type: 'string',
    allowedNames: [
      'domain',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  filter_enabled: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'filter_enabled',
      'filterEnabled',
    ],
  },
  filter_enforced: {
    type: 'envoy.config.core.v3.RuntimeFractionalPercent',
    allowedNames: [
      'filter_enforced',
      'filterEnforced',
    ],
  },
  request_headers_to_add_when_not_enforced: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'request_headers_to_add_when_not_enforced',
      'requestHeadersToAddWhenNotEnforced',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 10,
      },
    },
  },
  rlqs_server: {
    type: 'envoy.config.core.v3.GrpcService',
    allowedNames: [
      'rlqs_server',
      'rlqsServer',
    ],
    required: true,
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBucketMatchers:: function(val) validator.validateField(self + { bucket_matchers: val }, 'bucket_matchers', type + '.withBucketMatchers'),
    withDomain:: function(val) validator.validateField(self + { domain: val }, 'domain', type + '.withDomain'),
    withFilterEnabled:: function(val) validator.validateField(self + { filter_enabled: val }, 'filter_enabled', type + '.withFilterEnabled'),
    withFilterEnforced:: function(val) validator.validateField(self + { filter_enforced: val }, 'filter_enforced', type + '.withFilterEnforced'),
    withRequestHeadersToAddWhenNotEnforced:: function(val) validator.validateField(self + { request_headers_to_add_when_not_enforced: val }, 'request_headers_to_add_when_not_enforced', type + '.withRequestHeadersToAddWhenNotEnforced'),
    withRlqsServer:: function(val) validator.validateField(self + { rlqs_server: val }, 'rlqs_server', type + '.withRlqsServer'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
