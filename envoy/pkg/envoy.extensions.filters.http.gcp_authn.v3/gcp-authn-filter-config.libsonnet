// Message type: envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  cache_config: {
    type: 'envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig',
    allowedNames: [
      'cache_config',
      'cacheConfig',
    ],
  },
  http_uri: {
    type: 'envoy.config.core.v3.HttpUri',
    allowedNames: [
      'http_uri',
      'httpUri',
    ],
    required: true,
  },
  retry_policy: {
    type: 'envoy.config.core.v3.RetryPolicy',
    allowedNames: [
      'retry_policy',
      'retryPolicy',
    ],
  },
  token_header: {
    type: 'envoy.extensions.filters.http.gcp_authn.v3.TokenHeader',
    allowedNames: [
      'token_header',
      'tokenHeader',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCacheConfig:: function(val) validator.validateField(self + { cache_config: val }, 'cache_config', type + '.withCacheConfig'),
    withHttpUri:: function(val) validator.validateField(self + { http_uri: val }, 'http_uri', type + '.withHttpUri'),
    withRetryPolicy:: function(val) validator.validateField(self + { retry_policy: val }, 'retry_policy', type + '.withRetryPolicy'),
    withTokenHeader:: function(val) validator.validateField(self + { token_header: val }, 'token_header', type + '.withTokenHeader'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
