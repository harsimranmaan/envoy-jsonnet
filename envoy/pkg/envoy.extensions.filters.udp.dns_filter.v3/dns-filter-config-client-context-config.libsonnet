// Message type: envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig';
local generator = import '../generator.libsonnet';
local fields = {
  dns_resolution_config: {
    type: 'envoy.config.core.v3.DnsResolutionConfig',
    allowedNames: [
      'dns_resolution_config',
      'dnsResolutionConfig',
    ],
  },
  max_pending_lookups: {
    type: 'uint64',
    allowedNames: [
      'max_pending_lookups',
      'maxPendingLookups',
    ],
    constraints: {
      Uint64: {
        gte: 1,
      },
    },
  },
  resolver_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'resolver_timeout',
      'resolverTimeout',
    ],
    constraints: {
      Duration: {
        gte: {
          seconds: 1,
        },
      },
    },
  },
  typed_dns_resolver_config: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'typed_dns_resolver_config',
      'typedDnsResolverConfig',
    ],
  },
  upstream_resolvers: {
    type: 'envoy.config.core.v3.Address',
    allowedNames: [
      'upstream_resolvers',
      'upstreamResolvers',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDnsResolutionConfig:: function(val) validator.validateField(self + { dns_resolution_config: val }, 'dns_resolution_config', type + '.withDnsResolutionConfig'),
    withMaxPendingLookups:: function(val) validator.validateField(self + { max_pending_lookups: val }, 'max_pending_lookups', type + '.withMaxPendingLookups'),
    withResolverTimeout:: function(val) validator.validateField(self + { resolver_timeout: val }, 'resolver_timeout', type + '.withResolverTimeout'),
    withTypedDnsResolverConfig:: function(val) validator.validateField(self + { typed_dns_resolver_config: val }, 'typed_dns_resolver_config', type + '.withTypedDnsResolverConfig'),
    withUpstreamResolvers:: function(val) validator.validateField(self + { upstream_resolvers: val }, 'upstream_resolvers', type + '.withUpstreamResolvers'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
