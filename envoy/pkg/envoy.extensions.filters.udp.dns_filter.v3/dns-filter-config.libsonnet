// Message type: envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig';
local generator = import '../generator.libsonnet';
local fields = {
  client_config: {
    type: 'envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig',
    allowedNames: [
      'client_config',
      'clientConfig',
    ],
  },
  server_config: {
    type: 'envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig',
    allowedNames: [
      'server_config',
      'serverConfig',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ServerContextConfig:: (import 'dns-filter-config-server-context-config.libsonnet').definition,
    ClientContextConfig:: (import 'dns-filter-config-client-context-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClientConfig:: function(val) validator.validateField(self + { client_config: val }, 'client_config', type + '.withClientConfig'),
    withServerConfig:: function(val) validator.validateField(self + { server_config: val }, 'server_config', type + '.withServerConfig'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
