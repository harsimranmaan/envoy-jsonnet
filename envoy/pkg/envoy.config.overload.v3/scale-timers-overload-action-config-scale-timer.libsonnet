// Message type: envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer';
local generator = import '../generator.libsonnet';
local fields = {
  min_scale: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'min_scale',
      'minScale',
    ],
  },
  min_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'min_timeout',
      'minTimeout',
    ],
  },
  timer: {
    type: 'envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType',
    allowedNames: [
      'timer',
    ],
    constraints: {
      Enum: {
        defined_only: true,
        not_in: [
          0,
        ],
      },
    },
  },
};
local oneOfs = [
  {
    fields: [
      'min_timeout',
      'min_scale',
    ],
    required: true,
    group: 'overload_adjust',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withMinScale:: function(val) validator.validateField(self + { min_scale: val }, 'min_scale', type + '.withMinScale'),
    withMinTimeout:: function(val) validator.validateField(self + { min_timeout: val }, 'min_timeout', type + '.withMinTimeout'),
    withTimer:: function(val) validator.validateField(self + { timer: val }, 'timer', type + '.withTimer'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
