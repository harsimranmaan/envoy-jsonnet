// Message type: envoy.config.overload.v3.OverloadManager
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.overload.v3.OverloadManager';
local generator = import '../generator.libsonnet';
local fields = {
  actions: {
    type: 'envoy.config.overload.v3.OverloadAction',
    allowedNames: [
      'actions',
    ],
    containerType: 'list',
  },
  buffer_factory_config: {
    type: 'envoy.config.overload.v3.BufferFactoryConfig',
    allowedNames: [
      'buffer_factory_config',
      'bufferFactoryConfig',
    ],
  },
  refresh_interval: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'refresh_interval',
      'refreshInterval',
    ],
  },
  resource_monitors: {
    type: 'envoy.config.overload.v3.ResourceMonitor',
    allowedNames: [
      'resource_monitors',
      'resourceMonitors',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withActions:: function(val) validator.validateField(self + { actions: val }, 'actions', type + '.withActions'),
    withBufferFactoryConfig:: function(val) validator.validateField(self + { buffer_factory_config: val }, 'buffer_factory_config', type + '.withBufferFactoryConfig'),
    withRefreshInterval:: function(val) validator.validateField(self + { refresh_interval: val }, 'refresh_interval', type + '.withRefreshInterval'),
    withResourceMonitors:: function(val) validator.validateField(self + { resource_monitors: val }, 'resource_monitors', type + '.withResourceMonitors'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
