// Message type: google.protobuf.UninterpretedOption
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.UninterpretedOption';
local generator = import '../generator.libsonnet';
local fields = {
  aggregate_value: {
    type: 'string',
    allowedNames: [
      'aggregate_value',
      'aggregateValue',
    ],
  },
  double_value: {
    type: 'double',
    allowedNames: [
      'double_value',
      'doubleValue',
    ],
  },
  identifier_value: {
    type: 'string',
    allowedNames: [
      'identifier_value',
      'identifierValue',
    ],
  },
  name: {
    type: 'google.protobuf.UninterpretedOption.NamePart',
    allowedNames: [
      'name',
    ],
    containerType: 'list',
  },
  negative_int_value: {
    type: 'int64',
    allowedNames: [
      'negative_int_value',
      'negativeIntValue',
    ],
  },
  positive_int_value: {
    type: 'uint64',
    allowedNames: [
      'positive_int_value',
      'positiveIntValue',
    ],
  },
  string_value: {
    type: 'bytes',
    allowedNames: [
      'string_value',
      'stringValue',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    NamePart:: (import 'uninterpreted-option-name-part.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAggregateValue:: function(val) validator.validateField(self + { aggregate_value: val }, 'aggregate_value', type + '.withAggregateValue'),
    withDoubleValue:: function(val) validator.validateField(self + { double_value: val }, 'double_value', type + '.withDoubleValue'),
    withIdentifierValue:: function(val) validator.validateField(self + { identifier_value: val }, 'identifier_value', type + '.withIdentifierValue'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withNegativeIntValue:: function(val) validator.validateField(self + { negative_int_value: val }, 'negative_int_value', type + '.withNegativeIntValue'),
    withPositiveIntValue:: function(val) validator.validateField(self + { positive_int_value: val }, 'positive_int_value', type + '.withPositiveIntValue'),
    withStringValue:: function(val) validator.validateField(self + { string_value: val }, 'string_value', type + '.withStringValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
