// Message type: google.protobuf.MethodDescriptorProto
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.MethodDescriptorProto';
local generator = import '../generator.libsonnet';
local fields = {
  client_streaming: {
    type: 'bool',
    allowedNames: [
      'client_streaming',
      'clientStreaming',
    ],
  },
  input_type: {
    type: 'string',
    allowedNames: [
      'input_type',
      'inputType',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  options: {
    type: 'google.protobuf.MethodOptions',
    allowedNames: [
      'options',
    ],
  },
  output_type: {
    type: 'string',
    allowedNames: [
      'output_type',
      'outputType',
    ],
  },
  server_streaming: {
    type: 'bool',
    allowedNames: [
      'server_streaming',
      'serverStreaming',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withClientStreaming:: function(val) validator.validateField(self + { client_streaming: val }, 'client_streaming', type + '.withClientStreaming'),
    withInputType:: function(val) validator.validateField(self + { input_type: val }, 'input_type', type + '.withInputType'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withOptions:: function(val) validator.validateField(self + { options: val }, 'options', type + '.withOptions'),
    withOutputType:: function(val) validator.validateField(self + { output_type: val }, 'output_type', type + '.withOutputType'),
    withServerStreaming:: function(val) validator.validateField(self + { server_streaming: val }, 'server_streaming', type + '.withServerStreaming'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
