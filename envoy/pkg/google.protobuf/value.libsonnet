// Message type: google.protobuf.Value
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.Value';
local generator = import '../generator.libsonnet';
local fields = {
  bool_value: {
    type: 'bool',
    allowedNames: [
      'bool_value',
      'boolValue',
    ],
  },
  list_value: {
    type: 'google.protobuf.ListValue',
    allowedNames: [
      'list_value',
      'listValue',
    ],
  },
  null_value: {
    type: 'google.protobuf.NullValue',
    allowedNames: [
      'null_value',
      'nullValue',
    ],
  },
  number_value: {
    type: 'double',
    allowedNames: [
      'number_value',
      'numberValue',
    ],
  },
  string_value: {
    type: 'string',
    allowedNames: [
      'string_value',
      'stringValue',
    ],
  },
  struct_value: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'struct_value',
      'structValue',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'null_value',
      'number_value',
      'string_value',
      'bool_value',
      'struct_value',
      'list_value',
    ],
    required: false,
    group: 'kind',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBoolValue:: function(val) validator.validateField(self + { bool_value: val }, 'bool_value', type + '.withBoolValue'),
    withListValue:: function(val) validator.validateField(self + { list_value: val }, 'list_value', type + '.withListValue'),
    withNullValue:: function(val) validator.validateField(self + { null_value: val }, 'null_value', type + '.withNullValue'),
    withNumberValue:: function(val) validator.validateField(self + { number_value: val }, 'number_value', type + '.withNumberValue'),
    withStringValue:: function(val) validator.validateField(self + { string_value: val }, 'string_value', type + '.withStringValue'),
    withStructValue:: function(val) validator.validateField(self + { struct_value: val }, 'struct_value', type + '.withStructValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
