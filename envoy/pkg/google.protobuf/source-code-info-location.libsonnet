// Message type: google.protobuf.SourceCodeInfo.Location
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.SourceCodeInfo.Location';
local generator = import '../generator.libsonnet';
local fields = {
  leading_comments: {
    type: 'string',
    allowedNames: [
      'leading_comments',
      'leadingComments',
    ],
  },
  leading_detached_comments: {
    type: 'string',
    allowedNames: [
      'leading_detached_comments',
      'leadingDetachedComments',
    ],
    containerType: 'list',
  },
  path: {
    type: 'int32',
    allowedNames: [
      'path',
    ],
    containerType: 'list',
  },
  span: {
    type: 'int32',
    allowedNames: [
      'span',
    ],
    containerType: 'list',
  },
  trailing_comments: {
    type: 'string',
    allowedNames: [
      'trailing_comments',
      'trailingComments',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withLeadingComments:: function(val) validator.validateField(self + { leading_comments: val }, 'leading_comments', type + '.withLeadingComments'),
    withLeadingDetachedComments:: function(val) validator.validateField(self + { leading_detached_comments: val }, 'leading_detached_comments', type + '.withLeadingDetachedComments'),
    withPath:: function(val) validator.validateField(self + { path: val }, 'path', type + '.withPath'),
    withSpan:: function(val) validator.validateField(self + { span: val }, 'span', type + '.withSpan'),
    withTrailingComments:: function(val) validator.validateField(self + { trailing_comments: val }, 'trailing_comments', type + '.withTrailingComments'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
