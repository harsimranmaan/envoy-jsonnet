// Message type: google.protobuf.FieldOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.FieldOptions';
local generator = import '../generator.libsonnet';
local fields = {
  ctype: {
    type: 'google.protobuf.FieldOptions.CType',
    allowedNames: [
      'ctype',
    ],
  },
  deprecated: {
    type: 'bool',
    allowedNames: [
      'deprecated',
    ],
  },
  jstype: {
    type: 'google.protobuf.FieldOptions.JSType',
    allowedNames: [
      'jstype',
    ],
  },
  lazy: {
    type: 'bool',
    allowedNames: [
      'lazy',
    ],
  },
  packed: {
    type: 'bool',
    allowedNames: [
      'packed',
    ],
  },
  uninterpreted_option: {
    type: 'google.protobuf.UninterpretedOption',
    allowedNames: [
      'uninterpreted_option',
      'uninterpretedOption',
    ],
    containerType: 'list',
  },
  unverified_lazy: {
    type: 'bool',
    allowedNames: [
      'unverified_lazy',
      'unverifiedLazy',
    ],
  },
  weak: {
    type: 'bool',
    allowedNames: [
      'weak',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    CType:: (import 'field-options-c-type.libsonnet').definition,
    JSType:: (import 'field-options-js-type.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCtype:: function(val) validator.validateField(self + { ctype: val }, 'ctype', type + '.withCtype'),
    withDeprecated:: function(val) validator.validateField(self + { deprecated: val }, 'deprecated', type + '.withDeprecated'),
    withJstype:: function(val) validator.validateField(self + { jstype: val }, 'jstype', type + '.withJstype'),
    withLazy:: function(val) validator.validateField(self + { lazy: val }, 'lazy', type + '.withLazy'),
    withPacked:: function(val) validator.validateField(self + { packed: val }, 'packed', type + '.withPacked'),
    withUninterpretedOption:: function(val) validator.validateField(self + { uninterpreted_option: val }, 'uninterpreted_option', type + '.withUninterpretedOption'),
    withUnverifiedLazy:: function(val) validator.validateField(self + { unverified_lazy: val }, 'unverified_lazy', type + '.withUnverifiedLazy'),
    withWeak:: function(val) validator.validateField(self + { weak: val }, 'weak', type + '.withWeak'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
