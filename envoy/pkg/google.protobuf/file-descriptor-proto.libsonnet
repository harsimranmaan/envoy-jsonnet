// Message type: google.protobuf.FileDescriptorProto
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.FileDescriptorProto';
local generator = import '../generator.libsonnet';
local fields = {
  dependency: {
    type: 'string',
    allowedNames: [
      'dependency',
    ],
    containerType: 'list',
  },
  enum_type: {
    type: 'google.protobuf.EnumDescriptorProto',
    allowedNames: [
      'enum_type',
      'enumType',
    ],
    containerType: 'list',
  },
  extension: {
    type: 'google.protobuf.FieldDescriptorProto',
    allowedNames: [
      'extension',
    ],
    containerType: 'list',
  },
  message_type: {
    type: 'google.protobuf.DescriptorProto',
    allowedNames: [
      'message_type',
      'messageType',
    ],
    containerType: 'list',
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  options: {
    type: 'google.protobuf.FileOptions',
    allowedNames: [
      'options',
    ],
  },
  package: {
    type: 'string',
    allowedNames: [
      'package',
    ],
  },
  public_dependency: {
    type: 'int32',
    allowedNames: [
      'public_dependency',
      'publicDependency',
    ],
    containerType: 'list',
  },
  service: {
    type: 'google.protobuf.ServiceDescriptorProto',
    allowedNames: [
      'service',
    ],
    containerType: 'list',
  },
  source_code_info: {
    type: 'google.protobuf.SourceCodeInfo',
    allowedNames: [
      'source_code_info',
      'sourceCodeInfo',
    ],
  },
  syntax: {
    type: 'string',
    allowedNames: [
      'syntax',
    ],
  },
  weak_dependency: {
    type: 'int32',
    allowedNames: [
      'weak_dependency',
      'weakDependency',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDependency:: function(val) validator.validateField(self + { dependency: val }, 'dependency', type + '.withDependency'),
    withEnumType:: function(val) validator.validateField(self + { enum_type: val }, 'enum_type', type + '.withEnumType'),
    withExtension:: function(val) validator.validateField(self + { extension: val }, 'extension', type + '.withExtension'),
    withMessageType:: function(val) validator.validateField(self + { message_type: val }, 'message_type', type + '.withMessageType'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withOptions:: function(val) validator.validateField(self + { options: val }, 'options', type + '.withOptions'),
    withPackage:: function(val) validator.validateField(self + { package: val }, 'package', type + '.withPackage'),
    withPublicDependency:: function(val) validator.validateField(self + { public_dependency: val }, 'public_dependency', type + '.withPublicDependency'),
    withService:: function(val) validator.validateField(self + { service: val }, 'service', type + '.withService'),
    withSourceCodeInfo:: function(val) validator.validateField(self + { source_code_info: val }, 'source_code_info', type + '.withSourceCodeInfo'),
    withSyntax:: function(val) validator.validateField(self + { syntax: val }, 'syntax', type + '.withSyntax'),
    withWeakDependency:: function(val) validator.validateField(self + { weak_dependency: val }, 'weak_dependency', type + '.withWeakDependency'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
