// Message type: google.protobuf.FileOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'google.protobuf.FileOptions';
local generator = import '../generator.libsonnet';
local fields = {
  cc_enable_arenas: {
    type: 'bool',
    allowedNames: [
      'cc_enable_arenas',
      'ccEnableArenas',
    ],
  },
  cc_generic_services: {
    type: 'bool',
    allowedNames: [
      'cc_generic_services',
      'ccGenericServices',
    ],
  },
  csharp_namespace: {
    type: 'string',
    allowedNames: [
      'csharp_namespace',
      'csharpNamespace',
    ],
  },
  deprecated: {
    type: 'bool',
    allowedNames: [
      'deprecated',
    ],
  },
  go_package: {
    type: 'string',
    allowedNames: [
      'go_package',
      'goPackage',
    ],
  },
  java_generate_equals_and_hash: {
    type: 'bool',
    allowedNames: [
      'java_generate_equals_and_hash',
      'javaGenerateEqualsAndHash',
    ],
  },
  java_generic_services: {
    type: 'bool',
    allowedNames: [
      'java_generic_services',
      'javaGenericServices',
    ],
  },
  java_multiple_files: {
    type: 'bool',
    allowedNames: [
      'java_multiple_files',
      'javaMultipleFiles',
    ],
  },
  java_outer_classname: {
    type: 'string',
    allowedNames: [
      'java_outer_classname',
      'javaOuterClassname',
    ],
  },
  java_package: {
    type: 'string',
    allowedNames: [
      'java_package',
      'javaPackage',
    ],
  },
  java_string_check_utf8: {
    type: 'bool',
    allowedNames: [
      'java_string_check_utf8',
      'javaStringCheckUtf8',
    ],
  },
  objc_class_prefix: {
    type: 'string',
    allowedNames: [
      'objc_class_prefix',
      'objcClassPrefix',
    ],
  },
  optimize_for: {
    type: 'google.protobuf.FileOptions.OptimizeMode',
    allowedNames: [
      'optimize_for',
      'optimizeFor',
    ],
  },
  php_class_prefix: {
    type: 'string',
    allowedNames: [
      'php_class_prefix',
      'phpClassPrefix',
    ],
  },
  php_generic_services: {
    type: 'bool',
    allowedNames: [
      'php_generic_services',
      'phpGenericServices',
    ],
  },
  php_metadata_namespace: {
    type: 'string',
    allowedNames: [
      'php_metadata_namespace',
      'phpMetadataNamespace',
    ],
  },
  php_namespace: {
    type: 'string',
    allowedNames: [
      'php_namespace',
      'phpNamespace',
    ],
  },
  py_generic_services: {
    type: 'bool',
    allowedNames: [
      'py_generic_services',
      'pyGenericServices',
    ],
  },
  ruby_package: {
    type: 'string',
    allowedNames: [
      'ruby_package',
      'rubyPackage',
    ],
  },
  swift_prefix: {
    type: 'string',
    allowedNames: [
      'swift_prefix',
      'swiftPrefix',
    ],
  },
  uninterpreted_option: {
    type: 'google.protobuf.UninterpretedOption',
    allowedNames: [
      'uninterpreted_option',
      'uninterpretedOption',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    OptimizeMode:: (import 'file-options-optimize-mode.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCcEnableArenas:: function(val) validator.validateField(self + { cc_enable_arenas: val }, 'cc_enable_arenas', type + '.withCcEnableArenas'),
    withCcGenericServices:: function(val) validator.validateField(self + { cc_generic_services: val }, 'cc_generic_services', type + '.withCcGenericServices'),
    withCsharpNamespace:: function(val) validator.validateField(self + { csharp_namespace: val }, 'csharp_namespace', type + '.withCsharpNamespace'),
    withDeprecated:: function(val) validator.validateField(self + { deprecated: val }, 'deprecated', type + '.withDeprecated'),
    withGoPackage:: function(val) validator.validateField(self + { go_package: val }, 'go_package', type + '.withGoPackage'),
    withJavaGenerateEqualsAndHash:: function(val) validator.validateField(self + { java_generate_equals_and_hash: val }, 'java_generate_equals_and_hash', type + '.withJavaGenerateEqualsAndHash'),
    withJavaGenericServices:: function(val) validator.validateField(self + { java_generic_services: val }, 'java_generic_services', type + '.withJavaGenericServices'),
    withJavaMultipleFiles:: function(val) validator.validateField(self + { java_multiple_files: val }, 'java_multiple_files', type + '.withJavaMultipleFiles'),
    withJavaOuterClassname:: function(val) validator.validateField(self + { java_outer_classname: val }, 'java_outer_classname', type + '.withJavaOuterClassname'),
    withJavaPackage:: function(val) validator.validateField(self + { java_package: val }, 'java_package', type + '.withJavaPackage'),
    withJavaStringCheckUtf8:: function(val) validator.validateField(self + { java_string_check_utf8: val }, 'java_string_check_utf8', type + '.withJavaStringCheckUtf8'),
    withObjcClassPrefix:: function(val) validator.validateField(self + { objc_class_prefix: val }, 'objc_class_prefix', type + '.withObjcClassPrefix'),
    withOptimizeFor:: function(val) validator.validateField(self + { optimize_for: val }, 'optimize_for', type + '.withOptimizeFor'),
    withPhpClassPrefix:: function(val) validator.validateField(self + { php_class_prefix: val }, 'php_class_prefix', type + '.withPhpClassPrefix'),
    withPhpGenericServices:: function(val) validator.validateField(self + { php_generic_services: val }, 'php_generic_services', type + '.withPhpGenericServices'),
    withPhpMetadataNamespace:: function(val) validator.validateField(self + { php_metadata_namespace: val }, 'php_metadata_namespace', type + '.withPhpMetadataNamespace'),
    withPhpNamespace:: function(val) validator.validateField(self + { php_namespace: val }, 'php_namespace', type + '.withPhpNamespace'),
    withPyGenericServices:: function(val) validator.validateField(self + { py_generic_services: val }, 'py_generic_services', type + '.withPyGenericServices'),
    withRubyPackage:: function(val) validator.validateField(self + { ruby_package: val }, 'ruby_package', type + '.withRubyPackage'),
    withSwiftPrefix:: function(val) validator.validateField(self + { swift_prefix: val }, 'swift_prefix', type + '.withSwiftPrefix'),
    withUninterpretedOption:: function(val) validator.validateField(self + { uninterpreted_option: val }, 'uninterpreted_option', type + '.withUninterpretedOption'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
