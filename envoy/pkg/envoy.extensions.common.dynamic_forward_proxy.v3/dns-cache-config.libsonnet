// Message type: envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig';
local generator = import '../generator.libsonnet';
local fields = {
  dns_cache_circuit_breaker: {
    type: 'envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers',
    allowedNames: [
      'dns_cache_circuit_breaker',
      'dnsCacheCircuitBreaker',
    ],
  },
  dns_failure_refresh_rate: {
    type: 'envoy.config.cluster.v3.Cluster.RefreshRate',
    allowedNames: [
      'dns_failure_refresh_rate',
      'dnsFailureRefreshRate',
    ],
  },
  dns_lookup_family: {
    type: 'envoy.config.cluster.v3.Cluster.DnsLookupFamily',
    allowedNames: [
      'dns_lookup_family',
      'dnsLookupFamily',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  dns_min_refresh_rate: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'dns_min_refresh_rate',
      'dnsMinRefreshRate',
    ],
    constraints: {
      Duration: {
        gte: {
          seconds: 5,
        },
      },
    },
  },
  dns_query_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'dns_query_timeout',
      'dnsQueryTimeout',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  dns_refresh_rate: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'dns_refresh_rate',
      'dnsRefreshRate',
    ],
    constraints: {
      Duration: {
        gte: {
          nanos: 1000000,
        },
      },
    },
  },
  dns_resolution_config: {
    type: 'envoy.config.core.v3.DnsResolutionConfig',
    allowedNames: [
      'dns_resolution_config',
      'dnsResolutionConfig',
    ],
  },
  host_ttl: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'host_ttl',
      'hostTtl',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  key_value_config: {
    type: 'envoy.config.common.key_value.v3.KeyValueStoreConfig',
    allowedNames: [
      'key_value_config',
      'keyValueConfig',
    ],
  },
  max_hosts: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_hosts',
      'maxHosts',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  preresolve_hostnames: {
    type: 'envoy.config.core.v3.SocketAddress',
    allowedNames: [
      'preresolve_hostnames',
      'preresolveHostnames',
    ],
    containerType: 'list',
  },
  typed_dns_resolver_config: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'typed_dns_resolver_config',
      'typedDnsResolverConfig',
    ],
  },
  use_tcp_for_dns_lookups: {
    type: 'bool',
    allowedNames: [
      'use_tcp_for_dns_lookups',
      'useTcpForDnsLookups',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDnsCacheCircuitBreaker:: function(val) validator.validateField(self + { dns_cache_circuit_breaker: val }, 'dns_cache_circuit_breaker', type + '.withDnsCacheCircuitBreaker'),
    withDnsFailureRefreshRate:: function(val) validator.validateField(self + { dns_failure_refresh_rate: val }, 'dns_failure_refresh_rate', type + '.withDnsFailureRefreshRate'),
    withDnsLookupFamily:: function(val) validator.validateField(self + { dns_lookup_family: val }, 'dns_lookup_family', type + '.withDnsLookupFamily'),
    withDnsMinRefreshRate:: function(val) validator.validateField(self + { dns_min_refresh_rate: val }, 'dns_min_refresh_rate', type + '.withDnsMinRefreshRate'),
    withDnsQueryTimeout:: function(val) validator.validateField(self + { dns_query_timeout: val }, 'dns_query_timeout', type + '.withDnsQueryTimeout'),
    withDnsRefreshRate:: function(val) validator.validateField(self + { dns_refresh_rate: val }, 'dns_refresh_rate', type + '.withDnsRefreshRate'),
    withDnsResolutionConfig:: function(val) validator.validateField(self + { dns_resolution_config: val }, 'dns_resolution_config', type + '.withDnsResolutionConfig'),
    withHostTtl:: function(val) validator.validateField(self + { host_ttl: val }, 'host_ttl', type + '.withHostTtl'),
    withKeyValueConfig:: function(val) validator.validateField(self + { key_value_config: val }, 'key_value_config', type + '.withKeyValueConfig'),
    withMaxHosts:: function(val) validator.validateField(self + { max_hosts: val }, 'max_hosts', type + '.withMaxHosts'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withPreresolveHostnames:: function(val) validator.validateField(self + { preresolve_hostnames: val }, 'preresolve_hostnames', type + '.withPreresolveHostnames'),
    withTypedDnsResolverConfig:: function(val) validator.validateField(self + { typed_dns_resolver_config: val }, 'typed_dns_resolver_config', type + '.withTypedDnsResolverConfig'),
    withUseTcpForDnsLookups:: function(val) validator.validateField(self + { use_tcp_for_dns_lookups: val }, 'use_tcp_for_dns_lookups', type + '.withUseTcpForDnsLookups'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
