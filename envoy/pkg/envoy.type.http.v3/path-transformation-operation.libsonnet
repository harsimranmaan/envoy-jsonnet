// Message type: envoy.type.http.v3.PathTransformation.Operation
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.type.http.v3.PathTransformation.Operation';
local generator = import '../generator.libsonnet';
local fields = {
  merge_slashes: {
    type: 'envoy.type.http.v3.PathTransformation.Operation.MergeSlashes',
    allowedNames: [
      'merge_slashes',
      'mergeSlashes',
    ],
  },
  normalize_path_rfc_3986: {
    type: 'envoy.type.http.v3.PathTransformation.Operation.NormalizePathRFC3986',
    allowedNames: [
      'normalize_path_rfc_3986',
      'normalizePathRfc3986',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'normalize_path_rfc_3986',
      'merge_slashes',
    ],
    required: true,
    group: 'operation_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    NormalizePathRFC3986:: (import 'path-transformation-operation-normalize-path-rfc-3986.libsonnet').definition,
    MergeSlashes:: (import 'path-transformation-operation-merge-slashes.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withMergeSlashes:: function(val) validator.validateField(self + { merge_slashes: val }, 'merge_slashes', type + '.withMergeSlashes'),
    withNormalizePathRfc3986:: function(val) validator.validateField(self + { normalize_path_rfc_3986: val }, 'normalize_path_rfc_3986', type + '.withNormalizePathRfc3986'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
