// Message type: envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams';
local generator = import '../generator.libsonnet';
local fields = {
  exclude_host: {
    type: 'bool',
    allowedNames: [
      'exclude_host',
      'excludeHost',
    ],
  },
  exclude_scheme: {
    type: 'bool',
    allowedNames: [
      'exclude_scheme',
      'excludeScheme',
    ],
  },
  query_parameters_excluded: {
    type: 'envoy.config.route.v3.QueryParameterMatcher',
    allowedNames: [
      'query_parameters_excluded',
      'queryParametersExcluded',
    ],
    containerType: 'list',
  },
  query_parameters_included: {
    type: 'envoy.config.route.v3.QueryParameterMatcher',
    allowedNames: [
      'query_parameters_included',
      'queryParametersIncluded',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExcludeHost:: function(val) validator.validateField(self + { exclude_host: val }, 'exclude_host', type + '.withExcludeHost'),
    withExcludeScheme:: function(val) validator.validateField(self + { exclude_scheme: val }, 'exclude_scheme', type + '.withExcludeScheme'),
    withQueryParametersExcluded:: function(val) validator.validateField(self + { query_parameters_excluded: val }, 'query_parameters_excluded', type + '.withQueryParametersExcluded'),
    withQueryParametersIncluded:: function(val) validator.validateField(self + { query_parameters_included: val }, 'query_parameters_included', type + '.withQueryParametersIncluded'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
