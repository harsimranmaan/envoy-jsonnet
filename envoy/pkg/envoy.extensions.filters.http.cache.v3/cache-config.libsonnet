// Message type: envoy.extensions.filters.http.cache.v3.CacheConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.cache.v3.CacheConfig';
local generator = import '../generator.libsonnet';
local fields = {
  allowed_vary_headers: {
    type: 'envoy.type.matcher.v3.StringMatcher',
    allowedNames: [
      'allowed_vary_headers',
      'allowedVaryHeaders',
    ],
    containerType: 'list',
  },
  key_creator_params: {
    type: 'envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams',
    allowedNames: [
      'key_creator_params',
      'keyCreatorParams',
    ],
  },
  max_body_bytes: {
    type: 'uint32',
    allowedNames: [
      'max_body_bytes',
      'maxBodyBytes',
    ],
  },
  typed_config: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'typed_config',
      'typedConfig',
    ],
    constraints: {
      Any: {
        required: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    KeyCreatorParams:: (import 'cache-config-key-creator-params.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowedVaryHeaders:: function(val) validator.validateField(self + { allowed_vary_headers: val }, 'allowed_vary_headers', type + '.withAllowedVaryHeaders'),
    withKeyCreatorParams:: function(val) validator.validateField(self + { key_creator_params: val }, 'key_creator_params', type + '.withKeyCreatorParams'),
    withMaxBodyBytes:: function(val) validator.validateField(self + { max_body_bytes: val }, 'max_body_bytes', type + '.withMaxBodyBytes'),
    withTypedConfig:: function(val) validator.validateField(self + { typed_config: val }, 'typed_config', type + '.withTypedConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
