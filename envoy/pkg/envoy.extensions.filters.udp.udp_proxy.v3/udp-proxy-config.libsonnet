// Message type: envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig';
local generator = import '../generator.libsonnet';
local fields = {
  access_log: {
    type: 'envoy.config.accesslog.v3.AccessLog',
    allowedNames: [
      'access_log',
      'accessLog',
    ],
    containerType: 'list',
  },
  cluster: {
    type: 'string',
    allowedNames: [
      'cluster',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  hash_policies: {
    type: 'envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy',
    allowedNames: [
      'hash_policies',
      'hashPolicies',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 1,
      },
    },
  },
  idle_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'idle_timeout',
      'idleTimeout',
    ],
  },
  matcher: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'matcher',
    ],
  },
  proxy_access_log: {
    type: 'envoy.config.accesslog.v3.AccessLog',
    allowedNames: [
      'proxy_access_log',
      'proxyAccessLog',
    ],
    containerType: 'list',
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  upstream_socket_config: {
    type: 'envoy.config.core.v3.UdpSocketConfig',
    allowedNames: [
      'upstream_socket_config',
      'upstreamSocketConfig',
    ],
  },
  use_original_src_ip: {
    type: 'bool',
    allowedNames: [
      'use_original_src_ip',
      'useOriginalSrcIp',
    ],
  },
  use_per_packet_load_balancing: {
    type: 'bool',
    allowedNames: [
      'use_per_packet_load_balancing',
      'usePerPacketLoadBalancing',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'cluster',
      'matcher',
    ],
    required: true,
    group: 'route_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HashPolicy:: (import 'udp-proxy-config-hash-policy.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccessLog:: function(val) validator.validateField(self + { access_log: val }, 'access_log', type + '.withAccessLog'),
    withCluster:: function(val) validator.validateField(self + { cluster: val }, 'cluster', type + '.withCluster'),
    withHashPolicies:: function(val) validator.validateField(self + { hash_policies: val }, 'hash_policies', type + '.withHashPolicies'),
    withIdleTimeout:: function(val) validator.validateField(self + { idle_timeout: val }, 'idle_timeout', type + '.withIdleTimeout'),
    withMatcher:: function(val) validator.validateField(self + { matcher: val }, 'matcher', type + '.withMatcher'),
    withProxyAccessLog:: function(val) validator.validateField(self + { proxy_access_log: val }, 'proxy_access_log', type + '.withProxyAccessLog'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withUpstreamSocketConfig:: function(val) validator.validateField(self + { upstream_socket_config: val }, 'upstream_socket_config', type + '.withUpstreamSocketConfig'),
    withUseOriginalSrcIp:: function(val) validator.validateField(self + { use_original_src_ip: val }, 'use_original_src_ip', type + '.withUseOriginalSrcIp'),
    withUsePerPacketLoadBalancing:: function(val) validator.validateField(self + { use_per_packet_load_balancing: val }, 'use_per_packet_load_balancing', type + '.withUsePerPacketLoadBalancing'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
