// Message type: xds.type.matcher.v3.StringMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'xds.type.matcher.v3.StringMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  contains: {
    type: 'string',
    allowedNames: [
      'contains',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  exact: {
    type: 'string',
    allowedNames: [
      'exact',
    ],
  },
  ignore_case: {
    type: 'bool',
    allowedNames: [
      'ignore_case',
      'ignoreCase',
    ],
  },
  prefix: {
    type: 'string',
    allowedNames: [
      'prefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  safe_regex: {
    type: 'xds.type.matcher.v3.RegexMatcher',
    allowedNames: [
      'safe_regex',
      'safeRegex',
    ],
  },
  suffix: {
    type: 'string',
    allowedNames: [
      'suffix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [
  {
    fields: [
      'exact',
      'prefix',
      'suffix',
      'safe_regex',
      'contains',
    ],
    required: true,
    group: 'match_pattern',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withContains:: function(val) validator.validateField(self + { contains: val }, 'contains', type + '.withContains'),
    withExact:: function(val) validator.validateField(self + { exact: val }, 'exact', type + '.withExact'),
    withIgnoreCase:: function(val) validator.validateField(self + { ignore_case: val }, 'ignore_case', type + '.withIgnoreCase'),
    withPrefix:: function(val) validator.validateField(self + { prefix: val }, 'prefix', type + '.withPrefix'),
    withSafeRegex:: function(val) validator.validateField(self + { safe_regex: val }, 'safe_regex', type + '.withSafeRegex'),
    withSuffix:: function(val) validator.validateField(self + { suffix: val }, 'suffix', type + '.withSuffix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
