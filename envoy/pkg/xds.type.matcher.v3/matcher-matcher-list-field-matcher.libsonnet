// Message type: xds.type.matcher.v3.Matcher.MatcherList.FieldMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'xds.type.matcher.v3.Matcher.MatcherList.FieldMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  on_match: {
    type: 'xds.type.matcher.v3.Matcher.OnMatch',
    allowedNames: [
      'on_match',
      'onMatch',
    ],
    required: true,
  },
  predicate: {
    type: 'xds.type.matcher.v3.Matcher.MatcherList.Predicate',
    allowedNames: [
      'predicate',
    ],
    required: true,
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withOnMatch:: function(val) validator.validateField(self + { on_match: val }, 'on_match', type + '.withOnMatch'),
    withPredicate:: function(val) validator.validateField(self + { predicate: val }, 'predicate', type + '.withPredicate'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
