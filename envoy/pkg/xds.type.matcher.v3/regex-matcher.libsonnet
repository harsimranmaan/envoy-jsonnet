// Message type: xds.type.matcher.v3.RegexMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'xds.type.matcher.v3.RegexMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  google_re2: {
    type: 'xds.type.matcher.v3.RegexMatcher.GoogleRE2',
    allowedNames: [
      'google_re2',
      'googleRe2',
    ],
  },
  regex: {
    type: 'string',
    allowedNames: [
      'regex',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [
  {
    fields: [
      'google_re2',
    ],
    required: true,
    group: 'engine_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    GoogleRE2:: (import 'regex-matcher-google-re-2.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withGoogleRe2:: function(val) validator.validateField(self + { google_re2: val }, 'google_re2', type + '.withGoogleRe2'),
    withRegex:: function(val) validator.validateField(self + { regex: val }, 'regex', type + '.withRegex'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
