// Message type: envoy.config.accesslog.v3.RuntimeFilter
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.accesslog.v3.RuntimeFilter';
local generator = import '../generator.libsonnet';
local fields = {
  percent_sampled: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'percent_sampled',
      'percentSampled',
    ],
  },
  runtime_key: {
    type: 'string',
    allowedNames: [
      'runtime_key',
      'runtimeKey',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  use_independent_randomness: {
    type: 'bool',
    allowedNames: [
      'use_independent_randomness',
      'useIndependentRandomness',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withPercentSampled:: function(val) validator.validateField(self + { percent_sampled: val }, 'percent_sampled', type + '.withPercentSampled'),
    withRuntimeKey:: function(val) validator.validateField(self + { runtime_key: val }, 'runtime_key', type + '.withRuntimeKey'),
    withUseIndependentRandomness:: function(val) validator.validateField(self + { use_independent_randomness: val }, 'use_independent_randomness', type + '.withUseIndependentRandomness'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
