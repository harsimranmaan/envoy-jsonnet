// Message type: envoy.config.accesslog.v3.AccessLogFilter
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.accesslog.v3.AccessLogFilter';
local generator = import '../generator.libsonnet';
local fields = {
  and_filter: {
    type: 'envoy.config.accesslog.v3.AndFilter',
    allowedNames: [
      'and_filter',
      'andFilter',
    ],
  },
  duration_filter: {
    type: 'envoy.config.accesslog.v3.DurationFilter',
    allowedNames: [
      'duration_filter',
      'durationFilter',
    ],
  },
  extension_filter: {
    type: 'envoy.config.accesslog.v3.ExtensionFilter',
    allowedNames: [
      'extension_filter',
      'extensionFilter',
    ],
  },
  grpc_status_filter: {
    type: 'envoy.config.accesslog.v3.GrpcStatusFilter',
    allowedNames: [
      'grpc_status_filter',
      'grpcStatusFilter',
    ],
  },
  header_filter: {
    type: 'envoy.config.accesslog.v3.HeaderFilter',
    allowedNames: [
      'header_filter',
      'headerFilter',
    ],
  },
  metadata_filter: {
    type: 'envoy.config.accesslog.v3.MetadataFilter',
    allowedNames: [
      'metadata_filter',
      'metadataFilter',
    ],
  },
  not_health_check_filter: {
    type: 'envoy.config.accesslog.v3.NotHealthCheckFilter',
    allowedNames: [
      'not_health_check_filter',
      'notHealthCheckFilter',
    ],
  },
  or_filter: {
    type: 'envoy.config.accesslog.v3.OrFilter',
    allowedNames: [
      'or_filter',
      'orFilter',
    ],
  },
  response_flag_filter: {
    type: 'envoy.config.accesslog.v3.ResponseFlagFilter',
    allowedNames: [
      'response_flag_filter',
      'responseFlagFilter',
    ],
  },
  runtime_filter: {
    type: 'envoy.config.accesslog.v3.RuntimeFilter',
    allowedNames: [
      'runtime_filter',
      'runtimeFilter',
    ],
  },
  status_code_filter: {
    type: 'envoy.config.accesslog.v3.StatusCodeFilter',
    allowedNames: [
      'status_code_filter',
      'statusCodeFilter',
    ],
  },
  traceable_filter: {
    type: 'envoy.config.accesslog.v3.TraceableFilter',
    allowedNames: [
      'traceable_filter',
      'traceableFilter',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'status_code_filter',
      'duration_filter',
      'not_health_check_filter',
      'traceable_filter',
      'runtime_filter',
      'and_filter',
      'or_filter',
      'header_filter',
      'response_flag_filter',
      'grpc_status_filter',
      'extension_filter',
      'metadata_filter',
    ],
    required: true,
    group: 'filter_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAndFilter:: function(val) validator.validateField(self + { and_filter: val }, 'and_filter', type + '.withAndFilter'),
    withDurationFilter:: function(val) validator.validateField(self + { duration_filter: val }, 'duration_filter', type + '.withDurationFilter'),
    withExtensionFilter:: function(val) validator.validateField(self + { extension_filter: val }, 'extension_filter', type + '.withExtensionFilter'),
    withGrpcStatusFilter:: function(val) validator.validateField(self + { grpc_status_filter: val }, 'grpc_status_filter', type + '.withGrpcStatusFilter'),
    withHeaderFilter:: function(val) validator.validateField(self + { header_filter: val }, 'header_filter', type + '.withHeaderFilter'),
    withMetadataFilter:: function(val) validator.validateField(self + { metadata_filter: val }, 'metadata_filter', type + '.withMetadataFilter'),
    withNotHealthCheckFilter:: function(val) validator.validateField(self + { not_health_check_filter: val }, 'not_health_check_filter', type + '.withNotHealthCheckFilter'),
    withOrFilter:: function(val) validator.validateField(self + { or_filter: val }, 'or_filter', type + '.withOrFilter'),
    withResponseFlagFilter:: function(val) validator.validateField(self + { response_flag_filter: val }, 'response_flag_filter', type + '.withResponseFlagFilter'),
    withRuntimeFilter:: function(val) validator.validateField(self + { runtime_filter: val }, 'runtime_filter', type + '.withRuntimeFilter'),
    withStatusCodeFilter:: function(val) validator.validateField(self + { status_code_filter: val }, 'status_code_filter', type + '.withStatusCodeFilter'),
    withTraceableFilter:: function(val) validator.validateField(self + { traceable_filter: val }, 'traceable_filter', type + '.withTraceableFilter'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
