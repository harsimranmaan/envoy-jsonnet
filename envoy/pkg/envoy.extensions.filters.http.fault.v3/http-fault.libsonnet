// Message type: envoy.extensions.filters.http.fault.v3.HTTPFault
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.fault.v3.HTTPFault';
local generator = import '../generator.libsonnet';
local fields = {
  abort: {
    type: 'envoy.extensions.filters.http.fault.v3.FaultAbort',
    allowedNames: [
      'abort',
    ],
  },
  abort_grpc_status_runtime: {
    type: 'string',
    allowedNames: [
      'abort_grpc_status_runtime',
      'abortGrpcStatusRuntime',
    ],
  },
  abort_http_status_runtime: {
    type: 'string',
    allowedNames: [
      'abort_http_status_runtime',
      'abortHttpStatusRuntime',
    ],
  },
  abort_percent_runtime: {
    type: 'string',
    allowedNames: [
      'abort_percent_runtime',
      'abortPercentRuntime',
    ],
  },
  delay: {
    type: 'envoy.extensions.filters.common.fault.v3.FaultDelay',
    allowedNames: [
      'delay',
    ],
  },
  delay_duration_runtime: {
    type: 'string',
    allowedNames: [
      'delay_duration_runtime',
      'delayDurationRuntime',
    ],
  },
  delay_percent_runtime: {
    type: 'string',
    allowedNames: [
      'delay_percent_runtime',
      'delayPercentRuntime',
    ],
  },
  disable_downstream_cluster_stats: {
    type: 'bool',
    allowedNames: [
      'disable_downstream_cluster_stats',
      'disableDownstreamClusterStats',
    ],
  },
  downstream_nodes: {
    type: 'string',
    allowedNames: [
      'downstream_nodes',
      'downstreamNodes',
    ],
    containerType: 'list',
  },
  headers: {
    type: 'envoy.config.route.v3.HeaderMatcher',
    allowedNames: [
      'headers',
    ],
    containerType: 'list',
  },
  max_active_faults: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_active_faults',
      'maxActiveFaults',
    ],
  },
  max_active_faults_runtime: {
    type: 'string',
    allowedNames: [
      'max_active_faults_runtime',
      'maxActiveFaultsRuntime',
    ],
  },
  response_rate_limit: {
    type: 'envoy.extensions.filters.common.fault.v3.FaultRateLimit',
    allowedNames: [
      'response_rate_limit',
      'responseRateLimit',
    ],
  },
  response_rate_limit_percent_runtime: {
    type: 'string',
    allowedNames: [
      'response_rate_limit_percent_runtime',
      'responseRateLimitPercentRuntime',
    ],
  },
  upstream_cluster: {
    type: 'string',
    allowedNames: [
      'upstream_cluster',
      'upstreamCluster',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAbort:: function(val) validator.validateField(self + { abort: val }, 'abort', type + '.withAbort'),
    withAbortGrpcStatusRuntime:: function(val) validator.validateField(self + { abort_grpc_status_runtime: val }, 'abort_grpc_status_runtime', type + '.withAbortGrpcStatusRuntime'),
    withAbortHttpStatusRuntime:: function(val) validator.validateField(self + { abort_http_status_runtime: val }, 'abort_http_status_runtime', type + '.withAbortHttpStatusRuntime'),
    withAbortPercentRuntime:: function(val) validator.validateField(self + { abort_percent_runtime: val }, 'abort_percent_runtime', type + '.withAbortPercentRuntime'),
    withDelay:: function(val) validator.validateField(self + { delay: val }, 'delay', type + '.withDelay'),
    withDelayDurationRuntime:: function(val) validator.validateField(self + { delay_duration_runtime: val }, 'delay_duration_runtime', type + '.withDelayDurationRuntime'),
    withDelayPercentRuntime:: function(val) validator.validateField(self + { delay_percent_runtime: val }, 'delay_percent_runtime', type + '.withDelayPercentRuntime'),
    withDisableDownstreamClusterStats:: function(val) validator.validateField(self + { disable_downstream_cluster_stats: val }, 'disable_downstream_cluster_stats', type + '.withDisableDownstreamClusterStats'),
    withDownstreamNodes:: function(val) validator.validateField(self + { downstream_nodes: val }, 'downstream_nodes', type + '.withDownstreamNodes'),
    withHeaders:: function(val) validator.validateField(self + { headers: val }, 'headers', type + '.withHeaders'),
    withMaxActiveFaults:: function(val) validator.validateField(self + { max_active_faults: val }, 'max_active_faults', type + '.withMaxActiveFaults'),
    withMaxActiveFaultsRuntime:: function(val) validator.validateField(self + { max_active_faults_runtime: val }, 'max_active_faults_runtime', type + '.withMaxActiveFaultsRuntime'),
    withResponseRateLimit:: function(val) validator.validateField(self + { response_rate_limit: val }, 'response_rate_limit', type + '.withResponseRateLimit'),
    withResponseRateLimitPercentRuntime:: function(val) validator.validateField(self + { response_rate_limit_percent_runtime: val }, 'response_rate_limit_percent_runtime', type + '.withResponseRateLimitPercentRuntime'),
    withUpstreamCluster:: function(val) validator.validateField(self + { upstream_cluster: val }, 'upstream_cluster', type + '.withUpstreamCluster'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
