// Message type: envoy.extensions.filters.http.fault.v3.FaultAbort
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.fault.v3.FaultAbort';
local generator = import '../generator.libsonnet';
local fields = {
  grpc_status: {
    type: 'uint32',
    allowedNames: [
      'grpc_status',
      'grpcStatus',
    ],
  },
  header_abort: {
    type: 'envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort',
    allowedNames: [
      'header_abort',
      'headerAbort',
    ],
  },
  http_status: {
    type: 'uint32',
    allowedNames: [
      'http_status',
      'httpStatus',
    ],
    constraints: {
      Uint32: {
        gte: 200,
        lt: 600,
      },
    },
  },
  percentage: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'percentage',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'http_status',
      'grpc_status',
      'header_abort',
    ],
    required: true,
    group: 'error_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HeaderAbort:: (import 'fault-abort-header-abort.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withGrpcStatus:: function(val) validator.validateField(self + { grpc_status: val }, 'grpc_status', type + '.withGrpcStatus'),
    withHeaderAbort:: function(val) validator.validateField(self + { header_abort: val }, 'header_abort', type + '.withHeaderAbort'),
    withHttpStatus:: function(val) validator.validateField(self + { http_status: val }, 'http_status', type + '.withHttpStatus'),
    withPercentage:: function(val) validator.validateField(self + { percentage: val }, 'percentage', type + '.withPercentage'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
