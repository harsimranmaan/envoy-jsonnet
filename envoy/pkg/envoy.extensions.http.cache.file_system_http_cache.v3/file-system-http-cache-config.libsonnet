// Message type: envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig';
local generator = import '../generator.libsonnet';
local fields = {
  cache_path: {
    type: 'string',
    allowedNames: [
      'cache_path',
      'cachePath',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  cache_subdivisions: {
    type: 'uint32',
    allowedNames: [
      'cache_subdivisions',
      'cacheSubdivisions',
    ],
  },
  manager_config: {
    type: 'envoy.extensions.common.async_files.v3.AsyncFileManagerConfig',
    allowedNames: [
      'manager_config',
      'managerConfig',
    ],
    required: true,
  },
  max_cache_entry_count: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'max_cache_entry_count',
      'maxCacheEntryCount',
    ],
  },
  max_cache_entry_size_bytes: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'max_cache_entry_size_bytes',
      'maxCacheEntrySizeBytes',
    ],
  },
  max_cache_size_bytes: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'max_cache_size_bytes',
      'maxCacheSizeBytes',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCachePath:: function(val) validator.validateField(self + { cache_path: val }, 'cache_path', type + '.withCachePath'),
    withCacheSubdivisions:: function(val) validator.validateField(self + { cache_subdivisions: val }, 'cache_subdivisions', type + '.withCacheSubdivisions'),
    withManagerConfig:: function(val) validator.validateField(self + { manager_config: val }, 'manager_config', type + '.withManagerConfig'),
    withMaxCacheEntryCount:: function(val) validator.validateField(self + { max_cache_entry_count: val }, 'max_cache_entry_count', type + '.withMaxCacheEntryCount'),
    withMaxCacheEntrySizeBytes:: function(val) validator.validateField(self + { max_cache_entry_size_bytes: val }, 'max_cache_entry_size_bytes', type + '.withMaxCacheEntrySizeBytes'),
    withMaxCacheSizeBytes:: function(val) validator.validateField(self + { max_cache_size_bytes: val }, 'max_cache_size_bytes', type + '.withMaxCacheSizeBytes'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
