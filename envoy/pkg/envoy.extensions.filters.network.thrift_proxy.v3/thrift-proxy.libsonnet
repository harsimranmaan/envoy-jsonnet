// Message type: envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy';
local generator = import '../generator.libsonnet';
local fields = {
  access_log: {
    type: 'envoy.config.accesslog.v3.AccessLog',
    allowedNames: [
      'access_log',
      'accessLog',
    ],
    containerType: 'list',
  },
  header_keys_preserve_case: {
    type: 'bool',
    allowedNames: [
      'header_keys_preserve_case',
      'headerKeysPreserveCase',
    ],
  },
  max_requests_per_connection: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_requests_per_connection',
      'maxRequestsPerConnection',
    ],
  },
  payload_passthrough: {
    type: 'bool',
    allowedNames: [
      'payload_passthrough',
      'payloadPassthrough',
    ],
  },
  protocol: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType',
    allowedNames: [
      'protocol',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  route_config: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration',
    allowedNames: [
      'route_config',
      'routeConfig',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  thrift_filters: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter',
    allowedNames: [
      'thrift_filters',
      'thriftFilters',
    ],
    containerType: 'list',
  },
  transport: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.TransportType',
    allowedNames: [
      'transport',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  trds: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.Trds',
    allowedNames: [
      'trds',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccessLog:: function(val) validator.validateField(self + { access_log: val }, 'access_log', type + '.withAccessLog'),
    withHeaderKeysPreserveCase:: function(val) validator.validateField(self + { header_keys_preserve_case: val }, 'header_keys_preserve_case', type + '.withHeaderKeysPreserveCase'),
    withMaxRequestsPerConnection:: function(val) validator.validateField(self + { max_requests_per_connection: val }, 'max_requests_per_connection', type + '.withMaxRequestsPerConnection'),
    withPayloadPassthrough:: function(val) validator.validateField(self + { payload_passthrough: val }, 'payload_passthrough', type + '.withPayloadPassthrough'),
    withProtocol:: function(val) validator.validateField(self + { protocol: val }, 'protocol', type + '.withProtocol'),
    withRouteConfig:: function(val) validator.validateField(self + { route_config: val }, 'route_config', type + '.withRouteConfig'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withThriftFilters:: function(val) validator.validateField(self + { thrift_filters: val }, 'thrift_filters', type + '.withThriftFilters'),
    withTransport:: function(val) validator.validateField(self + { transport: val }, 'transport', type + '.withTransport'),
    withTrds:: function(val) validator.validateField(self + { trds: val }, 'trds', type + '.withTrds'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
