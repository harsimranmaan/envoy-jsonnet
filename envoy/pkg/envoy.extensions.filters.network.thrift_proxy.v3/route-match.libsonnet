// Message type: envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch';
local generator = import '../generator.libsonnet';
local fields = {
  headers: {
    type: 'envoy.config.route.v3.HeaderMatcher',
    allowedNames: [
      'headers',
    ],
    containerType: 'list',
  },
  invert: {
    type: 'bool',
    allowedNames: [
      'invert',
    ],
  },
  method_name: {
    type: 'string',
    allowedNames: [
      'method_name',
      'methodName',
    ],
  },
  service_name: {
    type: 'string',
    allowedNames: [
      'service_name',
      'serviceName',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'method_name',
      'service_name',
    ],
    required: true,
    group: 'match_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHeaders:: function(val) validator.validateField(self + { headers: val }, 'headers', type + '.withHeaders'),
    withInvert:: function(val) validator.validateField(self + { invert: val }, 'invert', type + '.withInvert'),
    withMethodName:: function(val) validator.validateField(self + { method_name: val }, 'method_name', type + '.withMethodName'),
    withServiceName:: function(val) validator.validateField(self + { service_name: val }, 'service_name', type + '.withServiceName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
