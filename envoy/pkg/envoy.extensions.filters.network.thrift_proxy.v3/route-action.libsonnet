// Message type: envoy.extensions.filters.network.thrift_proxy.v3.RouteAction
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.thrift_proxy.v3.RouteAction';
local generator = import '../generator.libsonnet';
local fields = {
  cluster: {
    type: 'string',
    allowedNames: [
      'cluster',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  cluster_header: {
    type: 'string',
    allowedNames: [
      'cluster_header',
      'clusterHeader',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 2,
        },
        min_len: 1,
        strict: false,
      },
    },
  },
  metadata_match: {
    type: 'envoy.config.core.v3.Metadata',
    allowedNames: [
      'metadata_match',
      'metadataMatch',
    ],
  },
  rate_limits: {
    type: 'envoy.config.route.v3.RateLimit',
    allowedNames: [
      'rate_limits',
      'rateLimits',
    ],
    containerType: 'list',
  },
  request_mirror_policies: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.RequestMirrorPolicy',
    allowedNames: [
      'request_mirror_policies',
      'requestMirrorPolicies',
    ],
    containerType: 'list',
  },
  strip_service_name: {
    type: 'bool',
    allowedNames: [
      'strip_service_name',
      'stripServiceName',
    ],
  },
  weighted_clusters: {
    type: 'envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster',
    allowedNames: [
      'weighted_clusters',
      'weightedClusters',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'cluster',
      'weighted_clusters',
      'cluster_header',
    ],
    required: true,
    group: 'cluster_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    RequestMirrorPolicy:: (import 'route-action-request-mirror-policy.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCluster:: function(val) validator.validateField(self + { cluster: val }, 'cluster', type + '.withCluster'),
    withClusterHeader:: function(val) validator.validateField(self + { cluster_header: val }, 'cluster_header', type + '.withClusterHeader'),
    withMetadataMatch:: function(val) validator.validateField(self + { metadata_match: val }, 'metadata_match', type + '.withMetadataMatch'),
    withRateLimits:: function(val) validator.validateField(self + { rate_limits: val }, 'rate_limits', type + '.withRateLimits'),
    withRequestMirrorPolicies:: function(val) validator.validateField(self + { request_mirror_policies: val }, 'request_mirror_policies', type + '.withRequestMirrorPolicies'),
    withStripServiceName:: function(val) validator.validateField(self + { strip_service_name: val }, 'strip_service_name', type + '.withStripServiceName'),
    withWeightedClusters:: function(val) validator.validateField(self + { weighted_clusters: val }, 'weighted_clusters', type + '.withWeightedClusters'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
