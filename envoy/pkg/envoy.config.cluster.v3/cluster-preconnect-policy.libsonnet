// Message type: envoy.config.cluster.v3.Cluster.PreconnectPolicy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.Cluster.PreconnectPolicy';
local generator = import '../generator.libsonnet';
local fields = {
  per_upstream_preconnect_ratio: {
    type: 'google.protobuf.DoubleValue',
    allowedNames: [
      'per_upstream_preconnect_ratio',
      'perUpstreamPreconnectRatio',
    ],
    constraints: {
      Double: {
        gte: 1,
        lte: 3,
      },
    },
  },
  predictive_preconnect_ratio: {
    type: 'google.protobuf.DoubleValue',
    allowedNames: [
      'predictive_preconnect_ratio',
      'predictivePreconnectRatio',
    ],
    constraints: {
      Double: {
        gte: 1,
        lte: 3,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withPerUpstreamPreconnectRatio:: function(val) validator.validateField(self + { per_upstream_preconnect_ratio: val }, 'per_upstream_preconnect_ratio', type + '.withPerUpstreamPreconnectRatio'),
    withPredictivePreconnectRatio:: function(val) validator.validateField(self + { predictive_preconnect_ratio: val }, 'predictive_preconnect_ratio', type + '.withPredictivePreconnectRatio'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
