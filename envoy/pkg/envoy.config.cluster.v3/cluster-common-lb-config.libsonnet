// Message type: envoy.config.cluster.v3.Cluster.CommonLbConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.Cluster.CommonLbConfig';
local generator = import '../generator.libsonnet';
local fields = {
  close_connections_on_host_set_change: {
    type: 'bool',
    allowedNames: [
      'close_connections_on_host_set_change',
      'closeConnectionsOnHostSetChange',
    ],
  },
  consistent_hashing_lb_config: {
    type: 'envoy.config.cluster.v3.Cluster.CommonLbConfig.ConsistentHashingLbConfig',
    allowedNames: [
      'consistent_hashing_lb_config',
      'consistentHashingLbConfig',
    ],
  },
  healthy_panic_threshold: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'healthy_panic_threshold',
      'healthyPanicThreshold',
    ],
  },
  ignore_new_hosts_until_first_hc: {
    type: 'bool',
    allowedNames: [
      'ignore_new_hosts_until_first_hc',
      'ignoreNewHostsUntilFirstHc',
    ],
  },
  locality_weighted_lb_config: {
    type: 'envoy.config.cluster.v3.Cluster.CommonLbConfig.LocalityWeightedLbConfig',
    allowedNames: [
      'locality_weighted_lb_config',
      'localityWeightedLbConfig',
    ],
  },
  override_host_status: {
    type: 'envoy.config.core.v3.HealthStatusSet',
    allowedNames: [
      'override_host_status',
      'overrideHostStatus',
    ],
  },
  update_merge_window: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'update_merge_window',
      'updateMergeWindow',
    ],
  },
  zone_aware_lb_config: {
    type: 'envoy.config.cluster.v3.Cluster.CommonLbConfig.ZoneAwareLbConfig',
    allowedNames: [
      'zone_aware_lb_config',
      'zoneAwareLbConfig',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'zone_aware_lb_config',
      'locality_weighted_lb_config',
    ],
    required: false,
    group: 'locality_config_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ZoneAwareLbConfig:: (import 'cluster-common-lb-config-zone-aware-lb-config.libsonnet').definition,
    LocalityWeightedLbConfig:: (import 'cluster-common-lb-config-locality-weighted-lb-config.libsonnet').definition,
    ConsistentHashingLbConfig:: (import 'cluster-common-lb-config-consistent-hashing-lb-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCloseConnectionsOnHostSetChange:: function(val) validator.validateField(self + { close_connections_on_host_set_change: val }, 'close_connections_on_host_set_change', type + '.withCloseConnectionsOnHostSetChange'),
    withConsistentHashingLbConfig:: function(val) validator.validateField(self + { consistent_hashing_lb_config: val }, 'consistent_hashing_lb_config', type + '.withConsistentHashingLbConfig'),
    withHealthyPanicThreshold:: function(val) validator.validateField(self + { healthy_panic_threshold: val }, 'healthy_panic_threshold', type + '.withHealthyPanicThreshold'),
    withIgnoreNewHostsUntilFirstHc:: function(val) validator.validateField(self + { ignore_new_hosts_until_first_hc: val }, 'ignore_new_hosts_until_first_hc', type + '.withIgnoreNewHostsUntilFirstHc'),
    withLocalityWeightedLbConfig:: function(val) validator.validateField(self + { locality_weighted_lb_config: val }, 'locality_weighted_lb_config', type + '.withLocalityWeightedLbConfig'),
    withOverrideHostStatus:: function(val) validator.validateField(self + { override_host_status: val }, 'override_host_status', type + '.withOverrideHostStatus'),
    withUpdateMergeWindow:: function(val) validator.validateField(self + { update_merge_window: val }, 'update_merge_window', type + '.withUpdateMergeWindow'),
    withZoneAwareLbConfig:: function(val) validator.validateField(self + { zone_aware_lb_config: val }, 'zone_aware_lb_config', type + '.withZoneAwareLbConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
