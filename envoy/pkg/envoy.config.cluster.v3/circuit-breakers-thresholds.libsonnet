// Message type: envoy.config.cluster.v3.CircuitBreakers.Thresholds
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.CircuitBreakers.Thresholds';
local generator = import '../generator.libsonnet';
local fields = {
  max_connection_pools: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_connection_pools',
      'maxConnectionPools',
    ],
  },
  max_connections: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_connections',
      'maxConnections',
    ],
  },
  max_pending_requests: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_pending_requests',
      'maxPendingRequests',
    ],
  },
  max_requests: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_requests',
      'maxRequests',
    ],
  },
  max_retries: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_retries',
      'maxRetries',
    ],
  },
  priority: {
    type: 'envoy.config.core.v3.RoutingPriority',
    allowedNames: [
      'priority',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  retry_budget: {
    type: 'envoy.config.cluster.v3.CircuitBreakers.Thresholds.RetryBudget',
    allowedNames: [
      'retry_budget',
      'retryBudget',
    ],
  },
  track_remaining: {
    type: 'bool',
    allowedNames: [
      'track_remaining',
      'trackRemaining',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    RetryBudget:: (import 'circuit-breakers-thresholds-retry-budget.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withMaxConnectionPools:: function(val) validator.validateField(self + { max_connection_pools: val }, 'max_connection_pools', type + '.withMaxConnectionPools'),
    withMaxConnections:: function(val) validator.validateField(self + { max_connections: val }, 'max_connections', type + '.withMaxConnections'),
    withMaxPendingRequests:: function(val) validator.validateField(self + { max_pending_requests: val }, 'max_pending_requests', type + '.withMaxPendingRequests'),
    withMaxRequests:: function(val) validator.validateField(self + { max_requests: val }, 'max_requests', type + '.withMaxRequests'),
    withMaxRetries:: function(val) validator.validateField(self + { max_retries: val }, 'max_retries', type + '.withMaxRetries'),
    withPriority:: function(val) validator.validateField(self + { priority: val }, 'priority', type + '.withPriority'),
    withRetryBudget:: function(val) validator.validateField(self + { retry_budget: val }, 'retry_budget', type + '.withRetryBudget'),
    withTrackRemaining:: function(val) validator.validateField(self + { track_remaining: val }, 'track_remaining', type + '.withTrackRemaining'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
