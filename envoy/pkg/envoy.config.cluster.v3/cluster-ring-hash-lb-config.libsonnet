// Message type: envoy.config.cluster.v3.Cluster.RingHashLbConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.Cluster.RingHashLbConfig';
local generator = import '../generator.libsonnet';
local fields = {
  hash_function: {
    type: 'envoy.config.cluster.v3.Cluster.RingHashLbConfig.HashFunction',
    allowedNames: [
      'hash_function',
      'hashFunction',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  maximum_ring_size: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'maximum_ring_size',
      'maximumRingSize',
    ],
    constraints: {
      Uint64: {
        lte: 8388608,
      },
    },
  },
  minimum_ring_size: {
    type: 'google.protobuf.UInt64Value',
    allowedNames: [
      'minimum_ring_size',
      'minimumRingSize',
    ],
    constraints: {
      Uint64: {
        lte: 8388608,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HashFunction:: (import 'cluster-ring-hash-lb-config-hash-function.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHashFunction:: function(val) validator.validateField(self + { hash_function: val }, 'hash_function', type + '.withHashFunction'),
    withMaximumRingSize:: function(val) validator.validateField(self + { maximum_ring_size: val }, 'maximum_ring_size', type + '.withMaximumRingSize'),
    withMinimumRingSize:: function(val) validator.validateField(self + { minimum_ring_size: val }, 'minimum_ring_size', type + '.withMinimumRingSize'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
