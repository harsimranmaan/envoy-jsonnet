// Message type: envoy.config.cluster.v3.Cluster.OriginalDstLbConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.Cluster.OriginalDstLbConfig';
local generator = import '../generator.libsonnet';
local fields = {
  http_header_name: {
    type: 'string',
    allowedNames: [
      'http_header_name',
      'httpHeaderName',
    ],
  },
  upstream_port_override: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'upstream_port_override',
      'upstreamPortOverride',
    ],
    constraints: {
      Uint32: {
        lte: 65535,
      },
    },
  },
  use_http_header: {
    type: 'bool',
    allowedNames: [
      'use_http_header',
      'useHttpHeader',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHttpHeaderName:: function(val) validator.validateField(self + { http_header_name: val }, 'http_header_name', type + '.withHttpHeaderName'),
    withUpstreamPortOverride:: function(val) validator.validateField(self + { upstream_port_override: val }, 'upstream_port_override', type + '.withUpstreamPortOverride'),
    withUseHttpHeader:: function(val) validator.validateField(self + { use_http_header: val }, 'use_http_header', type + '.withUseHttpHeader'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
