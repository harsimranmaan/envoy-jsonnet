// Message type: envoy.config.cluster.v3.Cluster.LbSubsetConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.Cluster.LbSubsetConfig';
local generator = import '../generator.libsonnet';
local fields = {
  default_subset: {
    type: 'google.protobuf.Struct',
    allowedNames: [
      'default_subset',
      'defaultSubset',
    ],
  },
  fallback_policy: {
    type: 'envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy',
    allowedNames: [
      'fallback_policy',
      'fallbackPolicy',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  list_as_any: {
    type: 'bool',
    allowedNames: [
      'list_as_any',
      'listAsAny',
    ],
  },
  locality_weight_aware: {
    type: 'bool',
    allowedNames: [
      'locality_weight_aware',
      'localityWeightAware',
    ],
  },
  metadata_fallback_policy: {
    type: 'envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetMetadataFallbackPolicy',
    allowedNames: [
      'metadata_fallback_policy',
      'metadataFallbackPolicy',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  panic_mode_any: {
    type: 'bool',
    allowedNames: [
      'panic_mode_any',
      'panicModeAny',
    ],
  },
  scale_locality_weight: {
    type: 'bool',
    allowedNames: [
      'scale_locality_weight',
      'scaleLocalityWeight',
    ],
  },
  subset_selectors: {
    type: 'envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector',
    allowedNames: [
      'subset_selectors',
      'subsetSelectors',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    LbSubsetFallbackPolicy:: (import 'cluster-lb-subset-config-lb-subset-fallback-policy.libsonnet').definition,
    LbSubsetMetadataFallbackPolicy:: (import 'cluster-lb-subset-config-lb-subset-metadata-fallback-policy.libsonnet').definition,
    LbSubsetSelector:: (import 'cluster-lb-subset-config-lb-subset-selector.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDefaultSubset:: function(val) validator.validateField(self + { default_subset: val }, 'default_subset', type + '.withDefaultSubset'),
    withFallbackPolicy:: function(val) validator.validateField(self + { fallback_policy: val }, 'fallback_policy', type + '.withFallbackPolicy'),
    withListAsAny:: function(val) validator.validateField(self + { list_as_any: val }, 'list_as_any', type + '.withListAsAny'),
    withLocalityWeightAware:: function(val) validator.validateField(self + { locality_weight_aware: val }, 'locality_weight_aware', type + '.withLocalityWeightAware'),
    withMetadataFallbackPolicy:: function(val) validator.validateField(self + { metadata_fallback_policy: val }, 'metadata_fallback_policy', type + '.withMetadataFallbackPolicy'),
    withPanicModeAny:: function(val) validator.validateField(self + { panic_mode_any: val }, 'panic_mode_any', type + '.withPanicModeAny'),
    withScaleLocalityWeight:: function(val) validator.validateField(self + { scale_locality_weight: val }, 'scale_locality_weight', type + '.withScaleLocalityWeight'),
    withSubsetSelectors:: function(val) validator.validateField(self + { subset_selectors: val }, 'subset_selectors', type + '.withSubsetSelectors'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
