// Message type: envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector';
local generator = import '../generator.libsonnet';
local fields = {
  fallback_keys_subset: {
    type: 'string',
    allowedNames: [
      'fallback_keys_subset',
      'fallbackKeysSubset',
    ],
    containerType: 'list',
  },
  fallback_policy: {
    type: 'envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy',
    allowedNames: [
      'fallback_policy',
      'fallbackPolicy',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  keys: {
    type: 'string',
    allowedNames: [
      'keys',
    ],
    containerType: 'list',
  },
  single_host_per_subset: {
    type: 'bool',
    allowedNames: [
      'single_host_per_subset',
      'singleHostPerSubset',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    LbSubsetSelectorFallbackPolicy:: (import 'cluster-lb-subset-config-lb-subset-selector-lb-subset-selector-fallback-policy.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFallbackKeysSubset:: function(val) validator.validateField(self + { fallback_keys_subset: val }, 'fallback_keys_subset', type + '.withFallbackKeysSubset'),
    withFallbackPolicy:: function(val) validator.validateField(self + { fallback_policy: val }, 'fallback_policy', type + '.withFallbackPolicy'),
    withKeys:: function(val) validator.validateField(self + { keys: val }, 'keys', type + '.withKeys'),
    withSingleHostPerSubset:: function(val) validator.validateField(self + { single_host_per_subset: val }, 'single_host_per_subset', type + '.withSingleHostPerSubset'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
