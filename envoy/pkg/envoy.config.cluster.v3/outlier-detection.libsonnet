// Message type: envoy.config.cluster.v3.OutlierDetection
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.cluster.v3.OutlierDetection';
local generator = import '../generator.libsonnet';
local fields = {
  base_ejection_time: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'base_ejection_time',
      'baseEjectionTime',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  consecutive_5xx: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'consecutive_5xx',
      'consecutive5xx',
    ],
  },
  consecutive_gateway_failure: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'consecutive_gateway_failure',
      'consecutiveGatewayFailure',
    ],
  },
  consecutive_local_origin_failure: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'consecutive_local_origin_failure',
      'consecutiveLocalOriginFailure',
    ],
  },
  enforcing_consecutive_5xx: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_consecutive_5xx',
      'enforcingConsecutive5xx',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  enforcing_consecutive_gateway_failure: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_consecutive_gateway_failure',
      'enforcingConsecutiveGatewayFailure',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  enforcing_consecutive_local_origin_failure: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_consecutive_local_origin_failure',
      'enforcingConsecutiveLocalOriginFailure',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  enforcing_failure_percentage: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_failure_percentage',
      'enforcingFailurePercentage',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  enforcing_failure_percentage_local_origin: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_failure_percentage_local_origin',
      'enforcingFailurePercentageLocalOrigin',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  enforcing_local_origin_success_rate: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_local_origin_success_rate',
      'enforcingLocalOriginSuccessRate',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  enforcing_success_rate: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'enforcing_success_rate',
      'enforcingSuccessRate',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  failure_percentage_minimum_hosts: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'failure_percentage_minimum_hosts',
      'failurePercentageMinimumHosts',
    ],
  },
  failure_percentage_request_volume: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'failure_percentage_request_volume',
      'failurePercentageRequestVolume',
    ],
  },
  failure_percentage_threshold: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'failure_percentage_threshold',
      'failurePercentageThreshold',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  interval: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'interval',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  max_ejection_percent: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_ejection_percent',
      'maxEjectionPercent',
    ],
    constraints: {
      Uint32: {
        lte: 100,
      },
    },
  },
  max_ejection_time: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'max_ejection_time',
      'maxEjectionTime',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  max_ejection_time_jitter: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'max_ejection_time_jitter',
      'maxEjectionTimeJitter',
    ],
  },
  split_external_local_origin_errors: {
    type: 'bool',
    allowedNames: [
      'split_external_local_origin_errors',
      'splitExternalLocalOriginErrors',
    ],
  },
  success_rate_minimum_hosts: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'success_rate_minimum_hosts',
      'successRateMinimumHosts',
    ],
  },
  success_rate_request_volume: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'success_rate_request_volume',
      'successRateRequestVolume',
    ],
  },
  success_rate_stdev_factor: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'success_rate_stdev_factor',
      'successRateStdevFactor',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBaseEjectionTime:: function(val) validator.validateField(self + { base_ejection_time: val }, 'base_ejection_time', type + '.withBaseEjectionTime'),
    withConsecutive5xx:: function(val) validator.validateField(self + { consecutive_5xx: val }, 'consecutive_5xx', type + '.withConsecutive5xx'),
    withConsecutiveGatewayFailure:: function(val) validator.validateField(self + { consecutive_gateway_failure: val }, 'consecutive_gateway_failure', type + '.withConsecutiveGatewayFailure'),
    withConsecutiveLocalOriginFailure:: function(val) validator.validateField(self + { consecutive_local_origin_failure: val }, 'consecutive_local_origin_failure', type + '.withConsecutiveLocalOriginFailure'),
    withEnforcingConsecutive5xx:: function(val) validator.validateField(self + { enforcing_consecutive_5xx: val }, 'enforcing_consecutive_5xx', type + '.withEnforcingConsecutive5xx'),
    withEnforcingConsecutiveGatewayFailure:: function(val) validator.validateField(self + { enforcing_consecutive_gateway_failure: val }, 'enforcing_consecutive_gateway_failure', type + '.withEnforcingConsecutiveGatewayFailure'),
    withEnforcingConsecutiveLocalOriginFailure:: function(val) validator.validateField(self + { enforcing_consecutive_local_origin_failure: val }, 'enforcing_consecutive_local_origin_failure', type + '.withEnforcingConsecutiveLocalOriginFailure'),
    withEnforcingFailurePercentage:: function(val) validator.validateField(self + { enforcing_failure_percentage: val }, 'enforcing_failure_percentage', type + '.withEnforcingFailurePercentage'),
    withEnforcingFailurePercentageLocalOrigin:: function(val) validator.validateField(self + { enforcing_failure_percentage_local_origin: val }, 'enforcing_failure_percentage_local_origin', type + '.withEnforcingFailurePercentageLocalOrigin'),
    withEnforcingLocalOriginSuccessRate:: function(val) validator.validateField(self + { enforcing_local_origin_success_rate: val }, 'enforcing_local_origin_success_rate', type + '.withEnforcingLocalOriginSuccessRate'),
    withEnforcingSuccessRate:: function(val) validator.validateField(self + { enforcing_success_rate: val }, 'enforcing_success_rate', type + '.withEnforcingSuccessRate'),
    withFailurePercentageMinimumHosts:: function(val) validator.validateField(self + { failure_percentage_minimum_hosts: val }, 'failure_percentage_minimum_hosts', type + '.withFailurePercentageMinimumHosts'),
    withFailurePercentageRequestVolume:: function(val) validator.validateField(self + { failure_percentage_request_volume: val }, 'failure_percentage_request_volume', type + '.withFailurePercentageRequestVolume'),
    withFailurePercentageThreshold:: function(val) validator.validateField(self + { failure_percentage_threshold: val }, 'failure_percentage_threshold', type + '.withFailurePercentageThreshold'),
    withInterval:: function(val) validator.validateField(self + { interval: val }, 'interval', type + '.withInterval'),
    withMaxEjectionPercent:: function(val) validator.validateField(self + { max_ejection_percent: val }, 'max_ejection_percent', type + '.withMaxEjectionPercent'),
    withMaxEjectionTime:: function(val) validator.validateField(self + { max_ejection_time: val }, 'max_ejection_time', type + '.withMaxEjectionTime'),
    withMaxEjectionTimeJitter:: function(val) validator.validateField(self + { max_ejection_time_jitter: val }, 'max_ejection_time_jitter', type + '.withMaxEjectionTimeJitter'),
    withSplitExternalLocalOriginErrors:: function(val) validator.validateField(self + { split_external_local_origin_errors: val }, 'split_external_local_origin_errors', type + '.withSplitExternalLocalOriginErrors'),
    withSuccessRateMinimumHosts:: function(val) validator.validateField(self + { success_rate_minimum_hosts: val }, 'success_rate_minimum_hosts', type + '.withSuccessRateMinimumHosts'),
    withSuccessRateRequestVolume:: function(val) validator.validateField(self + { success_rate_request_volume: val }, 'success_rate_request_volume', type + '.withSuccessRateRequestVolume'),
    withSuccessRateStdevFactor:: function(val) validator.validateField(self + { success_rate_stdev_factor: val }, 'success_rate_stdev_factor', type + '.withSuccessRateStdevFactor'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
