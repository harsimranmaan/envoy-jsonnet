// Message type: envoy.config.tap.v3.OutputConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.tap.v3.OutputConfig';
local generator = import '../generator.libsonnet';
local fields = {
  max_buffered_rx_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_buffered_rx_bytes',
      'maxBufferedRxBytes',
    ],
  },
  max_buffered_tx_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_buffered_tx_bytes',
      'maxBufferedTxBytes',
    ],
  },
  sinks: {
    type: 'envoy.config.tap.v3.OutputSink',
    allowedNames: [
      'sinks',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        max_items: 1,
        min_items: 1,
      },
    },
  },
  streaming: {
    type: 'bool',
    allowedNames: [
      'streaming',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withMaxBufferedRxBytes:: function(val) validator.validateField(self + { max_buffered_rx_bytes: val }, 'max_buffered_rx_bytes', type + '.withMaxBufferedRxBytes'),
    withMaxBufferedTxBytes:: function(val) validator.validateField(self + { max_buffered_tx_bytes: val }, 'max_buffered_tx_bytes', type + '.withMaxBufferedTxBytes'),
    withSinks:: function(val) validator.validateField(self + { sinks: val }, 'sinks', type + '.withSinks'),
    withStreaming:: function(val) validator.validateField(self + { streaming: val }, 'streaming', type + '.withStreaming'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
