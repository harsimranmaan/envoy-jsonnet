// Enum type: envoy.config.tap.v3.OutputSink.Format
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.
local type = 'envoy.config.tap.v3.OutputSink.Format';
local map = {
  JSON_BODY_AS_BYTES: 'JSON_BODY_AS_BYTES',
  JSON_BODY_AS_STRING: 'JSON_BODY_AS_STRING',
  PROTO_BINARY: 'PROTO_BINARY',
  PROTO_BINARY_LENGTH_DELIMITED: 'PROTO_BINARY_LENGTH_DELIMITED',
  PROTO_TEXT: 'PROTO_TEXT',
};

local reverseMap = {
  '0': 'JSON_BODY_AS_BYTES',
  '1': 'JSON_BODY_AS_STRING',
  '2': 'PROTO_BINARY',
  '3': 'PROTO_BINARY_LENGTH_DELIMITED',
  '4': 'PROTO_TEXT',
};

local validator = function(input, ctx='') (
  local context = if ctx == '' then type else ctx;
  local v = std.toString(input);
  if std.objectHas(map, v) || std.objectHas(reverseMap, v)
  then input
  else error '%s: invalid value %s for enum %s' % [context, v, type]
);

{
  definition: map {
    _new:: function(obj={}) error '%s: the _new method may not be used on enum types' % 'envoy.config.tap.v3.OutputSink.Format',
    _validate:: validator,
  },
  validator:: validator,
}
