// Message type: envoy.config.tap.v3.OutputSink
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.tap.v3.OutputSink';
local generator = import '../generator.libsonnet';
local fields = {
  buffered_admin: {
    type: 'envoy.config.tap.v3.BufferedAdminSink',
    allowedNames: [
      'buffered_admin',
      'bufferedAdmin',
    ],
  },
  file_per_tap: {
    type: 'envoy.config.tap.v3.FilePerTapSink',
    allowedNames: [
      'file_per_tap',
      'filePerTap',
    ],
  },
  format: {
    type: 'envoy.config.tap.v3.OutputSink.Format',
    allowedNames: [
      'format',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  streaming_admin: {
    type: 'envoy.config.tap.v3.StreamingAdminSink',
    allowedNames: [
      'streaming_admin',
      'streamingAdmin',
    ],
  },
  streaming_grpc: {
    type: 'envoy.config.tap.v3.StreamingGrpcSink',
    allowedNames: [
      'streaming_grpc',
      'streamingGrpc',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'streaming_admin',
      'file_per_tap',
      'streaming_grpc',
      'buffered_admin',
    ],
    required: true,
    group: 'output_sink_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    Format:: (import 'output-sink-format.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBufferedAdmin:: function(val) validator.validateField(self + { buffered_admin: val }, 'buffered_admin', type + '.withBufferedAdmin'),
    withFilePerTap:: function(val) validator.validateField(self + { file_per_tap: val }, 'file_per_tap', type + '.withFilePerTap'),
    withFormat:: function(val) validator.validateField(self + { format: val }, 'format', type + '.withFormat'),
    withStreamingAdmin:: function(val) validator.validateField(self + { streaming_admin: val }, 'streaming_admin', type + '.withStreamingAdmin'),
    withStreamingGrpc:: function(val) validator.validateField(self + { streaming_grpc: val }, 'streaming_grpc', type + '.withStreamingGrpc'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
