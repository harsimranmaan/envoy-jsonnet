// Message type: envoy.extensions.filters.http.ratelimit.v3.RateLimit
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ratelimit.v3.RateLimit';
local generator = import '../generator.libsonnet';
local fields = {
  disable_x_envoy_ratelimited_header: {
    type: 'bool',
    allowedNames: [
      'disable_x_envoy_ratelimited_header',
      'disableXEnvoyRatelimitedHeader',
    ],
  },
  domain: {
    type: 'string',
    allowedNames: [
      'domain',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  enable_x_ratelimit_headers: {
    type: 'envoy.extensions.filters.http.ratelimit.v3.RateLimit.XRateLimitHeadersRFCVersion',
    allowedNames: [
      'enable_x_ratelimit_headers',
      'enableXRatelimitHeaders',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  failure_mode_deny: {
    type: 'bool',
    allowedNames: [
      'failure_mode_deny',
      'failureModeDeny',
    ],
  },
  rate_limit_service: {
    type: 'envoy.config.ratelimit.v3.RateLimitServiceConfig',
    allowedNames: [
      'rate_limit_service',
      'rateLimitService',
    ],
    required: true,
  },
  rate_limited_as_resource_exhausted: {
    type: 'bool',
    allowedNames: [
      'rate_limited_as_resource_exhausted',
      'rateLimitedAsResourceExhausted',
    ],
  },
  rate_limited_status: {
    type: 'envoy.type.v3.HttpStatus',
    allowedNames: [
      'rate_limited_status',
      'rateLimitedStatus',
    ],
  },
  request_type: {
    type: 'string',
    allowedNames: [
      'request_type',
      'requestType',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        'in': [
          'internal',
          'external',
          'both',
          '',
        ],
      },
    },
  },
  response_headers_to_add: {
    type: 'envoy.config.core.v3.HeaderValueOption',
    allowedNames: [
      'response_headers_to_add',
      'responseHeadersToAdd',
    ],
    containerType: 'list',
    constraints: {
      Repeated: {
        max_items: 10,
      },
    },
  },
  stage: {
    type: 'uint32',
    allowedNames: [
      'stage',
    ],
    constraints: {
      Uint32: {
        lte: 10,
      },
    },
  },
  timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'timeout',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    XRateLimitHeadersRFCVersion:: (import 'rate-limit-x-rate-limit-headers-rfc-version.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDisableXEnvoyRatelimitedHeader:: function(val) validator.validateField(self + { disable_x_envoy_ratelimited_header: val }, 'disable_x_envoy_ratelimited_header', type + '.withDisableXEnvoyRatelimitedHeader'),
    withDomain:: function(val) validator.validateField(self + { domain: val }, 'domain', type + '.withDomain'),
    withEnableXRatelimitHeaders:: function(val) validator.validateField(self + { enable_x_ratelimit_headers: val }, 'enable_x_ratelimit_headers', type + '.withEnableXRatelimitHeaders'),
    withFailureModeDeny:: function(val) validator.validateField(self + { failure_mode_deny: val }, 'failure_mode_deny', type + '.withFailureModeDeny'),
    withRateLimitService:: function(val) validator.validateField(self + { rate_limit_service: val }, 'rate_limit_service', type + '.withRateLimitService'),
    withRateLimitedAsResourceExhausted:: function(val) validator.validateField(self + { rate_limited_as_resource_exhausted: val }, 'rate_limited_as_resource_exhausted', type + '.withRateLimitedAsResourceExhausted'),
    withRateLimitedStatus:: function(val) validator.validateField(self + { rate_limited_status: val }, 'rate_limited_status', type + '.withRateLimitedStatus'),
    withRequestType:: function(val) validator.validateField(self + { request_type: val }, 'request_type', type + '.withRequestType'),
    withResponseHeadersToAdd:: function(val) validator.validateField(self + { response_headers_to_add: val }, 'response_headers_to_add', type + '.withResponseHeadersToAdd'),
    withStage:: function(val) validator.validateField(self + { stage: val }, 'stage', type + '.withStage'),
    withTimeout:: function(val) validator.validateField(self + { timeout: val }, 'timeout', type + '.withTimeout'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
