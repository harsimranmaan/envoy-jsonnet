// Message type: envoy.extensions.filters.network.zookeeper_proxy.v3.ZooKeeperProxy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.zookeeper_proxy.v3.ZooKeeperProxy';
local generator = import '../generator.libsonnet';
local fields = {
  access_log: {
    type: 'string',
    allowedNames: [
      'access_log',
      'accessLog',
    ],
  },
  max_packet_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_packet_bytes',
      'maxPacketBytes',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccessLog:: function(val) validator.validateField(self + { access_log: val }, 'access_log', type + '.withAccessLog'),
    withMaxPacketBytes:: function(val) validator.validateField(self + { max_packet_bytes: val }, 'max_packet_bytes', type + '.withMaxPacketBytes'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
