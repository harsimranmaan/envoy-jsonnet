// Message type: envoy.extensions.filters.common.fault.v3.FaultRateLimit
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.common.fault.v3.FaultRateLimit';
local generator = import '../generator.libsonnet';
local fields = {
  fixed_limit: {
    type: 'envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimit',
    allowedNames: [
      'fixed_limit',
      'fixedLimit',
    ],
  },
  header_limit: {
    type: 'envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimit',
    allowedNames: [
      'header_limit',
      'headerLimit',
    ],
  },
  percentage: {
    type: 'envoy.type.v3.FractionalPercent',
    allowedNames: [
      'percentage',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'fixed_limit',
      'header_limit',
    ],
    required: true,
    group: 'limit_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    FixedLimit:: (import 'fault-rate-limit-fixed-limit.libsonnet').definition,
    HeaderLimit:: (import 'fault-rate-limit-header-limit.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFixedLimit:: function(val) validator.validateField(self + { fixed_limit: val }, 'fixed_limit', type + '.withFixedLimit'),
    withHeaderLimit:: function(val) validator.validateField(self + { header_limit: val }, 'header_limit', type + '.withHeaderLimit'),
    withPercentage:: function(val) validator.validateField(self + { percentage: val }, 'percentage', type + '.withPercentage'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
