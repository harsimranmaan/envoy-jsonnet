// Message type: envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit';
local generator = import '../generator.libsonnet';
local fields = {
  requests_per_time_unit: {
    type: 'uint64',
    allowedNames: [
      'requests_per_time_unit',
      'requestsPerTimeUnit',
    ],
  },
  time_unit: {
    type: 'envoy.type.v3.RateLimitUnit',
    allowedNames: [
      'time_unit',
      'timeUnit',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withRequestsPerTimeUnit:: function(val) validator.validateField(self + { requests_per_time_unit: val }, 'requests_per_time_unit', type + '.withRequestsPerTimeUnit'),
    withTimeUnit:: function(val) validator.validateField(self + { time_unit: val }, 'time_unit', type + '.withTimeUnit'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
