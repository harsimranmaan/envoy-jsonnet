// Message type: envoy.config.common.mutation_rules.v3.HeaderMutationRules
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.common.mutation_rules.v3.HeaderMutationRules';
local generator = import '../generator.libsonnet';
local fields = {
  allow_all_routing: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'allow_all_routing',
      'allowAllRouting',
    ],
  },
  allow_envoy: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'allow_envoy',
      'allowEnvoy',
    ],
  },
  allow_expression: {
    type: 'envoy.type.matcher.v3.RegexMatcher',
    allowedNames: [
      'allow_expression',
      'allowExpression',
    ],
  },
  disallow_all: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'disallow_all',
      'disallowAll',
    ],
  },
  disallow_expression: {
    type: 'envoy.type.matcher.v3.RegexMatcher',
    allowedNames: [
      'disallow_expression',
      'disallowExpression',
    ],
  },
  disallow_is_error: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'disallow_is_error',
      'disallowIsError',
    ],
  },
  disallow_system: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'disallow_system',
      'disallowSystem',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowAllRouting:: function(val) validator.validateField(self + { allow_all_routing: val }, 'allow_all_routing', type + '.withAllowAllRouting'),
    withAllowEnvoy:: function(val) validator.validateField(self + { allow_envoy: val }, 'allow_envoy', type + '.withAllowEnvoy'),
    withAllowExpression:: function(val) validator.validateField(self + { allow_expression: val }, 'allow_expression', type + '.withAllowExpression'),
    withDisallowAll:: function(val) validator.validateField(self + { disallow_all: val }, 'disallow_all', type + '.withDisallowAll'),
    withDisallowExpression:: function(val) validator.validateField(self + { disallow_expression: val }, 'disallow_expression', type + '.withDisallowExpression'),
    withDisallowIsError:: function(val) validator.validateField(self + { disallow_is_error: val }, 'disallow_is_error', type + '.withDisallowIsError'),
    withDisallowSystem:: function(val) validator.validateField(self + { disallow_system: val }, 'disallow_system', type + '.withDisallowSystem'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
