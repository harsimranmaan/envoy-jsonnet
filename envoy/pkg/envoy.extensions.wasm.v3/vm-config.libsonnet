// Message type: envoy.extensions.wasm.v3.VmConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.wasm.v3.VmConfig';
local generator = import '../generator.libsonnet';
local fields = {
  allow_precompiled: {
    type: 'bool',
    allowedNames: [
      'allow_precompiled',
      'allowPrecompiled',
    ],
  },
  code: {
    type: 'envoy.config.core.v3.AsyncDataSource',
    allowedNames: [
      'code',
    ],
  },
  configuration: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'configuration',
    ],
  },
  environment_variables: {
    type: 'envoy.extensions.wasm.v3.EnvironmentVariables',
    allowedNames: [
      'environment_variables',
      'environmentVariables',
    ],
  },
  nack_on_code_cache_miss: {
    type: 'bool',
    allowedNames: [
      'nack_on_code_cache_miss',
      'nackOnCodeCacheMiss',
    ],
  },
  runtime: {
    type: 'string',
    allowedNames: [
      'runtime',
    ],
  },
  vm_id: {
    type: 'string',
    allowedNames: [
      'vm_id',
      'vmId',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowPrecompiled:: function(val) validator.validateField(self + { allow_precompiled: val }, 'allow_precompiled', type + '.withAllowPrecompiled'),
    withCode:: function(val) validator.validateField(self + { code: val }, 'code', type + '.withCode'),
    withConfiguration:: function(val) validator.validateField(self + { configuration: val }, 'configuration', type + '.withConfiguration'),
    withEnvironmentVariables:: function(val) validator.validateField(self + { environment_variables: val }, 'environment_variables', type + '.withEnvironmentVariables'),
    withNackOnCodeCacheMiss:: function(val) validator.validateField(self + { nack_on_code_cache_miss: val }, 'nack_on_code_cache_miss', type + '.withNackOnCodeCacheMiss'),
    withRuntime:: function(val) validator.validateField(self + { runtime: val }, 'runtime', type + '.withRuntime'),
    withVmId:: function(val) validator.validateField(self + { vm_id: val }, 'vm_id', type + '.withVmId'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
