// Message type: envoy.extensions.wasm.v3.PluginConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.wasm.v3.PluginConfig';
local generator = import '../generator.libsonnet';
local fields = {
  capability_restriction_config: {
    type: 'envoy.extensions.wasm.v3.CapabilityRestrictionConfig',
    allowedNames: [
      'capability_restriction_config',
      'capabilityRestrictionConfig',
    ],
  },
  configuration: {
    type: 'google.protobuf.Any',
    allowedNames: [
      'configuration',
    ],
  },
  fail_open: {
    type: 'bool',
    allowedNames: [
      'fail_open',
      'failOpen',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  root_id: {
    type: 'string',
    allowedNames: [
      'root_id',
      'rootId',
    ],
  },
  vm_config: {
    type: 'envoy.extensions.wasm.v3.VmConfig',
    allowedNames: [
      'vm_config',
      'vmConfig',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'vm_config',
    ],
    required: false,
    group: 'vm',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCapabilityRestrictionConfig:: function(val) validator.validateField(self + { capability_restriction_config: val }, 'capability_restriction_config', type + '.withCapabilityRestrictionConfig'),
    withConfiguration:: function(val) validator.validateField(self + { configuration: val }, 'configuration', type + '.withConfiguration'),
    withFailOpen:: function(val) validator.validateField(self + { fail_open: val }, 'fail_open', type + '.withFailOpen'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withRootId:: function(val) validator.validateField(self + { root_id: val }, 'root_id', type + '.withRootId'),
    withVmConfig:: function(val) validator.validateField(self + { vm_config: val }, 'vm_config', type + '.withVmConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
