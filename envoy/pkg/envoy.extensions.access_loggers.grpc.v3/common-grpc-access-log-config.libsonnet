// Message type: envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig';
local generator = import '../generator.libsonnet';
local fields = {
  buffer_flush_interval: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'buffer_flush_interval',
      'bufferFlushInterval',
    ],
    constraints: {
      Duration: {
        gt: {},
      },
    },
  },
  buffer_size_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'buffer_size_bytes',
      'bufferSizeBytes',
    ],
  },
  custom_tags: {
    type: 'envoy.type.tracing.v3.CustomTag',
    allowedNames: [
      'custom_tags',
      'customTags',
    ],
    containerType: 'list',
  },
  filter_state_objects_to_log: {
    type: 'string',
    allowedNames: [
      'filter_state_objects_to_log',
      'filterStateObjectsToLog',
    ],
    containerType: 'list',
  },
  grpc_service: {
    type: 'envoy.config.core.v3.GrpcService',
    allowedNames: [
      'grpc_service',
      'grpcService',
    ],
    required: true,
  },
  grpc_stream_retry_policy: {
    type: 'envoy.config.core.v3.RetryPolicy',
    allowedNames: [
      'grpc_stream_retry_policy',
      'grpcStreamRetryPolicy',
    ],
  },
  log_name: {
    type: 'string',
    allowedNames: [
      'log_name',
      'logName',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  transport_api_version: {
    type: 'envoy.config.core.v3.ApiVersion',
    allowedNames: [
      'transport_api_version',
      'transportApiVersion',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBufferFlushInterval:: function(val) validator.validateField(self + { buffer_flush_interval: val }, 'buffer_flush_interval', type + '.withBufferFlushInterval'),
    withBufferSizeBytes:: function(val) validator.validateField(self + { buffer_size_bytes: val }, 'buffer_size_bytes', type + '.withBufferSizeBytes'),
    withCustomTags:: function(val) validator.validateField(self + { custom_tags: val }, 'custom_tags', type + '.withCustomTags'),
    withFilterStateObjectsToLog:: function(val) validator.validateField(self + { filter_state_objects_to_log: val }, 'filter_state_objects_to_log', type + '.withFilterStateObjectsToLog'),
    withGrpcService:: function(val) validator.validateField(self + { grpc_service: val }, 'grpc_service', type + '.withGrpcService'),
    withGrpcStreamRetryPolicy:: function(val) validator.validateField(self + { grpc_stream_retry_policy: val }, 'grpc_stream_retry_policy', type + '.withGrpcStreamRetryPolicy'),
    withLogName:: function(val) validator.validateField(self + { log_name: val }, 'log_name', type + '.withLogName'),
    withTransportApiVersion:: function(val) validator.validateField(self + { transport_api_version: val }, 'transport_api_version', type + '.withTransportApiVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
