// Message type: envoy.config.common.matcher.v3.MatchPredicate
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.common.matcher.v3.MatchPredicate';
local generator = import '../generator.libsonnet';
local fields = {
  and_match: {
    type: 'envoy.config.common.matcher.v3.MatchPredicate.MatchSet',
    allowedNames: [
      'and_match',
      'andMatch',
    ],
  },
  any_match: {
    type: 'bool',
    allowedNames: [
      'any_match',
      'anyMatch',
    ],
    constraints: {
      Bool: {
        const: true,
      },
    },
  },
  http_request_generic_body_match: {
    type: 'envoy.config.common.matcher.v3.HttpGenericBodyMatch',
    allowedNames: [
      'http_request_generic_body_match',
      'httpRequestGenericBodyMatch',
    ],
  },
  http_request_headers_match: {
    type: 'envoy.config.common.matcher.v3.HttpHeadersMatch',
    allowedNames: [
      'http_request_headers_match',
      'httpRequestHeadersMatch',
    ],
  },
  http_request_trailers_match: {
    type: 'envoy.config.common.matcher.v3.HttpHeadersMatch',
    allowedNames: [
      'http_request_trailers_match',
      'httpRequestTrailersMatch',
    ],
  },
  http_response_generic_body_match: {
    type: 'envoy.config.common.matcher.v3.HttpGenericBodyMatch',
    allowedNames: [
      'http_response_generic_body_match',
      'httpResponseGenericBodyMatch',
    ],
  },
  http_response_headers_match: {
    type: 'envoy.config.common.matcher.v3.HttpHeadersMatch',
    allowedNames: [
      'http_response_headers_match',
      'httpResponseHeadersMatch',
    ],
  },
  http_response_trailers_match: {
    type: 'envoy.config.common.matcher.v3.HttpHeadersMatch',
    allowedNames: [
      'http_response_trailers_match',
      'httpResponseTrailersMatch',
    ],
  },
  not_match: {
    type: 'envoy.config.common.matcher.v3.MatchPredicate',
    allowedNames: [
      'not_match',
      'notMatch',
    ],
  },
  or_match: {
    type: 'envoy.config.common.matcher.v3.MatchPredicate.MatchSet',
    allowedNames: [
      'or_match',
      'orMatch',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'or_match',
      'and_match',
      'not_match',
      'any_match',
      'http_request_headers_match',
      'http_request_trailers_match',
      'http_response_headers_match',
      'http_response_trailers_match',
      'http_request_generic_body_match',
      'http_response_generic_body_match',
    ],
    required: true,
    group: 'rule',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    MatchSet:: (import 'match-predicate-match-set.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAndMatch:: function(val) validator.validateField(self + { and_match: val }, 'and_match', type + '.withAndMatch'),
    withAnyMatch:: function(val) validator.validateField(self + { any_match: val }, 'any_match', type + '.withAnyMatch'),
    withHttpRequestGenericBodyMatch:: function(val) validator.validateField(self + { http_request_generic_body_match: val }, 'http_request_generic_body_match', type + '.withHttpRequestGenericBodyMatch'),
    withHttpRequestHeadersMatch:: function(val) validator.validateField(self + { http_request_headers_match: val }, 'http_request_headers_match', type + '.withHttpRequestHeadersMatch'),
    withHttpRequestTrailersMatch:: function(val) validator.validateField(self + { http_request_trailers_match: val }, 'http_request_trailers_match', type + '.withHttpRequestTrailersMatch'),
    withHttpResponseGenericBodyMatch:: function(val) validator.validateField(self + { http_response_generic_body_match: val }, 'http_response_generic_body_match', type + '.withHttpResponseGenericBodyMatch'),
    withHttpResponseHeadersMatch:: function(val) validator.validateField(self + { http_response_headers_match: val }, 'http_response_headers_match', type + '.withHttpResponseHeadersMatch'),
    withHttpResponseTrailersMatch:: function(val) validator.validateField(self + { http_response_trailers_match: val }, 'http_response_trailers_match', type + '.withHttpResponseTrailersMatch'),
    withNotMatch:: function(val) validator.validateField(self + { not_match: val }, 'not_match', type + '.withNotMatch'),
    withOrMatch:: function(val) validator.validateField(self + { or_match: val }, 'or_match', type + '.withOrMatch'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
