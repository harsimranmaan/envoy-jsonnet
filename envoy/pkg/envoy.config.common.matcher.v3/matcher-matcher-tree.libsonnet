// Message type: envoy.config.common.matcher.v3.Matcher.MatcherTree
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.common.matcher.v3.Matcher.MatcherTree';
local generator = import '../generator.libsonnet';
local fields = {
  custom_match: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'custom_match',
      'customMatch',
    ],
  },
  exact_match_map: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap',
    allowedNames: [
      'exact_match_map',
      'exactMatchMap',
    ],
  },
  input: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'input',
    ],
    required: true,
  },
  prefix_match_map: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap',
    allowedNames: [
      'prefix_match_map',
      'prefixMatchMap',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'exact_match_map',
      'prefix_match_map',
      'custom_match',
    ],
    required: true,
    group: 'tree_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    MatchMap:: (import 'matcher-matcher-tree-match-map.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCustomMatch:: function(val) validator.validateField(self + { custom_match: val }, 'custom_match', type + '.withCustomMatch'),
    withExactMatchMap:: function(val) validator.validateField(self + { exact_match_map: val }, 'exact_match_map', type + '.withExactMatchMap'),
    withInput:: function(val) validator.validateField(self + { input: val }, 'input', type + '.withInput'),
    withPrefixMatchMap:: function(val) validator.validateField(self + { prefix_match_map: val }, 'prefix_match_map', type + '.withPrefixMatchMap'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
