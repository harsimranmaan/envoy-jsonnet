// Message type: envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate';
local generator = import '../generator.libsonnet';
local fields = {
  and_matcher: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList',
    allowedNames: [
      'and_matcher',
      'andMatcher',
    ],
  },
  not_matcher: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate',
    allowedNames: [
      'not_matcher',
      'notMatcher',
    ],
  },
  or_matcher: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList',
    allowedNames: [
      'or_matcher',
      'orMatcher',
    ],
  },
  single_predicate: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate',
    allowedNames: [
      'single_predicate',
      'singlePredicate',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'single_predicate',
      'or_matcher',
      'and_matcher',
      'not_matcher',
    ],
    required: true,
    group: 'match_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    SinglePredicate:: (import 'matcher-matcher-list-predicate-single-predicate.libsonnet').definition,
    PredicateList:: (import 'matcher-matcher-list-predicate-predicate-list.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAndMatcher:: function(val) validator.validateField(self + { and_matcher: val }, 'and_matcher', type + '.withAndMatcher'),
    withNotMatcher:: function(val) validator.validateField(self + { not_matcher: val }, 'not_matcher', type + '.withNotMatcher'),
    withOrMatcher:: function(val) validator.validateField(self + { or_matcher: val }, 'or_matcher', type + '.withOrMatcher'),
    withSinglePredicate:: function(val) validator.validateField(self + { single_predicate: val }, 'single_predicate', type + '.withSinglePredicate'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
