// Message type: envoy.config.common.matcher.v3.Matcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.common.matcher.v3.Matcher';
local generator = import '../generator.libsonnet';
local fields = {
  matcher_list: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherList',
    allowedNames: [
      'matcher_list',
      'matcherList',
    ],
  },
  matcher_tree: {
    type: 'envoy.config.common.matcher.v3.Matcher.MatcherTree',
    allowedNames: [
      'matcher_tree',
      'matcherTree',
    ],
  },
  on_no_match: {
    type: 'envoy.config.common.matcher.v3.Matcher.OnMatch',
    allowedNames: [
      'on_no_match',
      'onNoMatch',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'matcher_list',
      'matcher_tree',
    ],
    required: true,
    group: 'matcher_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    OnMatch:: (import 'matcher-on-match.libsonnet').definition,
    MatcherList:: (import 'matcher-matcher-list.libsonnet').definition,
    MatcherTree:: (import 'matcher-matcher-tree.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withMatcherList:: function(val) validator.validateField(self + { matcher_list: val }, 'matcher_list', type + '.withMatcherList'),
    withMatcherTree:: function(val) validator.validateField(self + { matcher_tree: val }, 'matcher_tree', type + '.withMatcherTree'),
    withOnNoMatch:: function(val) validator.validateField(self + { on_no_match: val }, 'on_no_match', type + '.withOnNoMatch'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
