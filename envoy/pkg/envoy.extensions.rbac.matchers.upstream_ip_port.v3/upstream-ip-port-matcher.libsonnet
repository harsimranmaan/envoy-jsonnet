// Message type: envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher';
local generator = import '../generator.libsonnet';
local fields = {
  upstream_ip: {
    type: 'envoy.config.core.v3.CidrRange',
    allowedNames: [
      'upstream_ip',
      'upstreamIp',
    ],
  },
  upstream_port_range: {
    type: 'envoy.type.v3.Int64Range',
    allowedNames: [
      'upstream_port_range',
      'upstreamPortRange',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withUpstreamIp:: function(val) validator.validateField(self + { upstream_ip: val }, 'upstream_ip', type + '.withUpstreamIp'),
    withUpstreamPortRange:: function(val) validator.validateField(self + { upstream_port_range: val }, 'upstream_port_range', type + '.withUpstreamPortRange'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
