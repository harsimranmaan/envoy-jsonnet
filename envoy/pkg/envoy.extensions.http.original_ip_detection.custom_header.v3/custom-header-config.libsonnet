// Message type: envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig';
local generator = import '../generator.libsonnet';
local fields = {
  allow_extension_to_set_address_as_trusted: {
    type: 'bool',
    allowedNames: [
      'allow_extension_to_set_address_as_trusted',
      'allowExtensionToSetAddressAsTrusted',
    ],
  },
  header_name: {
    type: 'string',
    allowedNames: [
      'header_name',
      'headerName',
    ],
    constraints: {
      String_: {
        WellKnown: {
          WellKnownRegex: 1,
        },
        min_len: 1,
        strict: true,
      },
    },
  },
  reject_with_status: {
    type: 'envoy.type.v3.HttpStatus',
    allowedNames: [
      'reject_with_status',
      'rejectWithStatus',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowExtensionToSetAddressAsTrusted:: function(val) validator.validateField(self + { allow_extension_to_set_address_as_trusted: val }, 'allow_extension_to_set_address_as_trusted', type + '.withAllowExtensionToSetAddressAsTrusted'),
    withHeaderName:: function(val) validator.validateField(self + { header_name: val }, 'header_name', type + '.withHeaderName'),
    withRejectWithStatus:: function(val) validator.validateField(self + { reject_with_status: val }, 'reject_with_status', type + '.withRejectWithStatus'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
