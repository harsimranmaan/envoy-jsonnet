// Message type: envoy.extensions.filters.http.compressor.v3.Compressor
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.compressor.v3.Compressor';
local generator = import '../generator.libsonnet';
local fields = {
  choose_first: {
    type: 'bool',
    allowedNames: [
      'choose_first',
      'chooseFirst',
    ],
  },
  compressor_library: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'compressor_library',
      'compressorLibrary',
    ],
    required: true,
  },
  content_length: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'content_length',
      'contentLength',
    ],
  },
  content_type: {
    type: 'string',
    allowedNames: [
      'content_type',
      'contentType',
    ],
    containerType: 'list',
  },
  disable_on_etag_header: {
    type: 'bool',
    allowedNames: [
      'disable_on_etag_header',
      'disableOnEtagHeader',
    ],
  },
  remove_accept_encoding_header: {
    type: 'bool',
    allowedNames: [
      'remove_accept_encoding_header',
      'removeAcceptEncodingHeader',
    ],
  },
  request_direction_config: {
    type: 'envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig',
    allowedNames: [
      'request_direction_config',
      'requestDirectionConfig',
    ],
  },
  response_direction_config: {
    type: 'envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig',
    allowedNames: [
      'response_direction_config',
      'responseDirectionConfig',
    ],
  },
  runtime_enabled: {
    type: 'envoy.config.core.v3.RuntimeFeatureFlag',
    allowedNames: [
      'runtime_enabled',
      'runtimeEnabled',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    CommonDirectionConfig:: (import 'compressor-common-direction-config.libsonnet').definition,
    RequestDirectionConfig:: (import 'compressor-request-direction-config.libsonnet').definition,
    ResponseDirectionConfig:: (import 'compressor-response-direction-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withChooseFirst:: function(val) validator.validateField(self + { choose_first: val }, 'choose_first', type + '.withChooseFirst'),
    withCompressorLibrary:: function(val) validator.validateField(self + { compressor_library: val }, 'compressor_library', type + '.withCompressorLibrary'),
    withContentLength:: function(val) validator.validateField(self + { content_length: val }, 'content_length', type + '.withContentLength'),
    withContentType:: function(val) validator.validateField(self + { content_type: val }, 'content_type', type + '.withContentType'),
    withDisableOnEtagHeader:: function(val) validator.validateField(self + { disable_on_etag_header: val }, 'disable_on_etag_header', type + '.withDisableOnEtagHeader'),
    withRemoveAcceptEncodingHeader:: function(val) validator.validateField(self + { remove_accept_encoding_header: val }, 'remove_accept_encoding_header', type + '.withRemoveAcceptEncodingHeader'),
    withRequestDirectionConfig:: function(val) validator.validateField(self + { request_direction_config: val }, 'request_direction_config', type + '.withRequestDirectionConfig'),
    withResponseDirectionConfig:: function(val) validator.validateField(self + { response_direction_config: val }, 'response_direction_config', type + '.withResponseDirectionConfig'),
    withRuntimeEnabled:: function(val) validator.validateField(self + { runtime_enabled: val }, 'runtime_enabled', type + '.withRuntimeEnabled'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
