// Message type: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig';
local generator = import '../generator.libsonnet';
local fields = {
  concurrency_limit_params: {
    type: 'envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams',
    allowedNames: [
      'concurrency_limit_params',
      'concurrencyLimitParams',
    ],
    required: true,
  },
  min_rtt_calc_params: {
    type: 'envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams',
    allowedNames: [
      'min_rtt_calc_params',
      'minRttCalcParams',
    ],
    required: true,
  },
  sample_aggregate_percentile: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'sample_aggregate_percentile',
      'sampleAggregatePercentile',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ConcurrencyLimitCalculationParams:: (import 'gradient-controller-config-concurrency-limit-calculation-params.libsonnet').definition,
    MinimumRTTCalculationParams:: (import 'gradient-controller-config-minimum-rtt-calculation-params.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConcurrencyLimitParams:: function(val) validator.validateField(self + { concurrency_limit_params: val }, 'concurrency_limit_params', type + '.withConcurrencyLimitParams'),
    withMinRttCalcParams:: function(val) validator.validateField(self + { min_rtt_calc_params: val }, 'min_rtt_calc_params', type + '.withMinRttCalcParams'),
    withSampleAggregatePercentile:: function(val) validator.validateField(self + { sample_aggregate_percentile: val }, 'sample_aggregate_percentile', type + '.withSampleAggregatePercentile'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
