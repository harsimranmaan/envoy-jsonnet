// Message type: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams';
local generator = import '../generator.libsonnet';
local fields = {
  buffer: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'buffer',
    ],
  },
  interval: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'interval',
    ],
    constraints: {
      Duration: {
        gte: {
          nanos: 1000000,
        },
        required: true,
      },
    },
  },
  jitter: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'jitter',
    ],
  },
  min_concurrency: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'min_concurrency',
      'minConcurrency',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
  request_count: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'request_count',
      'requestCount',
    ],
    constraints: {
      Uint32: {
        gt: 0,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBuffer:: function(val) validator.validateField(self + { buffer: val }, 'buffer', type + '.withBuffer'),
    withInterval:: function(val) validator.validateField(self + { interval: val }, 'interval', type + '.withInterval'),
    withJitter:: function(val) validator.validateField(self + { jitter: val }, 'jitter', type + '.withJitter'),
    withMinConcurrency:: function(val) validator.validateField(self + { min_concurrency: val }, 'min_concurrency', type + '.withMinConcurrency'),
    withRequestCount:: function(val) validator.validateField(self + { request_count: val }, 'request_count', type + '.withRequestCount'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
