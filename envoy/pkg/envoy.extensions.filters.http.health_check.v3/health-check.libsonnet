// Message type: envoy.extensions.filters.http.health_check.v3.HealthCheck
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.health_check.v3.HealthCheck';
local generator = import '../generator.libsonnet';
local fields = {
  cache_time: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'cache_time',
      'cacheTime',
    ],
  },
  cluster_min_healthy_percentages: {
    type: 'envoy.type.v3.Percent',
    allowedNames: [
      'cluster_min_healthy_percentages',
      'clusterMinHealthyPercentages',
    ],
    containerType: 'map',
  },
  headers: {
    type: 'envoy.config.route.v3.HeaderMatcher',
    allowedNames: [
      'headers',
    ],
    containerType: 'list',
  },
  pass_through_mode: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'pass_through_mode',
      'passThroughMode',
    ],
    required: true,
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ClusterMinHealthyPercentagesEntry:: (import 'health-check-cluster-min-healthy-percentages-entry.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCacheTime:: function(val) validator.validateField(self + { cache_time: val }, 'cache_time', type + '.withCacheTime'),
    withClusterMinHealthyPercentages:: function(val) validator.validateField(self + { cluster_min_healthy_percentages: val }, 'cluster_min_healthy_percentages', type + '.withClusterMinHealthyPercentages'),
    withHeaders:: function(val) validator.validateField(self + { headers: val }, 'headers', type + '.withHeaders'),
    withPassThroughMode:: function(val) validator.validateField(self + { pass_through_mode: val }, 'pass_through_mode', type + '.withPassThroughMode'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
