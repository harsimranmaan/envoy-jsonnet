// Message type: envoy.extensions.transport_sockets.tls.v3.TlsCertificate
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.transport_sockets.tls.v3.TlsCertificate';
local generator = import '../generator.libsonnet';
local fields = {
  certificate_chain: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'certificate_chain',
      'certificateChain',
    ],
  },
  ocsp_staple: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'ocsp_staple',
      'ocspStaple',
    ],
  },
  password: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'password',
    ],
  },
  pkcs12: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'pkcs12',
    ],
  },
  private_key: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'private_key',
      'privateKey',
    ],
  },
  private_key_provider: {
    type: 'envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider',
    allowedNames: [
      'private_key_provider',
      'privateKeyProvider',
    ],
  },
  signed_certificate_timestamp: {
    type: 'envoy.config.core.v3.DataSource',
    allowedNames: [
      'signed_certificate_timestamp',
      'signedCertificateTimestamp',
    ],
    containerType: 'list',
  },
  watched_directory: {
    type: 'envoy.config.core.v3.WatchedDirectory',
    allowedNames: [
      'watched_directory',
      'watchedDirectory',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCertificateChain:: function(val) validator.validateField(self + { certificate_chain: val }, 'certificate_chain', type + '.withCertificateChain'),
    withOcspStaple:: function(val) validator.validateField(self + { ocsp_staple: val }, 'ocsp_staple', type + '.withOcspStaple'),
    withPassword:: function(val) validator.validateField(self + { password: val }, 'password', type + '.withPassword'),
    withPkcs12:: function(val) validator.validateField(self + { pkcs12: val }, 'pkcs12', type + '.withPkcs12'),
    withPrivateKey:: function(val) validator.validateField(self + { private_key: val }, 'private_key', type + '.withPrivateKey'),
    withPrivateKeyProvider:: function(val) validator.validateField(self + { private_key_provider: val }, 'private_key_provider', type + '.withPrivateKeyProvider'),
    withSignedCertificateTimestamp:: function(val) validator.validateField(self + { signed_certificate_timestamp: val }, 'signed_certificate_timestamp', type + '.withSignedCertificateTimestamp'),
    withWatchedDirectory:: function(val) validator.validateField(self + { watched_directory: val }, 'watched_directory', type + '.withWatchedDirectory'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
