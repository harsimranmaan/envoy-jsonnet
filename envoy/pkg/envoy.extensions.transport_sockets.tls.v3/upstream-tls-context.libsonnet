// Message type: envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext';
local generator = import '../generator.libsonnet';
local fields = {
  allow_renegotiation: {
    type: 'bool',
    allowedNames: [
      'allow_renegotiation',
      'allowRenegotiation',
    ],
  },
  common_tls_context: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext',
    allowedNames: [
      'common_tls_context',
      'commonTlsContext',
    ],
  },
  max_session_keys: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_session_keys',
      'maxSessionKeys',
    ],
  },
  sni: {
    type: 'string',
    allowedNames: [
      'sni',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        max_bytes: 255,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAllowRenegotiation:: function(val) validator.validateField(self + { allow_renegotiation: val }, 'allow_renegotiation', type + '.withAllowRenegotiation'),
    withCommonTlsContext:: function(val) validator.validateField(self + { common_tls_context: val }, 'common_tls_context', type + '.withCommonTlsContext'),
    withMaxSessionKeys:: function(val) validator.validateField(self + { max_session_keys: val }, 'max_session_keys', type + '.withMaxSessionKeys'),
    withSni:: function(val) validator.validateField(self + { sni: val }, 'sni', type + '.withSni'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
