// Message type: envoy.extensions.transport_sockets.tls.v3.Secret
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.transport_sockets.tls.v3.Secret';
local generator = import '../generator.libsonnet';
local fields = {
  generic_secret: {
    type: 'envoy.extensions.transport_sockets.tls.v3.GenericSecret',
    allowedNames: [
      'generic_secret',
      'genericSecret',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  session_ticket_keys: {
    type: 'envoy.extensions.transport_sockets.tls.v3.TlsSessionTicketKeys',
    allowedNames: [
      'session_ticket_keys',
      'sessionTicketKeys',
    ],
  },
  tls_certificate: {
    type: 'envoy.extensions.transport_sockets.tls.v3.TlsCertificate',
    allowedNames: [
      'tls_certificate',
      'tlsCertificate',
    ],
  },
  validation_context: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext',
    allowedNames: [
      'validation_context',
      'validationContext',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'tls_certificate',
      'session_ticket_keys',
      'validation_context',
      'generic_secret',
    ],
    required: false,
    group: 'type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withGenericSecret:: function(val) validator.validateField(self + { generic_secret: val }, 'generic_secret', type + '.withGenericSecret'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withSessionTicketKeys:: function(val) validator.validateField(self + { session_ticket_keys: val }, 'session_ticket_keys', type + '.withSessionTicketKeys'),
    withTlsCertificate:: function(val) validator.validateField(self + { tls_certificate: val }, 'tls_certificate', type + '.withTlsCertificate'),
    withValidationContext:: function(val) validator.validateField(self + { validation_context: val }, 'validation_context', type + '.withValidationContext'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
