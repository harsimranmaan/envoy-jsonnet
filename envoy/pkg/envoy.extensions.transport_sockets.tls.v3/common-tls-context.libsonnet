// Message type: envoy.extensions.transport_sockets.tls.v3.CommonTlsContext
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext';
local generator = import '../generator.libsonnet';
local fields = {
  alpn_protocols: {
    type: 'string',
    allowedNames: [
      'alpn_protocols',
      'alpnProtocols',
    ],
    containerType: 'list',
  },
  combined_validation_context: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext',
    allowedNames: [
      'combined_validation_context',
      'combinedValidationContext',
    ],
  },
  custom_handshaker: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'custom_handshaker',
      'customHandshaker',
    ],
  },
  key_log: {
    type: 'envoy.extensions.transport_sockets.tls.v3.TlsKeyLog',
    allowedNames: [
      'key_log',
      'keyLog',
    ],
  },
  tls_certificate_certificate_provider: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider',
    allowedNames: [
      'tls_certificate_certificate_provider',
      'tlsCertificateCertificateProvider',
    ],
  },
  tls_certificate_certificate_provider_instance: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance',
    allowedNames: [
      'tls_certificate_certificate_provider_instance',
      'tlsCertificateCertificateProviderInstance',
    ],
  },
  tls_certificate_provider_instance: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CertificateProviderPluginInstance',
    allowedNames: [
      'tls_certificate_provider_instance',
      'tlsCertificateProviderInstance',
    ],
  },
  tls_certificate_sds_secret_configs: {
    type: 'envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig',
    allowedNames: [
      'tls_certificate_sds_secret_configs',
      'tlsCertificateSdsSecretConfigs',
    ],
    containerType: 'list',
  },
  tls_certificates: {
    type: 'envoy.extensions.transport_sockets.tls.v3.TlsCertificate',
    allowedNames: [
      'tls_certificates',
      'tlsCertificates',
    ],
    containerType: 'list',
  },
  tls_params: {
    type: 'envoy.extensions.transport_sockets.tls.v3.TlsParameters',
    allowedNames: [
      'tls_params',
      'tlsParams',
    ],
  },
  validation_context: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext',
    allowedNames: [
      'validation_context',
      'validationContext',
    ],
  },
  validation_context_certificate_provider: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider',
    allowedNames: [
      'validation_context_certificate_provider',
      'validationContextCertificateProvider',
    ],
  },
  validation_context_certificate_provider_instance: {
    type: 'envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance',
    allowedNames: [
      'validation_context_certificate_provider_instance',
      'validationContextCertificateProviderInstance',
    ],
  },
  validation_context_sds_secret_config: {
    type: 'envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig',
    allowedNames: [
      'validation_context_sds_secret_config',
      'validationContextSdsSecretConfig',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'validation_context',
      'validation_context_sds_secret_config',
      'combined_validation_context',
      'validation_context_certificate_provider',
      'validation_context_certificate_provider_instance',
    ],
    required: false,
    group: 'validation_context_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    CertificateProvider:: (import 'common-tls-context-certificate-provider.libsonnet').definition,
    CertificateProviderInstance:: (import 'common-tls-context-certificate-provider-instance.libsonnet').definition,
    CombinedCertificateValidationContext:: (import 'common-tls-context-combined-certificate-validation-context.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAlpnProtocols:: function(val) validator.validateField(self + { alpn_protocols: val }, 'alpn_protocols', type + '.withAlpnProtocols'),
    withCombinedValidationContext:: function(val) validator.validateField(self + { combined_validation_context: val }, 'combined_validation_context', type + '.withCombinedValidationContext'),
    withCustomHandshaker:: function(val) validator.validateField(self + { custom_handshaker: val }, 'custom_handshaker', type + '.withCustomHandshaker'),
    withKeyLog:: function(val) validator.validateField(self + { key_log: val }, 'key_log', type + '.withKeyLog'),
    withTlsCertificateCertificateProvider:: function(val) validator.validateField(self + { tls_certificate_certificate_provider: val }, 'tls_certificate_certificate_provider', type + '.withTlsCertificateCertificateProvider'),
    withTlsCertificateCertificateProviderInstance:: function(val) validator.validateField(self + { tls_certificate_certificate_provider_instance: val }, 'tls_certificate_certificate_provider_instance', type + '.withTlsCertificateCertificateProviderInstance'),
    withTlsCertificateProviderInstance:: function(val) validator.validateField(self + { tls_certificate_provider_instance: val }, 'tls_certificate_provider_instance', type + '.withTlsCertificateProviderInstance'),
    withTlsCertificateSdsSecretConfigs:: function(val) validator.validateField(self + { tls_certificate_sds_secret_configs: val }, 'tls_certificate_sds_secret_configs', type + '.withTlsCertificateSdsSecretConfigs'),
    withTlsCertificates:: function(val) validator.validateField(self + { tls_certificates: val }, 'tls_certificates', type + '.withTlsCertificates'),
    withTlsParams:: function(val) validator.validateField(self + { tls_params: val }, 'tls_params', type + '.withTlsParams'),
    withValidationContext:: function(val) validator.validateField(self + { validation_context: val }, 'validation_context', type + '.withValidationContext'),
    withValidationContextCertificateProvider:: function(val) validator.validateField(self + { validation_context_certificate_provider: val }, 'validation_context_certificate_provider', type + '.withValidationContextCertificateProvider'),
    withValidationContextCertificateProviderInstance:: function(val) validator.validateField(self + { validation_context_certificate_provider_instance: val }, 'validation_context_certificate_provider_instance', type + '.withValidationContextCertificateProviderInstance'),
    withValidationContextSdsSecretConfig:: function(val) validator.validateField(self + { validation_context_sds_secret_config: val }, 'validation_context_sds_secret_config', type + '.withValidationContextSdsSecretConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
