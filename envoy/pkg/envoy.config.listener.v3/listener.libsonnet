// Message type: envoy.config.listener.v3.Listener
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.listener.v3.Listener';
local generator = import '../generator.libsonnet';
local fields = {
  access_log: {
    type: 'envoy.config.accesslog.v3.AccessLog',
    allowedNames: [
      'access_log',
      'accessLog',
    ],
    containerType: 'list',
  },
  additional_addresses: {
    type: 'envoy.config.listener.v3.AdditionalAddress',
    allowedNames: [
      'additional_addresses',
      'additionalAddresses',
    ],
    containerType: 'list',
  },
  address: {
    type: 'envoy.config.core.v3.Address',
    allowedNames: [
      'address',
    ],
  },
  api_listener: {
    type: 'envoy.config.listener.v3.ApiListener',
    allowedNames: [
      'api_listener',
      'apiListener',
    ],
  },
  bind_to_port: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'bind_to_port',
      'bindToPort',
    ],
  },
  connection_balance_config: {
    type: 'envoy.config.listener.v3.Listener.ConnectionBalanceConfig',
    allowedNames: [
      'connection_balance_config',
      'connectionBalanceConfig',
    ],
  },
  continue_on_listener_filters_timeout: {
    type: 'bool',
    allowedNames: [
      'continue_on_listener_filters_timeout',
      'continueOnListenerFiltersTimeout',
    ],
  },
  default_filter_chain: {
    type: 'envoy.config.listener.v3.FilterChain',
    allowedNames: [
      'default_filter_chain',
      'defaultFilterChain',
    ],
  },
  deprecated_v1: {
    type: 'envoy.config.listener.v3.Listener.DeprecatedV1',
    allowedNames: [
      'deprecated_v1',
      'deprecatedV1',
    ],
  },
  drain_type: {
    type: 'envoy.config.listener.v3.Listener.DrainType',
    allowedNames: [
      'drain_type',
      'drainType',
    ],
  },
  enable_mptcp: {
    type: 'bool',
    allowedNames: [
      'enable_mptcp',
      'enableMptcp',
    ],
  },
  enable_reuse_port: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'enable_reuse_port',
      'enableReusePort',
    ],
  },
  filter_chain_matcher: {
    type: 'xds.type.matcher.v3.Matcher',
    allowedNames: [
      'filter_chain_matcher',
      'filterChainMatcher',
    ],
  },
  filter_chains: {
    type: 'envoy.config.listener.v3.FilterChain',
    allowedNames: [
      'filter_chains',
      'filterChains',
    ],
    containerType: 'list',
  },
  freebind: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'freebind',
    ],
  },
  ignore_global_conn_limit: {
    type: 'bool',
    allowedNames: [
      'ignore_global_conn_limit',
      'ignoreGlobalConnLimit',
    ],
  },
  internal_listener: {
    type: 'envoy.config.listener.v3.Listener.InternalListenerConfig',
    allowedNames: [
      'internal_listener',
      'internalListener',
    ],
  },
  listener_filters: {
    type: 'envoy.config.listener.v3.ListenerFilter',
    allowedNames: [
      'listener_filters',
      'listenerFilters',
    ],
    containerType: 'list',
  },
  listener_filters_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'listener_filters_timeout',
      'listenerFiltersTimeout',
    ],
  },
  metadata: {
    type: 'envoy.config.core.v3.Metadata',
    allowedNames: [
      'metadata',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  per_connection_buffer_limit_bytes: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'per_connection_buffer_limit_bytes',
      'perConnectionBufferLimitBytes',
    ],
  },
  reuse_port: {
    type: 'bool',
    allowedNames: [
      'reuse_port',
      'reusePort',
    ],
  },
  socket_options: {
    type: 'envoy.config.core.v3.SocketOption',
    allowedNames: [
      'socket_options',
      'socketOptions',
    ],
    containerType: 'list',
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
  },
  tcp_backlog_size: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'tcp_backlog_size',
      'tcpBacklogSize',
    ],
  },
  tcp_fast_open_queue_length: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'tcp_fast_open_queue_length',
      'tcpFastOpenQueueLength',
    ],
  },
  traffic_direction: {
    type: 'envoy.config.core.v3.TrafficDirection',
    allowedNames: [
      'traffic_direction',
      'trafficDirection',
    ],
  },
  transparent: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'transparent',
    ],
  },
  udp_listener_config: {
    type: 'envoy.config.listener.v3.UdpListenerConfig',
    allowedNames: [
      'udp_listener_config',
      'udpListenerConfig',
    ],
  },
  use_original_dst: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'use_original_dst',
      'useOriginalDst',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'internal_listener',
    ],
    required: false,
    group: 'listener_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    DrainType:: (import 'listener-drain-type.libsonnet').definition,
    DeprecatedV1:: (import 'listener-deprecated-v-1.libsonnet').definition,
    ConnectionBalanceConfig:: (import 'listener-connection-balance-config.libsonnet').definition,
    InternalListenerConfig:: (import 'listener-internal-listener-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAccessLog:: function(val) validator.validateField(self + { access_log: val }, 'access_log', type + '.withAccessLog'),
    withAdditionalAddresses:: function(val) validator.validateField(self + { additional_addresses: val }, 'additional_addresses', type + '.withAdditionalAddresses'),
    withAddress:: function(val) validator.validateField(self + { address: val }, 'address', type + '.withAddress'),
    withApiListener:: function(val) validator.validateField(self + { api_listener: val }, 'api_listener', type + '.withApiListener'),
    withBindToPort:: function(val) validator.validateField(self + { bind_to_port: val }, 'bind_to_port', type + '.withBindToPort'),
    withConnectionBalanceConfig:: function(val) validator.validateField(self + { connection_balance_config: val }, 'connection_balance_config', type + '.withConnectionBalanceConfig'),
    withContinueOnListenerFiltersTimeout:: function(val) validator.validateField(self + { continue_on_listener_filters_timeout: val }, 'continue_on_listener_filters_timeout', type + '.withContinueOnListenerFiltersTimeout'),
    withDefaultFilterChain:: function(val) validator.validateField(self + { default_filter_chain: val }, 'default_filter_chain', type + '.withDefaultFilterChain'),
    withDeprecatedV1:: function(val) validator.validateField(self + { deprecated_v1: val }, 'deprecated_v1', type + '.withDeprecatedV1'),
    withDrainType:: function(val) validator.validateField(self + { drain_type: val }, 'drain_type', type + '.withDrainType'),
    withEnableMptcp:: function(val) validator.validateField(self + { enable_mptcp: val }, 'enable_mptcp', type + '.withEnableMptcp'),
    withEnableReusePort:: function(val) validator.validateField(self + { enable_reuse_port: val }, 'enable_reuse_port', type + '.withEnableReusePort'),
    withFilterChainMatcher:: function(val) validator.validateField(self + { filter_chain_matcher: val }, 'filter_chain_matcher', type + '.withFilterChainMatcher'),
    withFilterChains:: function(val) validator.validateField(self + { filter_chains: val }, 'filter_chains', type + '.withFilterChains'),
    withFreebind:: function(val) validator.validateField(self + { freebind: val }, 'freebind', type + '.withFreebind'),
    withIgnoreGlobalConnLimit:: function(val) validator.validateField(self + { ignore_global_conn_limit: val }, 'ignore_global_conn_limit', type + '.withIgnoreGlobalConnLimit'),
    withInternalListener:: function(val) validator.validateField(self + { internal_listener: val }, 'internal_listener', type + '.withInternalListener'),
    withListenerFilters:: function(val) validator.validateField(self + { listener_filters: val }, 'listener_filters', type + '.withListenerFilters'),
    withListenerFiltersTimeout:: function(val) validator.validateField(self + { listener_filters_timeout: val }, 'listener_filters_timeout', type + '.withListenerFiltersTimeout'),
    withMetadata:: function(val) validator.validateField(self + { metadata: val }, 'metadata', type + '.withMetadata'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withPerConnectionBufferLimitBytes:: function(val) validator.validateField(self + { per_connection_buffer_limit_bytes: val }, 'per_connection_buffer_limit_bytes', type + '.withPerConnectionBufferLimitBytes'),
    withReusePort:: function(val) validator.validateField(self + { reuse_port: val }, 'reuse_port', type + '.withReusePort'),
    withSocketOptions:: function(val) validator.validateField(self + { socket_options: val }, 'socket_options', type + '.withSocketOptions'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withTcpBacklogSize:: function(val) validator.validateField(self + { tcp_backlog_size: val }, 'tcp_backlog_size', type + '.withTcpBacklogSize'),
    withTcpFastOpenQueueLength:: function(val) validator.validateField(self + { tcp_fast_open_queue_length: val }, 'tcp_fast_open_queue_length', type + '.withTcpFastOpenQueueLength'),
    withTrafficDirection:: function(val) validator.validateField(self + { traffic_direction: val }, 'traffic_direction', type + '.withTrafficDirection'),
    withTransparent:: function(val) validator.validateField(self + { transparent: val }, 'transparent', type + '.withTransparent'),
    withUdpListenerConfig:: function(val) validator.validateField(self + { udp_listener_config: val }, 'udp_listener_config', type + '.withUdpListenerConfig'),
    withUseOriginalDst:: function(val) validator.validateField(self + { use_original_dst: val }, 'use_original_dst', type + '.withUseOriginalDst'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
