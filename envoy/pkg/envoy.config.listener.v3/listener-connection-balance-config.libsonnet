// Message type: envoy.config.listener.v3.Listener.ConnectionBalanceConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.listener.v3.Listener.ConnectionBalanceConfig';
local generator = import '../generator.libsonnet';
local fields = {
  exact_balance: {
    type: 'envoy.config.listener.v3.Listener.ConnectionBalanceConfig.ExactBalance',
    allowedNames: [
      'exact_balance',
      'exactBalance',
    ],
  },
  extend_balance: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'extend_balance',
      'extendBalance',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'exact_balance',
      'extend_balance',
    ],
    required: true,
    group: 'balance_type',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ExactBalance:: (import 'listener-connection-balance-config-exact-balance.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withExactBalance:: function(val) validator.validateField(self + { exact_balance: val }, 'exact_balance', type + '.withExactBalance'),
    withExtendBalance:: function(val) validator.validateField(self + { extend_balance: val }, 'extend_balance', type + '.withExtendBalance'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
