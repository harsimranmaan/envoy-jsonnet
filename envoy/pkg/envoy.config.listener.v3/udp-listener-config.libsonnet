// Message type: envoy.config.listener.v3.UdpListenerConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.listener.v3.UdpListenerConfig';
local generator = import '../generator.libsonnet';
local fields = {
  downstream_socket_config: {
    type: 'envoy.config.core.v3.UdpSocketConfig',
    allowedNames: [
      'downstream_socket_config',
      'downstreamSocketConfig',
    ],
  },
  quic_options: {
    type: 'envoy.config.listener.v3.QuicProtocolOptions',
    allowedNames: [
      'quic_options',
      'quicOptions',
    ],
  },
  udp_packet_packet_writer_config: {
    type: 'envoy.config.core.v3.TypedExtensionConfig',
    allowedNames: [
      'udp_packet_packet_writer_config',
      'udpPacketPacketWriterConfig',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withDownstreamSocketConfig:: function(val) validator.validateField(self + { downstream_socket_config: val }, 'downstream_socket_config', type + '.withDownstreamSocketConfig'),
    withQuicOptions:: function(val) validator.validateField(self + { quic_options: val }, 'quic_options', type + '.withQuicOptions'),
    withUdpPacketPacketWriterConfig:: function(val) validator.validateField(self + { udp_packet_packet_writer_config: val }, 'udp_packet_packet_writer_config', type + '.withUdpPacketPacketWriterConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
