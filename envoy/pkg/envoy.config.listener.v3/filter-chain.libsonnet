// Message type: envoy.config.listener.v3.FilterChain
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.listener.v3.FilterChain';
local generator = import '../generator.libsonnet';
local fields = {
  filter_chain_match: {
    type: 'envoy.config.listener.v3.FilterChainMatch',
    allowedNames: [
      'filter_chain_match',
      'filterChainMatch',
    ],
  },
  filters: {
    type: 'envoy.config.listener.v3.Filter',
    allowedNames: [
      'filters',
    ],
    containerType: 'list',
  },
  metadata: {
    type: 'envoy.config.core.v3.Metadata',
    allowedNames: [
      'metadata',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  on_demand_configuration: {
    type: 'envoy.config.listener.v3.FilterChain.OnDemandConfiguration',
    allowedNames: [
      'on_demand_configuration',
      'onDemandConfiguration',
    ],
  },
  transport_socket: {
    type: 'envoy.config.core.v3.TransportSocket',
    allowedNames: [
      'transport_socket',
      'transportSocket',
    ],
  },
  transport_socket_connect_timeout: {
    type: 'google.protobuf.Duration',
    allowedNames: [
      'transport_socket_connect_timeout',
      'transportSocketConnectTimeout',
    ],
  },
  use_proxy_proto: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'use_proxy_proto',
      'useProxyProto',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    OnDemandConfiguration:: (import 'filter-chain-on-demand-configuration.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFilterChainMatch:: function(val) validator.validateField(self + { filter_chain_match: val }, 'filter_chain_match', type + '.withFilterChainMatch'),
    withFilters:: function(val) validator.validateField(self + { filters: val }, 'filters', type + '.withFilters'),
    withMetadata:: function(val) validator.validateField(self + { metadata: val }, 'metadata', type + '.withMetadata'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withOnDemandConfiguration:: function(val) validator.validateField(self + { on_demand_configuration: val }, 'on_demand_configuration', type + '.withOnDemandConfiguration'),
    withTransportSocket:: function(val) validator.validateField(self + { transport_socket: val }, 'transport_socket', type + '.withTransportSocket'),
    withTransportSocketConnectTimeout:: function(val) validator.validateField(self + { transport_socket_connect_timeout: val }, 'transport_socket_connect_timeout', type + '.withTransportSocketConnectTimeout'),
    withUseProxyProto:: function(val) validator.validateField(self + { use_proxy_proto: val }, 'use_proxy_proto', type + '.withUseProxyProto'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
