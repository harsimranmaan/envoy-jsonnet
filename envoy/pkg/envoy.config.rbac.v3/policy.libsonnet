// Message type: envoy.config.rbac.v3.Policy
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.rbac.v3.Policy';
local generator = import '../generator.libsonnet';
local fields = {
  checked_condition: {
    type: 'google.api.expr.v1alpha1.CheckedExpr',
    allowedNames: [
      'checked_condition',
      'checkedCondition',
    ],
  },
  condition: {
    type: 'google.api.expr.v1alpha1.Expr',
    allowedNames: [
      'condition',
    ],
  },
  permissions: {
    type: 'envoy.config.rbac.v3.Permission',
    allowedNames: [
      'permissions',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  principals: {
    type: 'envoy.config.rbac.v3.Principal',
    allowedNames: [
      'principals',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withCheckedCondition:: function(val) validator.validateField(self + { checked_condition: val }, 'checked_condition', type + '.withCheckedCondition'),
    withCondition:: function(val) validator.validateField(self + { condition: val }, 'condition', type + '.withCondition'),
    withPermissions:: function(val) validator.validateField(self + { permissions: val }, 'permissions', type + '.withPermissions'),
    withPrincipals:: function(val) validator.validateField(self + { principals: val }, 'principals', type + '.withPrincipals'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
