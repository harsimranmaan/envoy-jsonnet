// Message type: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig';
local generator = import '../generator.libsonnet';
local fields = {
  headers_with_underscores_action: {
    type: 'envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction',
    allowedNames: [
      'headers_with_underscores_action',
      'headersWithUnderscoresAction',
    ],
  },
  http1_protocol_options: {
    type: 'envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions',
    allowedNames: [
      'http1_protocol_options',
      'http1ProtocolOptions',
    ],
  },
  restrict_http_methods: {
    type: 'bool',
    allowedNames: [
      'restrict_http_methods',
      'restrictHttpMethods',
    ],
  },
  uri_path_normalization_options: {
    type: 'envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions',
    allowedNames: [
      'uri_path_normalization_options',
      'uriPathNormalizationOptions',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    HeadersWithUnderscoresAction:: (import 'header-validator-config-headers-with-underscores-action.libsonnet').definition,
    UriPathNormalizationOptions:: (import 'header-validator-config-uri-path-normalization-options.libsonnet').definition,
    Http1ProtocolOptions:: (import 'header-validator-config-http-1-protocol-options.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHeadersWithUnderscoresAction:: function(val) validator.validateField(self + { headers_with_underscores_action: val }, 'headers_with_underscores_action', type + '.withHeadersWithUnderscoresAction'),
    withHttp1ProtocolOptions:: function(val) validator.validateField(self + { http1_protocol_options: val }, 'http1_protocol_options', type + '.withHttp1ProtocolOptions'),
    withRestrictHttpMethods:: function(val) validator.validateField(self + { restrict_http_methods: val }, 'restrict_http_methods', type + '.withRestrictHttpMethods'),
    withUriPathNormalizationOptions:: function(val) validator.validateField(self + { uri_path_normalization_options: val }, 'uri_path_normalization_options', type + '.withUriPathNormalizationOptions'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
