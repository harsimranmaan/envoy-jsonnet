// Message type: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions';
local generator = import '../generator.libsonnet';
local fields = {
  path_with_escaped_slashes_action: {
    type: 'envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction',
    allowedNames: [
      'path_with_escaped_slashes_action',
      'pathWithEscapedSlashesAction',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
  skip_merging_slashes: {
    type: 'bool',
    allowedNames: [
      'skip_merging_slashes',
      'skipMergingSlashes',
    ],
  },
  skip_path_normalization: {
    type: 'bool',
    allowedNames: [
      'skip_path_normalization',
      'skipPathNormalization',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    PathWithEscapedSlashesAction:: (import 'header-validator-config-uri-path-normalization-options-path-with-escaped-slashes-action.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withPathWithEscapedSlashesAction:: function(val) validator.validateField(self + { path_with_escaped_slashes_action: val }, 'path_with_escaped_slashes_action', type + '.withPathWithEscapedSlashesAction'),
    withSkipMergingSlashes:: function(val) validator.validateField(self + { skip_merging_slashes: val }, 'skip_merging_slashes', type + '.withSkipMergingSlashes'),
    withSkipPathNormalization:: function(val) validator.validateField(self + { skip_path_normalization: val }, 'skip_path_normalization', type + '.withSkipPathNormalization'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
