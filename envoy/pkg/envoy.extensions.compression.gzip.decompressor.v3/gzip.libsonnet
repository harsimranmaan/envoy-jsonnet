// Message type: envoy.extensions.compression.gzip.decompressor.v3.Gzip
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.compression.gzip.decompressor.v3.Gzip';
local generator = import '../generator.libsonnet';
local fields = {
  chunk_size: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'chunk_size',
      'chunkSize',
    ],
    constraints: {
      Uint32: {
        gte: 4096,
        lte: 65536,
      },
    },
  },
  max_inflate_ratio: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'max_inflate_ratio',
      'maxInflateRatio',
    ],
    constraints: {
      Uint32: {
        gte: 1,
        lte: 1032,
      },
    },
  },
  window_bits: {
    type: 'google.protobuf.UInt32Value',
    allowedNames: [
      'window_bits',
      'windowBits',
    ],
    constraints: {
      Uint32: {
        gte: 9,
        lte: 15,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withChunkSize:: function(val) validator.validateField(self + { chunk_size: val }, 'chunk_size', type + '.withChunkSize'),
    withMaxInflateRatio:: function(val) validator.validateField(self + { max_inflate_ratio: val }, 'max_inflate_ratio', type + '.withMaxInflateRatio'),
    withWindowBits:: function(val) validator.validateField(self + { window_bits: val }, 'window_bits', type + '.withWindowBits'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
