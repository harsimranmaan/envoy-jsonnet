// Message type: envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig';
local generator = import '../generator.libsonnet';
local fields = {
  alternate_protocols_cache_options: {
    type: 'envoy.config.core.v3.AlternateProtocolsCacheOptions',
    allowedNames: [
      'alternate_protocols_cache_options',
      'alternateProtocolsCacheOptions',
    ],
  },
  http2_protocol_options: {
    type: 'envoy.config.core.v3.Http2ProtocolOptions',
    allowedNames: [
      'http2_protocol_options',
      'http2ProtocolOptions',
    ],
  },
  http3_protocol_options: {
    type: 'envoy.config.core.v3.Http3ProtocolOptions',
    allowedNames: [
      'http3_protocol_options',
      'http3ProtocolOptions',
    ],
  },
  http_protocol_options: {
    type: 'envoy.config.core.v3.Http1ProtocolOptions',
    allowedNames: [
      'http_protocol_options',
      'httpProtocolOptions',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAlternateProtocolsCacheOptions:: function(val) validator.validateField(self + { alternate_protocols_cache_options: val }, 'alternate_protocols_cache_options', type + '.withAlternateProtocolsCacheOptions'),
    withHttp2ProtocolOptions:: function(val) validator.validateField(self + { http2_protocol_options: val }, 'http2_protocol_options', type + '.withHttp2ProtocolOptions'),
    withHttp3ProtocolOptions:: function(val) validator.validateField(self + { http3_protocol_options: val }, 'http3_protocol_options', type + '.withHttp3ProtocolOptions'),
    withHttpProtocolOptions:: function(val) validator.validateField(self + { http_protocol_options: val }, 'http_protocol_options', type + '.withHttpProtocolOptions'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
