// Message type: envoy.extensions.upstreams.http.v3.HttpProtocolOptions
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.upstreams.http.v3.HttpProtocolOptions';
local generator = import '../generator.libsonnet';
local fields = {
  auto_config: {
    type: 'envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig',
    allowedNames: [
      'auto_config',
      'autoConfig',
    ],
  },
  common_http_protocol_options: {
    type: 'envoy.config.core.v3.HttpProtocolOptions',
    allowedNames: [
      'common_http_protocol_options',
      'commonHttpProtocolOptions',
    ],
  },
  explicit_http_config: {
    type: 'envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig',
    allowedNames: [
      'explicit_http_config',
      'explicitHttpConfig',
    ],
  },
  http_filters: {
    type: 'envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter',
    allowedNames: [
      'http_filters',
      'httpFilters',
    ],
    containerType: 'list',
  },
  upstream_http_protocol_options: {
    type: 'envoy.config.core.v3.UpstreamHttpProtocolOptions',
    allowedNames: [
      'upstream_http_protocol_options',
      'upstreamHttpProtocolOptions',
    ],
  },
  use_downstream_protocol_config: {
    type: 'envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig',
    allowedNames: [
      'use_downstream_protocol_config',
      'useDownstreamProtocolConfig',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'explicit_http_config',
      'use_downstream_protocol_config',
      'auto_config',
    ],
    required: true,
    group: 'upstream_protocol_options',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    ExplicitHttpConfig:: (import 'http-protocol-options-explicit-http-config.libsonnet').definition,
    UseDownstreamHttpConfig:: (import 'http-protocol-options-use-downstream-http-config.libsonnet').definition,
    AutoHttpConfig:: (import 'http-protocol-options-auto-http-config.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAutoConfig:: function(val) validator.validateField(self + { auto_config: val }, 'auto_config', type + '.withAutoConfig'),
    withCommonHttpProtocolOptions:: function(val) validator.validateField(self + { common_http_protocol_options: val }, 'common_http_protocol_options', type + '.withCommonHttpProtocolOptions'),
    withExplicitHttpConfig:: function(val) validator.validateField(self + { explicit_http_config: val }, 'explicit_http_config', type + '.withExplicitHttpConfig'),
    withHttpFilters:: function(val) validator.validateField(self + { http_filters: val }, 'http_filters', type + '.withHttpFilters'),
    withUpstreamHttpProtocolOptions:: function(val) validator.validateField(self + { upstream_http_protocol_options: val }, 'upstream_http_protocol_options', type + '.withUpstreamHttpProtocolOptions'),
    withUseDownstreamProtocolConfig:: function(val) validator.validateField(self + { use_downstream_protocol_config: val }, 'use_downstream_protocol_config', type + '.withUseDownstreamProtocolConfig'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
