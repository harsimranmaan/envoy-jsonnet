// Message type: validate.RepeatedRules
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'validate.RepeatedRules';
local generator = import '../generator.libsonnet';
local fields = {
  ignore_empty: {
    type: 'bool',
    allowedNames: [
      'ignore_empty',
      'ignoreEmpty',
    ],
  },
  items: {
    type: 'validate.FieldRules',
    allowedNames: [
      'items',
    ],
  },
  max_items: {
    type: 'uint64',
    allowedNames: [
      'max_items',
      'maxItems',
    ],
  },
  min_items: {
    type: 'uint64',
    allowedNames: [
      'min_items',
      'minItems',
    ],
  },
  unique: {
    type: 'bool',
    allowedNames: [
      'unique',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withIgnoreEmpty:: function(val) validator.validateField(self + { ignore_empty: val }, 'ignore_empty', type + '.withIgnoreEmpty'),
    withItems:: function(val) validator.validateField(self + { items: val }, 'items', type + '.withItems'),
    withMaxItems:: function(val) validator.validateField(self + { max_items: val }, 'max_items', type + '.withMaxItems'),
    withMinItems:: function(val) validator.validateField(self + { min_items: val }, 'min_items', type + '.withMinItems'),
    withUnique:: function(val) validator.validateField(self + { unique: val }, 'unique', type + '.withUnique'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
