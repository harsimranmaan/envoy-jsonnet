// Message type: validate.DoubleRules
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'validate.DoubleRules';
local generator = import '../generator.libsonnet';
local fields = {
  const: {
    type: 'double',
    allowedNames: [
      'const',
    ],
  },
  gt: {
    type: 'double',
    allowedNames: [
      'gt',
    ],
  },
  gte: {
    type: 'double',
    allowedNames: [
      'gte',
    ],
  },
  ignore_empty: {
    type: 'bool',
    allowedNames: [
      'ignore_empty',
      'ignoreEmpty',
    ],
  },
  'in': {
    type: 'double',
    allowedNames: [
      'in',
    ],
    containerType: 'list',
  },
  lt: {
    type: 'double',
    allowedNames: [
      'lt',
    ],
  },
  lte: {
    type: 'double',
    allowedNames: [
      'lte',
    ],
  },
  not_in: {
    type: 'double',
    allowedNames: [
      'not_in',
      'notIn',
    ],
    containerType: 'list',
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConst:: function(val) validator.validateField(self + { const: val }, 'const', type + '.withConst'),
    withGt:: function(val) validator.validateField(self + { gt: val }, 'gt', type + '.withGt'),
    withGte:: function(val) validator.validateField(self + { gte: val }, 'gte', type + '.withGte'),
    withIgnoreEmpty:: function(val) validator.validateField(self + { ignore_empty: val }, 'ignore_empty', type + '.withIgnoreEmpty'),
    withIn:: function(val) validator.validateField(self + { 'in': val }, 'in', type + '.withIn'),
    withLt:: function(val) validator.validateField(self + { lt: val }, 'lt', type + '.withLt'),
    withLte:: function(val) validator.validateField(self + { lte: val }, 'lte', type + '.withLte'),
    withNotIn:: function(val) validator.validateField(self + { not_in: val }, 'not_in', type + '.withNotIn'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
