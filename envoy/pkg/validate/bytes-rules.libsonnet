// Message type: validate.BytesRules
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'validate.BytesRules';
local generator = import '../generator.libsonnet';
local fields = {
  const: {
    type: 'bytes',
    allowedNames: [
      'const',
    ],
  },
  contains: {
    type: 'bytes',
    allowedNames: [
      'contains',
    ],
  },
  ignore_empty: {
    type: 'bool',
    allowedNames: [
      'ignore_empty',
      'ignoreEmpty',
    ],
  },
  'in': {
    type: 'bytes',
    allowedNames: [
      'in',
    ],
    containerType: 'list',
  },
  ip: {
    type: 'bool',
    allowedNames: [
      'ip',
    ],
  },
  ipv4: {
    type: 'bool',
    allowedNames: [
      'ipv4',
    ],
  },
  ipv6: {
    type: 'bool',
    allowedNames: [
      'ipv6',
    ],
  },
  len: {
    type: 'uint64',
    allowedNames: [
      'len',
    ],
  },
  max_len: {
    type: 'uint64',
    allowedNames: [
      'max_len',
      'maxLen',
    ],
  },
  min_len: {
    type: 'uint64',
    allowedNames: [
      'min_len',
      'minLen',
    ],
  },
  not_in: {
    type: 'bytes',
    allowedNames: [
      'not_in',
      'notIn',
    ],
    containerType: 'list',
  },
  pattern: {
    type: 'string',
    allowedNames: [
      'pattern',
    ],
  },
  prefix: {
    type: 'bytes',
    allowedNames: [
      'prefix',
    ],
  },
  suffix: {
    type: 'bytes',
    allowedNames: [
      'suffix',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'ip',
      'ipv4',
      'ipv6',
    ],
    required: false,
    group: 'well_known',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withConst:: function(val) validator.validateField(self + { const: val }, 'const', type + '.withConst'),
    withContains:: function(val) validator.validateField(self + { contains: val }, 'contains', type + '.withContains'),
    withIgnoreEmpty:: function(val) validator.validateField(self + { ignore_empty: val }, 'ignore_empty', type + '.withIgnoreEmpty'),
    withIn:: function(val) validator.validateField(self + { 'in': val }, 'in', type + '.withIn'),
    withIp:: function(val) validator.validateField(self + { ip: val }, 'ip', type + '.withIp'),
    withIpv4:: function(val) validator.validateField(self + { ipv4: val }, 'ipv4', type + '.withIpv4'),
    withIpv6:: function(val) validator.validateField(self + { ipv6: val }, 'ipv6', type + '.withIpv6'),
    withLen:: function(val) validator.validateField(self + { len: val }, 'len', type + '.withLen'),
    withMaxLen:: function(val) validator.validateField(self + { max_len: val }, 'max_len', type + '.withMaxLen'),
    withMinLen:: function(val) validator.validateField(self + { min_len: val }, 'min_len', type + '.withMinLen'),
    withNotIn:: function(val) validator.validateField(self + { not_in: val }, 'not_in', type + '.withNotIn'),
    withPattern:: function(val) validator.validateField(self + { pattern: val }, 'pattern', type + '.withPattern'),
    withPrefix:: function(val) validator.validateField(self + { prefix: val }, 'prefix', type + '.withPrefix'),
    withSuffix:: function(val) validator.validateField(self + { suffix: val }, 'suffix', type + '.withSuffix'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
