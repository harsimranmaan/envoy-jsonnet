// Message type: validate.MapRules
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'validate.MapRules';
local generator = import '../generator.libsonnet';
local fields = {
  ignore_empty: {
    type: 'bool',
    allowedNames: [
      'ignore_empty',
      'ignoreEmpty',
    ],
  },
  keys: {
    type: 'validate.FieldRules',
    allowedNames: [
      'keys',
    ],
  },
  max_pairs: {
    type: 'uint64',
    allowedNames: [
      'max_pairs',
      'maxPairs',
    ],
  },
  min_pairs: {
    type: 'uint64',
    allowedNames: [
      'min_pairs',
      'minPairs',
    ],
  },
  no_sparse: {
    type: 'bool',
    allowedNames: [
      'no_sparse',
      'noSparse',
    ],
  },
  values: {
    type: 'validate.FieldRules',
    allowedNames: [
      'values',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withIgnoreEmpty:: function(val) validator.validateField(self + { ignore_empty: val }, 'ignore_empty', type + '.withIgnoreEmpty'),
    withKeys:: function(val) validator.validateField(self + { keys: val }, 'keys', type + '.withKeys'),
    withMaxPairs:: function(val) validator.validateField(self + { max_pairs: val }, 'max_pairs', type + '.withMaxPairs'),
    withMinPairs:: function(val) validator.validateField(self + { min_pairs: val }, 'min_pairs', type + '.withMinPairs'),
    withNoSparse:: function(val) validator.validateField(self + { no_sparse: val }, 'no_sparse', type + '.withNoSparse'),
    withValues:: function(val) validator.validateField(self + { values: val }, 'values', type + '.withValues'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
