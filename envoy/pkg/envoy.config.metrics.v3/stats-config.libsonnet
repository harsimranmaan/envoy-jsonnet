// Message type: envoy.config.metrics.v3.StatsConfig
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.metrics.v3.StatsConfig';
local generator = import '../generator.libsonnet';
local fields = {
  histogram_bucket_settings: {
    type: 'envoy.config.metrics.v3.HistogramBucketSettings',
    allowedNames: [
      'histogram_bucket_settings',
      'histogramBucketSettings',
    ],
    containerType: 'list',
  },
  stats_matcher: {
    type: 'envoy.config.metrics.v3.StatsMatcher',
    allowedNames: [
      'stats_matcher',
      'statsMatcher',
    ],
  },
  stats_tags: {
    type: 'envoy.config.metrics.v3.TagSpecifier',
    allowedNames: [
      'stats_tags',
      'statsTags',
    ],
    containerType: 'list',
  },
  use_all_default_tags: {
    type: 'google.protobuf.BoolValue',
    allowedNames: [
      'use_all_default_tags',
      'useAllDefaultTags',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withHistogramBucketSettings:: function(val) validator.validateField(self + { histogram_bucket_settings: val }, 'histogram_bucket_settings', type + '.withHistogramBucketSettings'),
    withStatsMatcher:: function(val) validator.validateField(self + { stats_matcher: val }, 'stats_matcher', type + '.withStatsMatcher'),
    withStatsTags:: function(val) validator.validateField(self + { stats_tags: val }, 'stats_tags', type + '.withStatsTags'),
    withUseAllDefaultTags:: function(val) validator.validateField(self + { use_all_default_tags: val }, 'use_all_default_tags', type + '.withUseAllDefaultTags'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
