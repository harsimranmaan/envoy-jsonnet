// Message type: envoy.config.metrics.v3.TagSpecifier
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.metrics.v3.TagSpecifier';
local generator = import '../generator.libsonnet';
local fields = {
  fixed_value: {
    type: 'string',
    allowedNames: [
      'fixed_value',
      'fixedValue',
    ],
  },
  regex: {
    type: 'string',
    allowedNames: [
      'regex',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        max_bytes: 1024,
      },
    },
  },
  tag_name: {
    type: 'string',
    allowedNames: [
      'tag_name',
      'tagName',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'regex',
      'fixed_value',
    ],
    required: false,
    group: 'tag_value',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withFixedValue:: function(val) validator.validateField(self + { fixed_value: val }, 'fixed_value', type + '.withFixedValue'),
    withRegex:: function(val) validator.validateField(self + { regex: val }, 'regex', type + '.withRegex'),
    withTagName:: function(val) validator.validateField(self + { tag_name: val }, 'tag_name', type + '.withTagName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
