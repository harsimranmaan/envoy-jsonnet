// Message type: envoy.config.metrics.v3.StatsdSink
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.config.metrics.v3.StatsdSink';
local generator = import '../generator.libsonnet';
local fields = {
  address: {
    type: 'envoy.config.core.v3.Address',
    allowedNames: [
      'address',
    ],
  },
  prefix: {
    type: 'string',
    allowedNames: [
      'prefix',
    ],
  },
  tcp_cluster_name: {
    type: 'string',
    allowedNames: [
      'tcp_cluster_name',
      'tcpClusterName',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'address',
      'tcp_cluster_name',
    ],
    required: true,
    group: 'statsd_specifier',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAddress:: function(val) validator.validateField(self + { address: val }, 'address', type + '.withAddress'),
    withPrefix:: function(val) validator.validateField(self + { prefix: val }, 'prefix', type + '.withPrefix'),
    withTcpClusterName:: function(val) validator.validateField(self + { tcp_cluster_name: val }, 'tcp_cluster_name', type + '.withTcpClusterName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
