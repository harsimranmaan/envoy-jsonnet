// Message type: envoy.extensions.filters.network.ext_authz.v3.ExtAuthz
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.network.ext_authz.v3.ExtAuthz';
local generator = import '../generator.libsonnet';
local fields = {
  bootstrap_metadata_labels_key: {
    type: 'string',
    allowedNames: [
      'bootstrap_metadata_labels_key',
      'bootstrapMetadataLabelsKey',
    ],
  },
  failure_mode_allow: {
    type: 'bool',
    allowedNames: [
      'failure_mode_allow',
      'failureModeAllow',
    ],
  },
  filter_enabled_metadata: {
    type: 'envoy.type.matcher.v3.MetadataMatcher',
    allowedNames: [
      'filter_enabled_metadata',
      'filterEnabledMetadata',
    ],
  },
  grpc_service: {
    type: 'envoy.config.core.v3.GrpcService',
    allowedNames: [
      'grpc_service',
      'grpcService',
    ],
  },
  include_peer_certificate: {
    type: 'bool',
    allowedNames: [
      'include_peer_certificate',
      'includePeerCertificate',
    ],
  },
  stat_prefix: {
    type: 'string',
    allowedNames: [
      'stat_prefix',
      'statPrefix',
    ],
    constraints: {
      String_: {
        WellKnown: null,
        min_len: 1,
      },
    },
  },
  transport_api_version: {
    type: 'envoy.config.core.v3.ApiVersion',
    allowedNames: [
      'transport_api_version',
      'transportApiVersion',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withBootstrapMetadataLabelsKey:: function(val) validator.validateField(self + { bootstrap_metadata_labels_key: val }, 'bootstrap_metadata_labels_key', type + '.withBootstrapMetadataLabelsKey'),
    withFailureModeAllow:: function(val) validator.validateField(self + { failure_mode_allow: val }, 'failure_mode_allow', type + '.withFailureModeAllow'),
    withFilterEnabledMetadata:: function(val) validator.validateField(self + { filter_enabled_metadata: val }, 'filter_enabled_metadata', type + '.withFilterEnabledMetadata'),
    withGrpcService:: function(val) validator.validateField(self + { grpc_service: val }, 'grpc_service', type + '.withGrpcService'),
    withIncludePeerCertificate:: function(val) validator.validateField(self + { include_peer_certificate: val }, 'include_peer_certificate', type + '.withIncludePeerCertificate'),
    withStatPrefix:: function(val) validator.validateField(self + { stat_prefix: val }, 'stat_prefix', type + '.withStatPrefix'),
    withTransportApiVersion:: function(val) validator.validateField(self + { transport_api_version: val }, 'transport_api_version', type + '.withTransportApiVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
