// Message type: opentelemetry.proto.common.v1.InstrumentationScope
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'opentelemetry.proto.common.v1.InstrumentationScope';
local generator = import '../generator.libsonnet';
local fields = {
  attributes: {
    type: 'opentelemetry.proto.common.v1.KeyValue',
    allowedNames: [
      'attributes',
    ],
    containerType: 'list',
  },
  dropped_attributes_count: {
    type: 'uint32',
    allowedNames: [
      'dropped_attributes_count',
      'droppedAttributesCount',
    ],
  },
  name: {
    type: 'string',
    allowedNames: [
      'name',
    ],
  },
  version: {
    type: 'string',
    allowedNames: [
      'version',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withAttributes:: function(val) validator.validateField(self + { attributes: val }, 'attributes', type + '.withAttributes'),
    withDroppedAttributesCount:: function(val) validator.validateField(self + { dropped_attributes_count: val }, 'dropped_attributes_count', type + '.withDroppedAttributesCount'),
    withName:: function(val) validator.validateField(self + { name: val }, 'name', type + '.withName'),
    withVersion:: function(val) validator.validateField(self + { version: val }, 'version', type + '.withVersion'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
