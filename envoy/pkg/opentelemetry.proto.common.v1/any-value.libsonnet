// Message type: opentelemetry.proto.common.v1.AnyValue
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'opentelemetry.proto.common.v1.AnyValue';
local generator = import '../generator.libsonnet';
local fields = {
  array_value: {
    type: 'opentelemetry.proto.common.v1.ArrayValue',
    allowedNames: [
      'array_value',
      'arrayValue',
    ],
  },
  bool_value: {
    type: 'bool',
    allowedNames: [
      'bool_value',
      'boolValue',
    ],
  },
  bytes_value: {
    type: 'bytes',
    allowedNames: [
      'bytes_value',
      'bytesValue',
    ],
  },
  double_value: {
    type: 'double',
    allowedNames: [
      'double_value',
      'doubleValue',
    ],
  },
  int_value: {
    type: 'int64',
    allowedNames: [
      'int_value',
      'intValue',
    ],
  },
  kvlist_value: {
    type: 'opentelemetry.proto.common.v1.KeyValueList',
    allowedNames: [
      'kvlist_value',
      'kvlistValue',
    ],
  },
  string_value: {
    type: 'string',
    allowedNames: [
      'string_value',
      'stringValue',
    ],
  },
};
local oneOfs = [
  {
    fields: [
      'string_value',
      'bool_value',
      'int_value',
      'double_value',
      'array_value',
      'kvlist_value',
      'bytes_value',
    ],
    required: false,
    group: 'value',
  },
];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withArrayValue:: function(val) validator.validateField(self + { array_value: val }, 'array_value', type + '.withArrayValue'),
    withBoolValue:: function(val) validator.validateField(self + { bool_value: val }, 'bool_value', type + '.withBoolValue'),
    withBytesValue:: function(val) validator.validateField(self + { bytes_value: val }, 'bytes_value', type + '.withBytesValue'),
    withDoubleValue:: function(val) validator.validateField(self + { double_value: val }, 'double_value', type + '.withDoubleValue'),
    withIntValue:: function(val) validator.validateField(self + { int_value: val }, 'int_value', type + '.withIntValue'),
    withKvlistValue:: function(val) validator.validateField(self + { kvlist_value: val }, 'kvlist_value', type + '.withKvlistValue'),
    withStringValue:: function(val) validator.validateField(self + { string_value: val }, 'string_value', type + '.withStringValue'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
