// Message type: envoy.extensions.filters.http.ip_tagging.v3.IPTagging
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ip_tagging.v3.IPTagging';
local generator = import '../generator.libsonnet';
local fields = {
  ip_tags: {
    type: 'envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag',
    allowedNames: [
      'ip_tags',
      'ipTags',
    ],
    containerType: 'list',
    required: true,
    constraints: {
      Repeated: {
        min_items: 1,
      },
    },
  },
  request_type: {
    type: 'envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType',
    allowedNames: [
      'request_type',
      'requestType',
    ],
    constraints: {
      Enum: {
        defined_only: true,
      },
    },
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {
    RequestType:: (import 'ip-tagging-request-type.libsonnet').definition,
    IPTag:: (import 'ip-tagging-ip-tag.libsonnet').definition,

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withIpTags:: function(val) validator.validateField(self + { ip_tags: val }, 'ip_tags', type + '.withIpTags'),
    withRequestType:: function(val) validator.validateField(self + { request_type: val }, 'request_type', type + '.withRequestType'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
