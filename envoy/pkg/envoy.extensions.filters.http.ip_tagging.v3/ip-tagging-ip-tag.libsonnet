// Message type: envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.

local type = 'envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag';
local generator = import '../generator.libsonnet';
local fields = {
  ip_list: {
    type: 'envoy.config.core.v3.CidrRange',
    allowedNames: [
      'ip_list',
      'ipList',
    ],
    containerType: 'list',
  },
  ip_tag_name: {
    type: 'string',
    allowedNames: [
      'ip_tag_name',
      'ipTagName',
    ],
  },
};
local oneOfs = [];
local validator = generator(type, fields, oneOfs);

{
  definition: {

    // methods
    _new:: function(partialObject={}) (
      local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
      validator.validatePartial(obj + self)
    ),
    _validate:: function() validator.validateAll(self),
    _normalize:: function(kind='') validator.normalizeAll(self, kind),
    withIpList:: function(val) validator.validateField(self + { ip_list: val }, 'ip_list', type + '.withIpList'),
    withIpTagName:: function(val) validator.validateField(self + { ip_tag_name: val }, 'ip_tag_name', type + '.withIpTagName'),
  },
  validator:: validator.validateAll,
  normalizer: validator.normalizeAll,
}
